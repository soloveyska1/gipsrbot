import os
import sys
import logging
import json
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    CallbackQueryHandler, MessageHandler, filters, ConversationHandler
)
from telegram.constants import ParseMode
from dotenv import load_dotenv
import re

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ADMIN_CHAT_ID = os.getenv('ADMIN_CHAT_ID')

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if not TELEGRAM_BOT_TOKEN:
    print("–û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω TELEGRAM_BOT_TOKEN –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    print("–°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ –Ω–µ–≥–æ:")
    print("TELEGRAM_BOT_TOKEN=–≤–∞—à_—Ç–æ–∫–µ–Ω_–±–æ—Ç–∞")
    print("ADMIN_CHAT_ID=–≤–∞—à_telegram_id")
    sys.exit(1)

if not ADMIN_CHAT_ID:
    print("–û–®–ò–ë–ö–ê: –ù–µ –Ω–∞–π–¥–µ–Ω ADMIN_CHAT_ID –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    print("–î–æ–±–∞–≤—å—Ç–µ –≤ —Ñ–∞–π–ª .env —Å—Ç—Ä–æ–∫—É:")
    print("ADMIN_CHAT_ID=–≤–∞—à_telegram_id")
    sys.exit(1)

try:
    ADMIN_CHAT_ID = int(ADMIN_CHAT_ID)
except ValueError:
    print(f"–û–®–ò–ë–ö–ê: ADMIN_CHAT_ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º, –ø–æ–ª—É—á–µ–Ω–æ: {ADMIN_CHAT_ID}")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
# –ò—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–µ –ø—É—Ç–∏ –æ—Ç —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
BASE_DIR = os.path.join(SCRIPT_DIR, "gipsr_bot", "clients")
DATA_DIR = os.path.join(SCRIPT_DIR, "gipsr_bot", "data")
LOGS_DIR = os.path.join(SCRIPT_DIR, "gipsr_bot", "logs")
ASSETS_DIR = os.path.join(SCRIPT_DIR, "gipsr_bot", "assets")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
for directory in [BASE_DIR, os.path.join(BASE_DIR, 'feedbacks'), DATA_DIR, LOGS_DIR, ASSETS_DIR]:
    try:
        os.makedirs(directory, exist_ok=True)
        logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {directory}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {directory}: {e}")

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ —Ñ–∞–π–ª
file_handler = logging.FileHandler(os.path.join(LOGS_DIR, 'bot.log'))
file_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
logger.addHandler(file_handler)

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
PRICES_FILE = os.path.join(DATA_DIR, 'prices.json')
REFERRALS_FILE = os.path.join(DATA_DIR, 'referrals.json')
ORDERS_FILE = os.path.join(DATA_DIR, 'orders.json')
FEEDBACKS_FILE = os.path.join(DATA_DIR, 'feedbacks.json')

# –¢–∏–ø—ã –∑–∞–∫–∞–∑–æ–≤
ORDER_TYPES = {
    'self': {
        'name': '–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞',
        'icon': 'üìù',
        'description': '–ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –∑–∞–¥–∞–Ω–∏–π, —ç—Å—Å–µ, –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç. –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –±—ã—Å—Ç—Ä–æ –∏ –∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ.',
        'details': '–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã –≤–∫–ª—é—á–∞—é—Ç –Ω–µ–±–æ–ª—å—à–∏–µ —ç—Å—Å–µ, –∑–∞–¥–∞–Ω–∏—è –ø–æ –ø—Ä–µ–¥–º–µ—Ç–∞–º, —Ç–µ—Å—Ç—ã –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ. –û–±—ã—á–Ω–æ –æ–±—ä–µ–º–æ–º –¥–æ 20 —Å—Ç—Ä–∞–Ω–∏—Ü.',
        'examples': ['–≠—Å—Å–µ –ø–æ —Ñ–∏–ª–æ—Å–æ—Ñ–∏–∏', '–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è –ø–æ —ç–∫–æ–Ω–æ–º–∏–∫–µ', '–†–µ—Ñ–µ—Ä–∞—Ç –ø–æ –∏—Å—Ç–æ—Ä–∏–∏']
    },
    'course_theory': {
        'name': '–ö—É—Ä—Å–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞ (—Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è)',
        'icon': 'üìò',
        'description': '–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è –∫—É—Ä—Å–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞ —Å –≥–ª—É–±–æ–∫–∏–º –∞–Ω–∞–ª–∏–∑–æ–º –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤.',
        'details': '–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è –∫—É—Ä—Å–æ–≤–∞—è –≤–∫–ª—é—á–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ –Ω–∞—É—á–Ω–æ–π –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã, –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏—Ö –º–æ–¥–µ–ª–µ–π –±–µ–∑ —ç–º–ø–∏—Ä–∏—á–µ—Å–∫–æ–π —á–∞—Å—Ç–∏.',
        'examples': ['–ê–Ω–∞–ª–∏–∑ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏—Ö –ø–æ–¥—Ö–æ–¥–æ–≤ –∫ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ', '–û–±–∑–æ—Ä –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–π –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è', '–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ –æ—Å–Ω–æ–≤—ã –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ —Ä–∞–∑–≤–∏—Ç–∏—è']
    },
    'course_empirical': {
        'name': '–ö—É—Ä—Å–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞ (—Ç–µ–æ—Ä–∏—è + —ç–º–ø–∏—Ä–∏–∫–∞)',
        'icon': 'üìä',
        'description': '–ö—É—Ä—Å–æ–≤–∞—è —Å —ç–º–ø–∏—Ä–∏—á–µ—Å–∫–æ–π —á–∞—Å—Ç—å—é, –∞–Ω–∞–ª–∏–∑–æ–º –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–º–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è–º–∏.',
        'details': '–≠–º–ø–∏—Ä–∏—á–µ—Å–∫–∞—è –∫—É—Ä—Å–æ–≤–∞—è —Ä–∞–±–æ—Ç–∞ –≤–∫–ª—é—á–∞–µ—Ç –∫–∞–∫ —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫—É—é —á–∞—Å—Ç—å, —Ç–∞–∫ –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å –∞–Ω–∞–ª–∏–∑–æ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.',
        'examples': ['–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏ –º–∏–≥—Ä–∞–Ω—Ç–æ–≤', '–ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–µ—Ç–æ–¥–æ–≤ –ø—Å–∏—Ö–æ—Ç–µ—Ä–∞–ø–∏–∏', '–û–ø—Ä–æ—Å –ø–æ —É—Ä–æ–≤–Ω—é —É–¥–æ–≤–ª–µ—Ç–≤–æ—Ä–µ–Ω–Ω–æ—Å—Ç–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤']
    },
    'vkr': {
        'name': '–í–ö–†',
        'icon': 'üéì',
        'description': '–í—ã–ø—É—Å–∫–Ω–∞—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—É—á–µ–Ω–∏—è —Å –ø–æ–ª–Ω—ã–º —Ü–∏–∫–ª–æ–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è.',
        'details': '–í–ö–† - —ç—Ç–æ –∏—Ç–æ–≥–æ–≤–∞—è –Ω–∞—É—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∏–ø–ª–æ–º–∞ –±–∞–∫–∞–ª–∞–≤—Ä–∞. –í–∫–ª—é—á–∞–µ—Ç –≥–ª—É–±–æ–∫–∏–π —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∏ –æ–±—ä–µ–º–Ω–æ–µ —ç–º–ø–∏—Ä–∏—á–µ—Å–∫–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ.',
        'examples': ['–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Å–æ—Ü–∏–∞–ª—å–Ω–æ-–ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–π –∞–¥–∞–ø—Ç–∞—Ü–∏–∏', '–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏', '–ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º']
    },
    'master': {
        'name': '–ú–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–∞—è –¥–∏—Å—Å–µ—Ä—Ç–∞—Ü–∏—è',
        'icon': 'üîç',
        'description': '–ì–ª—É–±–æ–∫–æ–µ –Ω–∞—É—á–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –¥–ª—è –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã —Å –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã–º –ø–æ–¥—Ö–æ–¥–æ–º.',
        'details': '–ú–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–∞—è –¥–∏—Å—Å–µ—Ä—Ç–∞—Ü–∏—è - —ç—Ç–æ –Ω–∞—É—á–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –≤—ã—Å–æ–∫–æ–≥–æ —É—Ä–æ–≤–Ω—è, –¥–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É—é—â–µ–µ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –∫ —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–π –Ω–∞—É—á–Ω–æ–π —Ä–∞–±–æ—Ç–µ.',
        'examples': ['–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏–∏ –æ—Ü–µ–Ω–∫–∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–≥—Ä–∞–º–º', '–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∞—Å–ø–µ–∫—Ç–æ–≤', '–ü—Ä–æ–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤ —Ä–∞–±–æ—Ç—ã']
    }
}

# –†–µ–∂–∏–º—ã —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è
PRICING_MODES = {
    'hard': {
        'name': 'Hard Mode',
        'icon': 'üí≤',
        'description': '<7 –¥–Ω–µ–π: +30%, 8-14 –¥–Ω–µ–π: +15%, >14 –¥–Ω–µ–π: –±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞.'
    },
    'light': {
        'name': 'Light Mode',
        'icon': 'üí∞',
        'description': '<3 –¥–Ω–µ–π: +30%, >=7 –¥–Ω–µ–π: –±–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞.'
    }
}

# FAQ
FAQ_ITEMS = [
    {
        'question': '–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑?',
        'answer': '–î–ª—è –∑–∞–∫–∞–∑–∞ —Ä–∞–±–æ—Ç—ã –≤—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç "üìù –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑" –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –ó–∞—Ç–µ–º —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º: –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É, —É–∫–∞–∂–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è. –ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –¥–µ—Ç–∞–ª–µ–π.'
    },
    {
        'question': '–ö–∞–∫ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Å—Ç–æ–∏–º–æ—Å—Ç—å?',
        'answer': '–°—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç—Ä–µ—Ö –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ñ–∞–∫—Ç–æ—Ä–æ–≤: —Ç–∏–ø —Ä–∞–±–æ—Ç—ã, —Å—Ä–æ—á–Ω–æ—Å—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Ç–µ–º—ã. –ë–∞–∑–æ–≤—ã–µ —Ü–µ–Ω—ã —É–∫–∞–∑–∞–Ω—ã –≤ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–µ. –ü—Ä–∏ —Å—Ä–æ—á–Ω–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ (–º–µ–Ω–µ–µ 7 –¥–Ω–µ–π) –ø—Ä–∏–º–µ–Ω—è–µ—Ç—Å—è –Ω–∞—Ü–µ–Ω–∫–∞ 15-30%. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ—á–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–æ–º —Ü–µ–Ω –≤ —Ä–∞–∑–¥–µ–ª–µ "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç".'
    },
    {
        'question': '–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞?',
        'answer': '–í —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å" –≤—ã –Ω–∞–π–¥–µ—Ç–µ –≤–∞—à—É –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –µ—é —Å –¥—Ä—É–∑—å—è–º–∏, –∏ –∫–æ–≥–¥–∞ –æ–Ω–∏ –∑–∞–∫–∞–∂—É—Ç —Ä–∞–±–æ—Ç—É –ø–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ, –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å –≤ —Ä–∞–∑–º–µ—Ä–µ 5% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏—Ö –∑–∞–∫–∞–∑–∞. –ë–æ–Ω—É—Å—ã –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –æ–ø–ª–∞—Ç—ã —Å–≤–æ–∏—Ö –∑–∞–∫–∞–∑–æ–≤.'
    },
    {
        'question': '–ö–∞–∫–∏–µ –≥–∞—Ä–∞–Ω—Ç–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞ —Ä–∞–±–æ—Ç—ã?',
        'answer': '–ú—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º –≤—ã—Å–æ–∫–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤—Å–µ—Ö —Ä–∞–±–æ—Ç. –ö–∞–∂–¥–∞—è —Ä–∞–±–æ—Ç–∞ –ø—Ä–æ—Ö–æ–¥–∏—Ç –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –ø–ª–∞–≥–∏–∞—Ç –∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º. –ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–µ –≤–Ω–µ—Å–µ–Ω–∏–µ –ø—Ä–∞–≤–æ–∫ –≤ —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π. –í —Å–ª—É—á–∞–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –º—ã –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –ø–æ–ª–Ω—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É –¥–æ —É—Å–ø–µ—à–Ω–æ–π –∑–∞—â–∏—Ç—ã —Ä–∞–±–æ—Ç—ã.'
    },
    {
        'question': '–ú–æ–≥—É –ª–∏ —è –ø–æ–ª—É—á–∏—Ç—å —Å–∫–∏–¥–∫—É?',
        'answer': '–î–∞, —É –Ω–∞—Å –¥–µ–π—Å—Ç–≤—É–µ—Ç —Å–∏—Å—Ç–µ–º–∞ —Å–∫–∏–¥–æ–∫: 5% –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –æ—Ç 10 000 —Ä—É–±., 10% –ø—Ä–∏ –∑–∞–∫–∞–∑–µ –æ—Ç 20 000 —Ä—É–±. –ü–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç—ã –ø–æ–ª—É—á–∞—é—Ç –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Å–∫–∏–¥–∫–∏ –¥–æ 15%. –¢–∞–∫–∂–µ –¥–µ–π—Å—Ç–≤—É—é—Ç —Å–µ–∑–æ–Ω–Ω—ã–µ –∞–∫—Ü–∏–∏ –∏ —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –æ –∫–æ—Ç–æ—Ä—ã—Ö –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞.'
    },
    {
        'question': '–ö–∞–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –ø—Ä–æ—Ü–µ—Å—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞?',
        'answer': '–í —Ä–∞–∑–¥–µ–ª–µ "–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å" –≤—ã –º–æ–∂–µ—Ç–µ –≤–∏–¥–µ—Ç—å —Å—Ç–∞—Ç—É—Å –≤—Å–µ—Ö –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤. –¢–∞–∫–∂–µ –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä –±—É–¥–µ—Ç —Ä–µ–≥—É–ª—è—Ä–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Å –æ —Ö–æ–¥–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã. –í—ã –≤—Å–µ–≥–¥–∞ –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –æ—Ü–µ–Ω–∫–∏ —Ä–∞–±–æ—Ç—ã.'
    }
]

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
current_pricing_mode = 'light'
user_orders = {}
user_ids = set()
user_feedbacks = {}

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler
(
    START,
    SELECT_MAIN_MENU,
    SELECT_ORDER_TYPE,
    VIEW_ORDER_DETAILS,
    INPUT_TOPIC,
    INPUT_DEADLINE,
    INPUT_REQUIREMENTS,
    CALCULATE_PRICE,
    CONFIRM_ORDER,
    ADMIN_MENU,
    PROFILE_MENU,
    SHOW_PRICE_LIST,
    PRICE_CALCULATOR,
    SHOW_FAQ,
    FAQ_DETAILS,
    SHOW_ORDERS,
    LEAVE_FEEDBACK,
    INPUT_FEEDBACK
) = range(18)

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ü–µ–Ω–∞–º–∏
def load_prices():
    try:
        if os.path.exists(PRICES_FILE):
            with open(PRICES_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        default_prices = {
            'self': {'base': 1500, 'min': 1000, 'max': 3000},
            'course_theory': {'base': 7000, 'min': 5000, 'max': 10000},
            'course_empirical': {'base': 11000, 'min': 8000, 'max': 15000},
            'vkr': {'base': 32000, 'min': 25000, 'max': 45000},
            'master': {'base': 42000, 'min': 35000, 'max': 60000}
        }
        save_prices(default_prices)
        return default_prices
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ü–µ–Ω: {e}")
        return {
            'self': {'base': 1500, 'min': 1000, 'max': 3000},
            'course_theory': {'base': 7000, 'min': 5000, 'max': 10000},
            'course_empirical': {'base': 11000, 'min': 8000, 'max': 15000},
            'vkr': {'base': 32000, 'min': 25000, 'max': 45000},
            'master': {'base': 42000, 'min': 35000, 'max': 60000}
        }

def save_prices(prices):
    try:
        with open(PRICES_FILE, 'w', encoding='utf-8') as f:
            json.dump(prices, f, ensure_ascii=False, indent=4)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ü–µ–Ω: {e}")

PRICES = load_prices()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ä–µ—Ñ–µ—Ä–∞–ª–∞–º–∏
def load_referrals():
    try:
        if os.path.exists(REFERRALS_FILE):
            with open(REFERRALS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        return {}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {e}")
        return {}

def save_referrals(data):
    try:
        with open(REFERRALS_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {e}")

referrals = load_referrals()

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∑–∞–∫–∞–∑–∞–º–∏
def load_orders():
    try:
        if os.path.exists(ORDERS_FILE):
            with open(ORDERS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        return {}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–∫–∞–∑–æ–≤: {e}")
        return {}

def save_orders(data):
    try:
        with open(ORDERS_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤: {e}")

# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ—Ç–∑—ã–≤–∞–º–∏
def load_feedbacks():
    try:
        if os.path.exists(FEEDBACKS_FILE):
            with open(FEEDBACKS_FILE, 'r', encoding='utf-8') as f:
                return json.load(f)
        return {}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–∑—ã–≤–æ–≤: {e}")
        return {}

def save_feedbacks(data):
    try:
        with open(FEEDBACKS_FILE, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç–∑—ã–≤–æ–≤: {e}")

user_feedbacks = load_feedbacks()

# –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã
def calculate_price(order_type_key, days_left, complexity_factor=1.0):
    try:
        prices = PRICES.get(order_type_key, {'base': 0})
        base_price = prices.get('base', 0)
        base_price = int(base_price * complexity_factor)

        if current_pricing_mode == 'hard':
            if days_left <= 7:
                return int(base_price * 1.3)
            elif 8 <= days_left <= 14:
                return int(base_price * 1.15)
            else:
                return base_price
        else:
            if days_left <= 3:
                return int(base_price * 1.3)
            elif 4 <= days_left <= 6:
                return int(base_price * 1.15)
            else:
                return base_price
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Ü–µ–Ω—ã: {e}")
        return PRICES.get(order_type_key, {'base': 0}).get('base', 0)

# –°—Ç–∏–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
def generate_styled_message(title, content, footer=None):
    message = f"*{title}*\n\n{content}"
    if footer:
        message += f"\n\n_{footer}_"
    return message

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {context.error}")
    try:
        error_message = f"‚ö†Ô∏è *–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ*\n\nError: {context.error}\n"
        if update and update.effective_user:
            error_message += f"User: @{update.effective_user.username} (ID: {update.effective_user.id})\n"
        if update and update.effective_message:
            error_message += f"Message: {update.effective_message.text[:50]}...\n"
        
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=error_message,
            parse_mode=ParseMode.MARKDOWN
        )
    except Exception as e:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∞–¥–º–∏–Ω—É: {e}")
    
    try:
        if update and update.effective_chat:
            await context.bot.send_message(
                chat_id=update.effective_chat.id,
                text="–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start."
            )
    except:
        pass

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_ids.add(user.id)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    try:
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=f"üë§ *–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–æ—Ç–µ*\n\n"
                 f"–ò–º—è: {user.first_name} {user.last_name or ''}\n"
                 f"Username: @{user.username or '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
                 f"ID: `{user.id}`\n"
                 f"–í—Ä–µ–º—è: {datetime.now().strftime('%d.%m.%Y %H:%M')}",
            parse_mode=ParseMode.MARKDOWN
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {e}")
    
    text = update.message.text
    args = text.split()

    try:
        bot = await context.bot.get_me()
        bot_username = bot.username
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞: {e}")
        bot_username = "Kladovaya_GIPSR_bot"

    if len(args) > 1 and args[1].isdigit():
        referrer_id = int(args[1])
        if referrer_id != user.id:
            referrals.setdefault(str(referrer_id), [])
            if user.id not in referrals[str(referrer_id)]:
                referrals[str(referrer_id)].append(user.id)
                save_referrals(referrals)
                try:
                    await context.bot.send_message(
                        chat_id=referrer_id,
                        text=f"üéâ –í–∞—à —Ä–µ—Ñ–µ—Ä–∞–ª {user.first_name} (@{user.username or '–±–µ–∑ –∏–º–µ–Ω–∏'}) –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è!"
                    )
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ—Ñ–µ—Ä–µ—Ä—É: {e}")

    ref_link = f"https://t.me/{bot_username}?start={user.id}"
    context.user_data['ref_link'] = ref_link

    welcome_message = (
        f"üéì *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ö–ª–∞–¥–æ–≤—É—é –ì–ò–ü–°–†, {user.first_name}!*\n\n"
        f"‚ú® *–ß—Ç–æ –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:*\n"
        f"‚Ä¢ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –∞–∫–∞–¥–µ–º–∏—á–µ—Å–∫–∏–µ —Ä–∞–±–æ—Ç—ã –ª—é–±–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏\n"
        f"‚Ä¢ –ì–∞—Ä–∞–Ω—Ç–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏ –æ—Ç 75%\n"
        f"‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–∞–≤–∫–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ 14 –¥–Ω–µ–π\n"
        f"‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–æ —É—Å–ø–µ—à–Ω–æ–π –∑–∞—â–∏—Ç—ã\n"
        f"‚Ä¢ –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å\n\n"
        f"üí° *–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑:*\n"
        f"1Ô∏è‚É£ –ù–∞–∂–º–∏—Ç–µ ¬´–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑¬ª\n"
        f"2Ô∏è‚É£ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã\n"
        f"3Ô∏è‚É£ –£–∫–∞–∂–∏—Ç–µ —Ç–µ–º—É –∏ —Å—Ä–æ–∫\n"
        f"4Ô∏è‚É£ –ü–æ–ª—É—á–∏—Ç–µ —Ç–æ—á–Ω—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å\n"
        f"5Ô∏è‚É£ –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏\n\n"
        f"üéÅ *–ë–æ–Ω—É—Å—ã:*\n"
        f"‚Ä¢ –°–∫–∏–¥–∫–∞ 10% –Ω–∞ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑\n"
        f"‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞ - 5% –æ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥—Ä—É–∑–µ–π\n"
        f"‚Ä¢ –ù–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–µ —Å–∫–∏–¥–∫–∏ –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤\n\n"
        f"üì± *–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:*"
    )
    return await main_menu(update, context, welcome_message)

# –ö–æ–º–∞–Ω–¥–∞ /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üìã *–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*\n\n"
        "/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
        "/help - –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
        "/order - –ù–æ–≤—ã–π –∑–∞–∫–∞–∑\n"
        "/profile - –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç\n"
        "/price - –ü—Ä–∞–π—Å-–ª–∏—Å—Ç\n"
        "/faq - –ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã\n"
        "/admin - –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        "–°–≤—è–∂–∏—Ç–µ—Å—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º —á–µ—Ä–µ–∑ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏."
    )
    await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN)

# –ö–æ–º–∞–Ω–¥–∞ /price
async def price_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    orders_count = len(user_orders.get(user_id, []))
    discount = 0
    if orders_count >= 5:
        discount = 15
    elif orders_count >= 3:
        discount = 10
    elif orders_count >= 1:
        discount = 5
    
    text = "üéì *–ü–†–ê–ô–°-–õ–ò–°–¢ –ö–õ–ê–î–û–í–û–ô –ì–ò–ü–°–†*\n\n"
    
    if discount > 0:
        text += f"üéâ *–í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞: {discount}%*\n\n"
    
    text += "üìç *–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ 2024 –≥–æ–¥:*\n\n"
    
    for key, val in PRICES.items():
        order_type = ORDER_TYPES.get(key, {})
        base_price = val.get('base', 0)
        if discount > 0:
            discounted_price = int(base_price * (1 - discount/100))
            text += f"{order_type.get('icon', '')} *{order_type.get('name', key)}*\n"
            text += f"   ‚îú ~{base_price:,}~ *{discounted_price:,} —Ä—É–±.*\n"
            text += f"   ‚îî üéØ –°—Ä–æ–∫: –æ—Ç 3 –¥–Ω–µ–π\n\n"
        else:
            text += f"{order_type.get('icon', '')} *{order_type.get('name', key)}*\n"
            text += f"   ‚îú üí∞ *{base_price:,} —Ä—É–±.*\n"
            text += f"   ‚îî üéØ –°—Ä–æ–∫: –æ—Ç 3 –¥–Ω–µ–π\n\n"
    
    text += "üéÅ *–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:*\n"
    text += "‚Ä¢ –°–∫–∏–¥–∫–∞ 10% –Ω–∞ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑\n"
    text += "‚Ä¢ –ü—Ä–∏–≤–µ–¥–∏ –¥—Ä—É–≥–∞ - –ø–æ–ª—É—á–∏ 500‚ÇΩ –±–æ–Ω—É—Å\n"
    text += "‚Ä¢ –ó–∞–∫–∞–∑ –æ—Ç 2 —Ä–∞–±–æ—Ç = —Å–∫–∏–¥–∫–∞ 15%\n"

    keyboard = [
        [InlineKeyboardButton("üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–æ—á–Ω—É—é —Ü–µ–Ω—É", callback_data='price_calculator')],
        [InlineKeyboardButton("üéØ –ë—ã—Å—Ç—Ä—ã–π –∑–∞–∫–∞–∑", callback_data='make_order')],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
    ]
    await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN, reply_markup=InlineKeyboardMarkup(keyboard))
    return SHOW_PRICE_LIST

# –ö–æ–º–∞–Ω–¥–∞ /faq
async def faq_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = "‚ùì *–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:\n"
    keyboard = [[InlineKeyboardButton(f"{idx+1}. {item['question']}", callback_data=f'faq_{idx}')] for idx, item in enumerate(FAQ_ITEMS)]
    keyboard.append([InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')])
    await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN, reply_markup=InlineKeyboardMarkup(keyboard))
    return SHOW_FAQ

# –ö–æ–º–∞–Ω–¥–∞ /order
async def order_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await select_order_type(update, context)

# –ö–æ–º–∞–Ω–¥–∞ /profile
async def profile_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    orders = user_orders.get(str(user.id), []) or load_orders().get(str(user.id), [])
    
    try:
        bot = await context.bot.get_me()
        bot_username = bot.username
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞: {e}")
        bot_username = "Kladovaya_GIPSR_bot"
    
    ref_link = f"https://t.me/{bot_username}?start={user.id}"
    context.user_data['ref_link'] = ref_link
    
    ref_count = len(referrals.get(str(user.id), []))
    bonus = sum(int(order.get('price', 0) * 0.05) for ref_id in referrals.get(str(user.id), []) for order in user_orders.get(str(ref_id), []))

    text = (
        f"üë§ *–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç*\n\n"
        f"*–ò–º—è:* {user.first_name}\n"
        f"*Username:* @{user.username if user.username else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
        f"*ID:* `{user.id}`\n\n"
        f"*–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:*\n"
        f"- –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {ref_count}\n"
        f"- –ë–æ–Ω—É—Å: {bonus} —Ä—É–±.\n"
        f"- –°—Å—ã–ª–∫–∞: `{ref_link}`\n\n"
    )

    if orders:
        text += "*–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:*\n"
        recent_orders = sorted(orders, key=lambda x: x.get('date', ''), reverse=True)[:3]
        for o in recent_orders:
            text += f"- –ó–∞–∫–∞–∑ #{o.get('order_id', 'N/A')}: {o.get('type')} | –°—Ç–∞—Ç—É—Å: {o.get('status')}\n"
        if len(orders) > 3:
            text += f"\n_...–∏ –µ—â–µ {len(orders) - 3} –∑–∞–∫–∞–∑–æ–≤_\n"
    else:
        text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤."

    keyboard = [
        [InlineKeyboardButton("üìã –í—Å–µ –∑–∞–∫–∞–∑—ã", callback_data='show_all_orders')],
        [InlineKeyboardButton("üìù –ù–æ–≤—ã–π –∑–∞–∫–∞–∑", callback_data='make_order')],
        [InlineKeyboardButton("‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data='leave_feedback')],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
    ]

    await update.message.reply_text(
        text, parse_mode=ParseMode.MARKDOWN, reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return PROFILE_MENU

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, custom_message=None):
    try:
        user = update.effective_user
        keyboard = [
            [InlineKeyboardButton("üìù –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data='make_order')],
            [InlineKeyboardButton("üí≤ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç", callback_data='price_list'),
             InlineKeyboardButton("üë§ –ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å", callback_data='profile')],
            [InlineKeyboardButton("‚ùì FAQ", callback_data='faq')],
            [InlineKeyboardButton("üìû –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", url='https://t.me/Thisissaymoon')]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        text = custom_message or f"üëã *–ü—Ä–∏–≤–µ—Ç, {user.first_name}!*\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"

        if update.callback_query:
            await update.callback_query.message.edit_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
        else:
            await update.message.reply_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
        return SELECT_MAIN_MENU
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ main_menu: {e}")
        return SELECT_MAIN_MENU

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def main_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    choice = query.data

    if choice == 'make_order':
        return await select_order_type(update, context)
    elif choice == 'price_list':
        return await show_price_list(update, context)
    elif choice == 'profile':
        return await show_profile(update, context)
    elif choice == 'faq':
        return await show_faq(update, context)
    elif choice == 'back_to_main':
        return await main_menu(update, context)
    
    await query.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä.")
    return SELECT_MAIN_MENU

# –ü—Ä–∞–π—Å-–ª–∏—Å—Ç
async def show_price_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –ü–æ–¥—Å—á–µ—Ç —Å–∫–∏–¥–∫–∏ –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
    user_id = str(update.effective_user.id)
    orders_count = len(user_orders.get(user_id, []))
    discount = 0
    if orders_count >= 5:
        discount = 15
    elif orders_count >= 3:
        discount = 10
    elif orders_count >= 1:
        discount = 5
    
    text = "üéì *–ü–†–ê–ô–°-–õ–ò–°–¢ –ö–õ–ê–î–û–í–û–ô –ì–ò–ü–°–†*\n\n"
    
    if discount > 0:
        text += f"üéâ *–í–∞—à–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞: {discount}%*\n\n"
    
    text += "üìç *–ê–∫—Ç—É–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—ã –Ω–∞ 2024 –≥–æ–¥:*\n\n"
    
    for key, val in PRICES.items():
        order_type = ORDER_TYPES.get(key, {})
        base_price = val.get('base', 0)
        if discount > 0:
            discounted_price = int(base_price * (1 - discount/100))
            text += f"{order_type.get('icon', '')} *{order_type.get('name', key)}*\n"
            text += f"   ‚îú ~{base_price:,}~ *{discounted_price:,} —Ä—É–±.*\n"
            text += f"   ‚îî üéØ –°—Ä–æ–∫: –æ—Ç 3 –¥–Ω–µ–π\n\n"
        else:
            text += f"{order_type.get('icon', '')} *{order_type.get('name', key)}*\n"
            text += f"   ‚îú üí∞ *{base_price:,} —Ä—É–±.*\n"
            text += f"   ‚îî üéØ –°—Ä–æ–∫: –æ—Ç 3 –¥–Ω–µ–π\n\n"
    
    text += "üéÅ *–°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è:*\n"
    text += "‚Ä¢ –°–∫–∏–¥–∫–∞ 10% –Ω–∞ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑\n"
    text += "‚Ä¢ –ü—Ä–∏–≤–µ–¥–∏ –¥—Ä—É–≥–∞ - –ø–æ–ª—É—á–∏ 500‚ÇΩ –±–æ–Ω—É—Å\n"
    text += "‚Ä¢ –ó–∞–∫–∞–∑ –æ—Ç 2 —Ä–∞–±–æ—Ç = —Å–∫–∏–¥–∫–∞ 15%\n\n"
    text += "üî• *–ü–æ—á–µ–º—É –≤—ã–±–∏—Ä–∞—é—Ç –Ω–∞—Å:*\n"
    text += "‚Ä¢ 100% –≥–∞—Ä–∞–Ω—Ç–∏—è —Å–¥–∞—á–∏\n"
    text += "‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω–∞—è –¥–æ—Ä–∞–±–æ—Ç–∫–∞\n"
    text += "‚Ä¢ –ê–Ω—Ç–∏–ø–ª–∞–≥–∏–∞—Ç –æ—Ç 75%\n"

    keyboard = [
        [InlineKeyboardButton("üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ç–æ—á–Ω—É—é —Ü–µ–Ω—É", callback_data='price_calculator')],
        [InlineKeyboardButton("üéØ –ë—ã—Å—Ç—Ä—ã–π –∑–∞–∫–∞–∑", callback_data='make_order')],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
    ]
    await query.message.edit_text(text, parse_mode=ParseMode.MARKDOWN, reply_markup=InlineKeyboardMarkup(keyboard))
    return SHOW_PRICE_LIST

# –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Å—Ç–æ–∏–º–æ—Å—Ç–∏
async def price_calculator(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    user = update.effective_user
    try:
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=f"üßÆ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫—Ä—ã–ª –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä*\n\n"
                 f"–ò–º—è: {user.first_name}\n"
                 f"Username: @{user.username or '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
                 f"ID: `{user.id}`\n"
                 f"–í—Ä–µ–º—è: {datetime.now().strftime('%H:%M')}",
            parse_mode=ParseMode.MARKDOWN
        )
    except:
        pass
    
    text = (
        "üéÜ *–ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –¶–ï–ù*\n\n"
        "üéÅ *–°–ü–ï–¶–ò–ê–õ–¨–ù–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï!*\n"
        "–ü—Ä–∏ –∑–∞–∫–∞–∑–µ —Å–µ–≥–æ–¥–Ω—è - —Å–∫–∏–¥–∫–∞ 10%!\n\n"
        "üëá *–®–∞–≥ 1: –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã*\n\n"
        "–ö–∞–∫—É—é —Ä–∞–±–æ—Ç—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å?"
    )
    
    keyboard = []
    for key, val in ORDER_TYPES.items():
        price = PRICES[key]['base']
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ü–µ–Ω—É –ø—Ä—è–º–æ –≤ –∫–Ω–æ–ø–∫–µ
        button_text = f"{val['icon']} {val['name']} | {price:,}‚ÇΩ"
        keyboard.append([InlineKeyboardButton(button_text, callback_data=f'calc_{key}')])
    
    keyboard.append([InlineKeyboardButton("üéÅ –ü–∞–∫–µ—Ç–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ (2+ —Ä–∞–±–æ—Ç—ã)", callback_data='calc_package')])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_price')])
    
    await query.message.edit_text(text, parse_mode=ParseMode.MARKDOWN, reply_markup=InlineKeyboardMarkup(keyboard))
    return PRICE_CALCULATOR

# –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ
async def calculate_price_in_calculator(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    if query.data == 'calc_package':
        # –ü–∞–∫–µ—Ç–Ω–æ–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ
        text = (
            "üéÅ *–ü–ê–ö–ï–¢–ù–û–ï –ü–†–ï–î–õ–û–ñ–ï–ù–ò–ï*\n\n"
            "üî• *–ó–∞–∫–∞–∂–∏—Ç–µ 2+ —Ä–∞–±–æ—Ç –∏ –ø–æ–ª—É—á–∏—Ç–µ:*\n\n"
            "‚úÖ –°–∫–∏–¥–∫–∞ 15% –Ω–∞ –≤—Å–µ —Ä–∞–±–æ—Ç—ã\n"
            "‚úÖ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ\n"
            "‚úÖ –û–¥–∏–Ω –º–µ–Ω–µ–¥–∂–µ—Ä –Ω–∞ –≤–µ—Å—å –∑–∞–∫–∞–∑\n\n"
            "üí∞ *–ü—Ä–∏–º–µ—Ä—ã —ç–∫–æ–Ω–æ–º–∏–∏:*\n\n"
            "üìö –ö—É—Ä—Å–æ–≤–∞—è + –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–∞—è:\n"
            "~12,500‚ÇΩ~ ‚Üí *10,625‚ÇΩ* (—ç–∫–æ–Ω–æ–º–∏—è 1,875‚ÇΩ)\n\n"
            "üéì –ö—É—Ä—Å–æ–≤–∞—è + –í–ö–†:\n"
            "~43,000‚ÇΩ~ ‚Üí *36,550‚ÇΩ* (—ç–∫–æ–Ω–æ–º–∏—è 6,450‚ÇΩ)\n\n"
            "üéÜ –ü–æ–ª–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Ç (–≤—Å–µ 5 —Ç–∏–ø–æ–≤):\n"
            "~93,500‚ÇΩ~ ‚Üí *79,475‚ÇΩ* (—ç–∫–æ–Ω–æ–º–∏—è 14,025‚ÇΩ!)\n\n"
            "üìû *–û—Ñ–æ—Ä–º–∏—Ç—å –ø–∞–∫–µ—Ç?*"
        )
        keyboard = [
            [InlineKeyboardButton("üöÄ –û—Ñ–æ—Ä–º–∏—Ç—å –ø–∞–∫–µ—Ç", callback_data='make_order')],
            [InlineKeyboardButton("üîÑ –ö –≤—ã–±–æ—Ä—É —Ä–∞–±–æ—Ç", callback_data='price_calculator')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_price')]
        ]
        await query.message.edit_text(text, parse_mode=ParseMode.MARKDOWN, reply_markup=InlineKeyboardMarkup(keyboard))
        return PRICE_CALCULATOR
    
    order_type_key = query.data.replace('calc_', '')
    if order_type_key not in ORDER_TYPES:
        await query.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–∞–±–æ—Ç—ã.")
        return PRICE_CALCULATOR

    order_type_info = ORDER_TYPES[order_type_key]
    price_info = PRICES[order_type_key]
    context.user_data['calc_type'] = order_type_key
    
    text = (
        f"üéÜ *–ö–ê–õ–¨–ö–£–õ–Ø–¢–û–† –¶–ï–ù*\n\n"
        f"{order_type_info['icon']} *{order_type_info['name']}*\n\n"
        f"üìç –ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: *{price_info['base']:,} —Ä—É–±.*\n\n"
        f"üïê *–®–∞–≥ 2: –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è*\n\n"
        f"–ß–µ–º –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ - —Ç–µ–º –Ω–∏–∂–µ —Ü–µ–Ω–∞:"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å —Ü–µ–Ω–∞–º–∏
    keyboard = []
    deadlines = [(3, 'üî¥ –°—Ä–æ—á–Ω–æ (3 –¥–Ω—è)'), 
                 (7, 'üü° –ë—ã—Å—Ç—Ä–æ (7 –¥–Ω–µ–π)'),
                 (14, 'üü¢ –û–ø—Ç–∏–º–∞–ª—å–Ω–æ (14 –¥–Ω–µ–π)'),
                 (30, 'üîµ –ö–æ–º—Ñ–æ—Ä—Ç–Ω–æ (30 –¥–Ω–µ–π)')]
    
    for days, label in deadlines:
        price = calculate_price(order_type_key, days)
        if days <= 7:
            price_text = f"{label} | {price:,}‚ÇΩ (+{int((price/price_info['base']-1)*100)}%)"
        else:
            price_text = f"{label} | {price:,}‚ÇΩ"
        keyboard.append([InlineKeyboardButton(price_text, callback_data=f'deadline_{order_type_key}_{days}')])
    
    keyboard.append([InlineKeyboardButton("üîÑ –î—Ä—É–≥–∞—è —Ä–∞–±–æ—Ç–∞", callback_data='price_calculator')])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_price')])
    
    await query.message.edit_text(text, parse_mode=ParseMode.MARKDOWN, reply_markup=InlineKeyboardMarkup(keyboard))
    return PRICE_CALCULATOR

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ä–æ–∫–∞ –≤ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–µ
async def handle_deadline_selection(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    parts = query.data.split('_')
    order_type_key = parts[1]
    days = int(parts[2])
    
    order_type_info = ORDER_TYPES[order_type_key]
    base_price = PRICES[order_type_key]['base']
    final_price = calculate_price(order_type_key, days)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∫–∏–¥–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_id = str(update.effective_user.id)
    orders_count = len(user_orders.get(user_id, []))
    loyalty_discount = 0
    if orders_count >= 5:
        loyalty_discount = 15
    elif orders_count >= 3:
        loyalty_discount = 10
    elif orders_count >= 1:
        loyalty_discount = 5
    
    # –°–∫–∏–¥–∫–∞ –¥–ª—è –ø–µ—Ä–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞
    if orders_count == 0:
        loyalty_discount = 10
        discount_text = "–°–∫–∏–¥–∫–∞ –Ω–æ–≤–æ–º—É –∫–ª–∏–µ–Ω—Ç—É"
    else:
        discount_text = f"–í–∞—à–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω–∞—è —Å–∫–∏–¥–∫–∞"
    
    final_price_with_discount = int(final_price * (1 - loyalty_discount/100))
    
    text = (
        f"üéØ *–ò–¢–û–ì–û–í–´–ô –†–ê–°–ß–ï–¢*\n\n"
        f"{order_type_info['icon']} *{order_type_info['name']}*\n"
        f"üìÖ –°—Ä–æ–∫: {days} –¥–Ω–µ–π\n\n"
        f"üí∞ *–°—Ç–æ–∏–º–æ—Å—Ç—å:*\n"
        f"–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: {base_price:,} —Ä—É–±.\n"
    )
    
    if days <= 7:
        urgency_percent = int((final_price/base_price - 1) * 100)
        text += f"–°—Ä–æ—á–Ω–æ—Å—Ç—å (+{urgency_percent}%): {final_price - base_price:,} —Ä—É–±.\n"
    
    text += f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
    text += f"–ò—Ç–æ–≥–æ: {final_price:,} —Ä—É–±.\n\n"
    
    if loyalty_discount > 0:
        text += f"üéÅ *{discount_text}: {loyalty_discount}%*\n"
        text += f"üî• *–§–ò–ù–ê–õ–¨–ù–ê–Ø –¶–ï–ù–ê: {final_price_with_discount:,} —Ä—É–±.*\n"
        text += f"üíµ –í—ã —ç–∫–æ–Ω–æ–º–∏—Ç–µ: {final_price - final_price_with_discount:,} —Ä—É–±.\n\n"
    
    text += (
        "‚úÖ *–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç –≤ —Å—Ç–æ–∏–º–æ—Å—Ç—å:*\n"
        "‚Ä¢ –ü–æ–ª–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã\n"
        "‚Ä¢ –ê–Ω—Ç–∏–ø–ª–∞–≥–∏–∞—Ç –æ—Ç 75%\n"
        "‚Ä¢ –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ –ì–û–°–¢\n"
        "‚Ä¢ –ë–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –ø—Ä–∞–≤–∫–∏ 14 –¥–Ω–µ–π\n"
        "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–æ –∑–∞—â–∏—Ç—ã\n\n"
        "üöÄ *–ì–æ—Ç–æ–≤—ã –∑–∞–∫–∞–∑–∞—Ç—å?*"
    )
    
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ó–ê–ö–ê–ó–ê–¢–¨ –°–ï–ô–ß–ê–°", callback_data=f'quick_order_{order_type_key}_{days}')],
        [InlineKeyboardButton("üí¨ –û–±—Å—É–¥–∏—Ç—å —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º", url='https://t.me/Thisissaymoon')],
        [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", callback_data='price_calculator')],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
    ]
    
    await query.message.edit_text(text, parse_mode=ParseMode.MARKDOWN, reply_markup=InlineKeyboardMarkup(keyboard))
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    try:
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=f"üí∏ *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞—Å—Å—á–∏—Ç–∞–ª —Ü–µ–Ω—É*\n\n"
                 f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {update.effective_user.first_name}\n"
                 f"Username: @{update.effective_user.username or '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
                 f"–†–∞–±–æ—Ç–∞: {order_type_info['name']}\n"
                 f"–°—Ä–æ–∫: {days} –¥–Ω–µ–π\n"
                 f"–¶–µ–Ω–∞: {final_price_with_discount:,} —Ä—É–±.\n"
                 f"–í—Ä–µ–º—è: {datetime.now().strftime('%H:%M')}",
            parse_mode=ParseMode.MARKDOWN
        )
    except:
        pass
    
    return PRICE_CALCULATOR

# –í–æ–∑–≤—Ä–∞—Ç –∫ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç—É
async def back_to_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    return await show_price_list(update, context)

# FAQ
async def show_faq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    text = "‚ùì *–ß–∞—Å—Ç–æ –∑–∞–¥–∞–≤–∞–µ–º—ã–µ –≤–æ–ø—Ä–æ—Å—ã*\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å:\n"
    keyboard = [[InlineKeyboardButton(f"{idx+1}. {item['question']}", callback_data=f'faq_{idx}')] for idx, item in enumerate(FAQ_ITEMS)]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')])
    await query.message.edit_text(text, parse_mode=ParseMode.MARKDOWN, reply_markup=InlineKeyboardMarkup(keyboard))
    return SHOW_FAQ

# –î–µ—Ç–∞–ª–∏ FAQ
async def show_faq_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    faq_idx = int(query.data.replace('faq_', ''))
    if faq_idx < 0 or faq_idx >= len(FAQ_ITEMS):
        await query.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤–æ–ø—Ä–æ—Å.")
        return SHOW_FAQ

    faq_item = FAQ_ITEMS[faq_idx]
    text = f"‚ùì *{faq_item['question']}*\n\n{faq_item['answer']}"
    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ FAQ", callback_data='back_to_faq')],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
    ]
    await query.message.edit_text(text, parse_mode=ParseMode.MARKDOWN, reply_markup=InlineKeyboardMarkup(keyboard))
    return FAQ_DETAILS

# –í–æ–∑–≤—Ä–∞—Ç –∫ FAQ
async def back_to_faq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    return await show_faq(update, context)

# –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞–∫–∞–∑–∞
async def select_order_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query or update
    if query.callback_query:
        await query.answer()

    keyboard = [[InlineKeyboardButton(f"{val['icon']} {val['name']}", callback_data=f'type_{key}')] for key, val in ORDER_TYPES.items()]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_main')])
    text = "üìã *–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã:*\n\n–ù–∞–∂–º–∏—Ç–µ –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏:"

    if query.callback_query:
        await query.message.edit_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN)
    else:
        await query.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.MARKDOWN)
    return SELECT_ORDER_TYPE

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–∫–∞–∑–∞
async def select_order_type_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    callback_data = query.data

    if callback_data == 'back_to_main':
        return await main_menu(update, context)
    if callback_data.startswith('type_') or callback_data.startswith('order_'):
        order_type_key = callback_data.replace('type_', '').replace('order_', '')
        return await view_order_details(update, context, order_type_key)
    await query.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–∫–∞–∑–∞.")
    return SELECT_ORDER_TYPE

# –î–µ—Ç–∞–ª–∏ –∑–∞–∫–∞–∑–∞
async def view_order_details(update: Update, context: ContextTypes.DEFAULT_TYPE, order_type_key):
    query = update.callback_query
    if order_type_key not in ORDER_TYPES:
        await query.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –∑–∞–∫–∞–∑–∞.")
        return SELECT_ORDER_TYPE

    order_type_info = ORDER_TYPES[order_type_key]
    price_info = PRICES[order_type_key]
    context.user_data['order_type_key'] = order_type_key
    context.user_data['order_type'] = order_type_info['name']

    text = f"*{order_type_info['icon']} {order_type_info['name']}*\n\n{order_type_info['details']}\n\n"
    text += "*–ü—Ä–∏–º–µ—Ä—ã —Ç–µ–º:*\n" + "\n".join(f"‚Ä¢ {example}" for example in order_type_info['examples'])
    text += f"\n\n*–°—Ç–æ–∏–º–æ—Å—Ç—å:* –æ—Ç {price_info['base']} —Ä—É–±.\n*–°—Ä–æ–∫:* –æ—Ç 3 –¥–Ω–µ–π\n\n–•–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å?"

    keyboard = [
        [InlineKeyboardButton("‚úÖ –ó–∞–∫–∞–∑–∞—Ç—å", callback_data='continue_order')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –î—Ä—É–≥–æ–π —Ç–∏–ø", callback_data='back_to_order_type')],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
    ]
    await query.message.edit_text(text, parse_mode=ParseMode.MARKDOWN, reply_markup=InlineKeyboardMarkup(keyboard))
    return VIEW_ORDER_DETAILS

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–µ—Ç–∞–ª–µ–π –∑–∞–∫–∞–∑–∞
async def order_details_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    choice = query.data

    if choice == 'back_to_order_type':
        return await select_order_type(update, context)
    elif choice == 'back_to_main':
        return await main_menu(update, context)
    elif choice == 'continue_order':
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_order_details')]]
        await query.message.edit_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏: *{context.user_data['order_type']}*\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É —Ä–∞–±–æ—Ç—ã:",
            parse_mode=ParseMode.MARKDOWN, reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return INPUT_TOPIC
    await query.message.reply_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –≤—ã–±–æ—Ä.")
    return VIEW_ORDER_DETAILS

# –ù–∞–∑–∞–¥ –∫ –¥–µ—Ç–∞–ª—è–º –∑–∞–∫–∞–∑–∞
async def back_to_order_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    return await view_order_details(update, context, context.user_data['order_type_key'])

# –í–≤–æ–¥ —Ç–µ–º—ã
async def input_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        if query.data == 'back_to_order_details':
            return await view_order_details(update, context, context.user_data['order_type_key'])
        return

    context.user_data['topic'] = update.message.text
    keyboard = [
        [InlineKeyboardButton("3 –¥–Ω—è", callback_data='3'), InlineKeyboardButton("7 –¥–Ω–µ–π", callback_data='7'), InlineKeyboardButton("14 –¥–Ω–µ–π", callback_data='14')],
        [InlineKeyboardButton("21 –¥–µ–Ω—å", callback_data='21'), InlineKeyboardButton("30 –¥–Ω–µ–π", callback_data='30'), InlineKeyboardButton("–î—Ä—É–≥–æ–π", callback_data='custom')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_topic')]
    ]
    await update.message.reply_text(
        "üìÖ *–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:*\n\n–ß–µ–º –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏, —Ç–µ–º –Ω–∏–∂–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å.",
        parse_mode=ParseMode.MARKDOWN, reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return INPUT_DEADLINE

# –í–≤–æ–¥ –¥–µ–¥–ª–∞–π–Ω–∞
async def input_deadline(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == 'back_to_topic':
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_order_details')]]
        await query.message.edit_text(
            f"–í—ã –≤—ã–±—Ä–∞–ª–∏: *{context.user_data['order_type']}*\n\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É —Ä–∞–±–æ—Ç—ã:",
            parse_mode=ParseMode.MARKDOWN, reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return INPUT_TOPIC

    if query.data == 'custom':
        await query.message.edit_text(
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π (—á–∏—Å–ª–æ):",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_deadline_select')]])
        )
        return INPUT_DEADLINE

    if query.data == 'back_to_deadline_select':
        keyboard = [
            [InlineKeyboardButton("3 –¥–Ω—è", callback_data='3'), InlineKeyboardButton("7 –¥–Ω–µ–π", callback_data='7'), InlineKeyboardButton("14 –¥–Ω–µ–π", callback_data='14')],
            [InlineKeyboardButton("21 –¥–µ–Ω—å", callback_data='21'), InlineKeyboardButton("30 –¥–Ω–µ–π", callback_data='30'), InlineKeyboardButton("–î—Ä—É–≥–æ–π", callback_data='custom')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_topic')]
        ]
        await query.message.edit_text(
            "üìÖ *–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:*\n\n–ß–µ–º –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏, —Ç–µ–º –Ω–∏–∂–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å.",
            parse_mode=ParseMode.MARKDOWN, reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return INPUT_DEADLINE

    try:
        days = int(query.data)
        deadline_date = datetime.now() + timedelta(days=days)
        context.user_data['deadline'] = deadline_date
        context.user_data['days_left'] = days
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_deadline')]]
        await query.message.edit_text(
            f"üìù *–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:*\n\n–û–ø–∏—à–∏—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è (–æ–±—ä–µ–º, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ —Ç.–¥.) –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ù–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π'.",
            parse_mode=ParseMode.MARKDOWN, reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return INPUT_REQUIREMENTS
    except ValueError:
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–Ω–µ–π.")
        return INPUT_DEADLINE

# –í–≤–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–≥–æ –¥–µ–¥–ª–∞–π–Ω–∞
async def input_custom_deadline(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        days = int(update.message.text)
        if days < 1:
            await update.message.reply_text(
                "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π.",
                reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_deadline_select')]])
            )
            return INPUT_DEADLINE
        deadline_date = datetime.now() + timedelta(days=days)
        context.user_data['deadline'] = deadline_date
        context.user_data['days_left'] = days
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_deadline')]]
        await update.message.reply_text(
            f"üìù *–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:*\n\n–û–ø–∏—à–∏—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ù–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π'.",
            parse_mode=ParseMode.MARKDOWN, reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return INPUT_REQUIREMENTS
    except ValueError:
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–Ω–µ–π.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_deadline_select')]])
        )
        return INPUT_DEADLINE

# –ù–∞–∑–∞–¥ –∫ –¥–µ–¥–ª–∞–π–Ω—É
async def back_to_deadline(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("3 –¥–Ω—è", callback_data='3'), InlineKeyboardButton("7 –¥–Ω–µ–π", callback_data='7'), InlineKeyboardButton("14 –¥–Ω–µ–π", callback_data='14')],
        [InlineKeyboardButton("21 –¥–µ–Ω—å", callback_data='21'), InlineKeyboardButton("30 –¥–Ω–µ–π", callback_data='30'), InlineKeyboardButton("–î—Ä—É–≥–æ–π", callback_data='custom')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_topic')]
    ]
    await query.message.edit_text(
        "üìÖ *–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:*\n\n–ß–µ–º –±–æ–ª—å—à–µ –≤—Ä–µ–º–µ–Ω–∏, —Ç–µ–º –Ω–∏–∂–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å.",
        parse_mode=ParseMode.MARKDOWN, reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return INPUT_DEADLINE

# –í–≤–æ–¥ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
async def input_requirements(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        if query.data == 'back_to_deadline':
            return await back_to_deadline(update, context)
        return

    context.user_data['requirements'] = update.message.text
    return await calculate_price_step(update, context)

# –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã
async def calculate_price_step(update, context: ContextTypes.DEFAULT_TYPE):
    data = context.user_data
    order_type_key = data.get('order_type_key')
    days_left = data.get('days_left', 7)
    topic = data.get('topic', '')
    requirements = data.get('requirements', '')
    complexity_factor = 1.0 + 0.05 * (len(topic) > 50) + 0.1 * any(term in topic.lower() or term in requirements.lower() for term in ['–∞–Ω–∞–ª–∏–∑', '–∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ', '—Å—Ä–∞–≤–Ω–∏—Ç–µ–ª—å–Ω—ã–π', '–º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è', '—ç–º–ø–∏—Ä–∏—á–µ—Å–∫–∏–π'])

    price = calculate_price(order_type_key, days_left, complexity_factor)
    data['price'] = price
    data['complexity_factor'] = complexity_factor
    deadline = data.get('deadline')
    deadline_str = deadline.strftime('%d.%m.%Y') if deadline else "–ù–µ —É–∫–∞–∑–∞–Ω"

    text = (
        f"üìã *–í–∞—à –∑–∞–∫–∞–∑:*\n\n"
        f"*–¢–∏–ø —Ä–∞–±–æ—Ç—ã:* {data.get('order_type')}\n"
        f"*–¢–µ–º–∞:* {data.get('topic')}\n"
        f"*–°—Ä–æ–∫:* {deadline_str} ({days_left} –¥–Ω–µ–π)\n"
        f"*–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:*\n{data.get('requirements', '–ù–µ —É–∫–∞–∑–∞–Ω—ã')}\n\n"
        f"*–°—Ç–æ–∏–º–æ—Å—Ç—å:* {price} —Ä—É–±.\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–∫–∞–∑:"
    )

    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data='confirm_order')],
        [InlineKeyboardButton("üîÑ –ò–∑–º–µ–Ω–∏—Ç—å", callback_data='change_order_data')],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel_order')]
    ]
    if update.callback_query:
        await update.callback_query.message.edit_text(text, parse_mode=ParseMode.MARKDOWN, reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN, reply_markup=InlineKeyboardMarkup(keyboard))
    return CALCULATE_PRICE

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞
async def change_order_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    keyboard = [
        [InlineKeyboardButton("üìù –¢–∏–ø —Ä–∞–±–æ—Ç—ã", callback_data='change_type')],
        [InlineKeyboardButton("üìã –¢–µ–º–∞", callback_data='change_topic')],
        [InlineKeyboardButton("üìÖ –°—Ä–æ–∫", callback_data='change_deadline')],
        [InlineKeyboardButton("üìå –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è", callback_data='change_requirements')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_price_calc')]
    ]
    await query.message.edit_text(
        "üîÑ *–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞*\n\n–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ –∏–∑–º–µ–Ω–∏—Ç—å:",
        parse_mode=ParseMode.MARKDOWN, reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return CALCULATE_PRICE

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
async def handle_change_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    choice = query.data

    if choice == 'change_type':
        return await select_order_type(update, context)
    elif choice == 'change_topic':
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_change_menu')]]
        await query.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ç–µ–º—É:", parse_mode=ParseMode.MARKDOWN, reply_markup=InlineKeyboardMarkup(keyboard))
        return INPUT_TOPIC
    elif choice == 'change_deadline':
        keyboard = [
            [InlineKeyboardButton("3 –¥–Ω—è", callback_data='3'), InlineKeyboardButton("7 –¥–Ω–µ–π", callback_data='7'), InlineKeyboardButton("14 –¥–Ω–µ–π", callback_data='14')],
            [InlineKeyboardButton("21 –¥–µ–Ω—å", callback_data='21'), InlineKeyboardButton("30 –¥–Ω–µ–π", callback_data='30'), InlineKeyboardButton("–î—Ä—É–≥–æ–π", callback_data='custom')],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_change_menu')]
        ]
        await query.message.edit_text("üìÖ *–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ä–æ–∫:*", parse_mode=ParseMode.MARKDOWN, reply_markup=InlineKeyboardMarkup(keyboard))
        return INPUT_DEADLINE
    elif choice == 'change_requirements':
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='back_to_change_menu')]]
        await query.message.edit_text("üìù *–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è:*", parse_mode=ParseMode.MARKDOWN, reply_markup=InlineKeyboardMarkup(keyboard))
        return INPUT_REQUIREMENTS
    elif choice == 'back_to_price_calc':
        return await calculate_price_step(update, context)
    elif choice == 'back_to_change_menu':
        return await change_order_data(update, context)
    return CALCULATE_PRICE

# –ù–∞–∑–∞–¥ –∫ —Ä–∞—Å—á–µ—Ç—É —Ü–µ–Ω—ã
async def back_to_price_calc(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    return await calculate_price_step(update, context)

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞
async def confirm_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = context.user_data
    user = update.effective_user
    client_name = user.username or f"user_{user.id}"
    order_type = data.get('order_type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø')

    client_dir = os.path.join(BASE_DIR, client_name)
    os.makedirs(client_dir, exist_ok=True)
    orders_list = user_orders.get(str(user.id), [])
    order_id = len(orders_list) + 1
    order_path = os.path.join(client_dir, f"order_{order_id}.txt")

    order_data = {
        'order_id': order_id,
        'date': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        'type': order_type,
        'topic': data.get('topic'),
        'deadline': data.get('deadline').strftime('%d.%m.%Y') if data.get('deadline') else "–ù–µ —É–∫–∞–∑–∞–Ω",
        'days_left': data.get('days_left'),
        'requirements': data.get('requirements', '–ù–µ —É–∫–∞–∑–∞–Ω—ã'),
        'price': data.get('price'),
        'status': '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑',
        'user_id': user.id,
        'user_name': user.first_name,
        'user_username': user.username
    }

    user_orders.setdefault(str(user.id), []).append(order_data)
    all_orders = load_orders()
    all_orders.setdefault(str(user.id), []).append(order_data)
    save_orders(all_orders)

    with open(order_path, 'w', encoding='utf-8') as f:
        f.write(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.first_name} (@{user.username})\n")
        f.write(f"ID: {user.id}\n")
        f.write(f"–¢–∏–ø —Ä–∞–±–æ—Ç—ã: {order_type}\n")
        f.write(f"–¢–µ–º–∞: {data.get('topic')}\n")
        f.write(f"–°—Ä–æ–∫–∏: {order_data['deadline']} ({data.get('days_left')} –¥–Ω–µ–π)\n")
        f.write(f"–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: {data.get('requirements', '–ù–µ —É–∫–∞–∑–∞–Ω—ã')}\n")
        f.write(f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {data.get('price')} —Ä—É–±.\n")
        f.write(f"–°—Ç–∞—Ç—É—Å: {order_data['status']}\n")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –≤ JSON –≤–º–µ—Å—Ç–æ Excel (–Ω–µ —Ç—Ä–µ–±—É–µ—Ç pandas)
    orders_json_path = os.path.join(DATA_DIR, 'all_orders.json')
    try:
        if os.path.exists(orders_json_path):
            with open(orders_json_path, 'r', encoding='utf-8') as f:
                all_orders_list = json.load(f)
        else:
            all_orders_list = []
        
        order_data_json = {
            '–î–∞—Ç–∞': order_data['date'],
            '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å': f"{user.first_name} (@{user.username})",
            'ID': user.id,
            '–¢–∏–ø —Ä–∞–±–æ—Ç—ã': order_type,
            '–¢–µ–º–∞': data.get('topic'),
            '–°—Ä–æ–∫–∏': order_data['deadline'],
            '–î–Ω–µ–π –æ—Å—Ç–∞–ª–æ—Å—å': data.get('days_left'),
            '–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è': data.get('requirements', '–ù–µ —É–∫–∞–∑–∞–Ω—ã'),
            '–°—Ç–æ–∏–º–æ—Å—Ç—å': data.get('price'),
            '–°—Ç–∞—Ç—É—Å': '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑'
        }
        
        all_orders_list.append(order_data_json)
        
        with open(orders_json_path, 'w', encoding='utf-8') as f:
            json.dump(all_orders_list, f, ensure_ascii=False, indent=4)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–∞: {e}")

    try:
        admin_message = (
            f"üÜï *–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order_id}*\n\n"
            f"*–û—Ç:* @{user.username} ({user.first_name})\n"
            f"*–¢–∏–ø:* {order_type}\n"
            f"*–¢–µ–º–∞:* {data.get('topic')}\n"
            f"*–î–µ–¥–ª–∞–π–Ω:* {order_data['deadline']} ({data.get('days_left')} –¥–Ω–µ–π)\n"
            f"*–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è:* {data.get('requirements', '–ù–µ —É–∫–∞–∑–∞–Ω—ã')}\n"
            f"*–¶–µ–Ω–∞:* {data.get('price')} —Ä—É–±."
        )
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f'admin_accept_{user.id}_{order_id}')],
            [InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f'admin_reject_{user.id}_{order_id}')],
            [InlineKeyboardButton("üí≤ –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—É", callback_data=f'admin_change_price_{user.id}_{order_id}')]
        ]
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=admin_message,
            parse_mode=ParseMode.MARKDOWN,
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É: {e}")

    success_message = (
        f"‚úÖ *–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω!*\n\n"
        f"–ù–æ–º–µ—Ä: #{order_id}\n"
        f"–¢–∏–ø: {order_type}\n"
        f"–°—Ä–æ–∫: {order_data['deadline']}\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {data.get('price')} —Ä—É–±.\n\n"
        f"–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π –∏ –æ–ø–ª–∞—Ç—ã."
    )
    keyboard = [
        [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="profile")],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
    ]
    await query.message.edit_text(success_message, parse_mode=ParseMode.MARKDOWN, reply_markup=InlineKeyboardMarkup(keyboard))
    
    for key in list(context.user_data.keys()):
        if key != 'ref_link':
            context.user_data.pop(key, None)
    return CONFIRM_ORDER

# –û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞
async def cancel_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    for key in list(context.user_data.keys()):
        if key != 'ref_link':
            context.user_data.pop(key, None)
    await query.message.edit_text(
        "‚ùå *–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω*\n\n–û—Ñ–æ—Ä–º–∏—Ç–µ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è.",
        parse_mode=ParseMode.MARKDOWN,
        reply_markup=InlineKeyboardMarkup([
            [InlineKeyboardButton("üìù –ù–æ–≤—ã–π –∑–∞–∫–∞–∑", callback_data="make_order")],
            [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main")]
        ])
    )
    return SELECT_MAIN_MENU

# –ü—Ä–æ—Ñ–∏–ª—å
async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    orders = user_orders.get(str(user.id), []) or load_orders().get(str(user.id), [])
    
    try:
        bot = await context.bot.get_me()
        bot_username = bot.username
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞: {e}")
        bot_username = "Kladovaya_GIPSR_bot"
    
    ref_link = f"https://t.me/{bot_username}?start={user.id}"
    context.user_data['ref_link'] = ref_link
    ref_count = len(referrals.get(str(user.id), []))
    bonus = sum(int(order.get('price', 0) * 0.05) for ref_id in referrals.get(str(user.id), []) for order in user_orders.get(str(ref_id), []))

    text = (
        f"üë§ *–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç*\n\n"
        f"*–ò–º—è:* {user.first_name}\n"
        f"*Username:* @{user.username if user.username else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
        f"*ID:* `{user.id}`\n\n"
        f"*–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞:*\n"
        f"- –ü—Ä–∏–≥–ª–∞—à–µ–Ω–æ: {ref_count}\n"
        f"- –ë–æ–Ω—É—Å: {bonus} —Ä—É–±.\n"
        f"- –°—Å—ã–ª–∫–∞: `{ref_link}`\n\n"
    )

    if orders:
        text += "*–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:*\n"
        recent_orders = sorted(orders, key=lambda x: x.get('date', ''), reverse=True)[:3]
        for o in recent_orders:
            text += f"- –ó–∞–∫–∞–∑ #{o.get('order_id', 'N/A')}: {o.get('type')} | –°—Ç–∞—Ç—É—Å: {o.get('status')}\n"
        if len(orders) > 3:
            text += f"\n_...–∏ –µ—â–µ {len(orders) - 3} –∑–∞–∫–∞–∑–æ–≤_\n"
    else:
        text += "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤."

    keyboard = [
        [InlineKeyboardButton("üìã –í—Å–µ –∑–∞–∫–∞–∑—ã", callback_data='show_all_orders')],
        [InlineKeyboardButton("üìù –ù–æ–≤—ã–π –∑–∞–∫–∞–∑", callback_data='make_order')],
        [InlineKeyboardButton("‚úçÔ∏è –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data='leave_feedback')],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
    ]

    if update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.message.edit_text(
            text, parse_mode=ParseMode.MARKDOWN, reply_markup=InlineKeyboardMarkup(keyboard)
        )
    else:
        await context.bot.send_message(
            chat_id=user.id, text=text, parse_mode=ParseMode.MARKDOWN, reply_markup=InlineKeyboardMarkup(keyboard)
        )
    return PROFILE_MENU

# –í—Å–µ –∑–∞–∫–∞–∑—ã
async def show_all_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = update.effective_user
    orders = user_orders.get(str(user.id), []) or load_orders().get(str(user.id), [])

    if not orders:
        text = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤."
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data='back_to_profile')]]
        await query.message.edit_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
        return SHOW_ORDERS

    orders = sorted(orders, key=lambda x: x.get('date', ''), reverse=True)
    text = "üìã *–í—Å–µ –≤–∞—à–∏ –∑–∞–∫–∞–∑—ã:*\n\n"
    for i, order in enumerate(orders):
        text += f"*–ó–∞–∫–∞–∑ #{order.get('order_id', 'N/A')}* ({order.get('date', '')[:10]})\n"
        text += f"–¢–∏–ø: {order.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')}\n"
        text += f"–¢–µ–º–∞: {order.get('topic', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}\n"
        text += f"–°—Ç–∞—Ç—É—Å: {order.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')}\n"
        text += f"–¶–µ–Ω–∞: {order.get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')} —Ä—É–±.\n"
        if i < len(orders) - 1:
            text += "\n----------------------------\n\n"

    keyboard = [
        [InlineKeyboardButton("üìù –ù–æ–≤—ã–π –∑–∞–∫–∞–∑", callback_data='make_order')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data='back_to_profile')]
    ]
    await query.message.edit_text(text, parse_mode=ParseMode.MARKDOWN, reply_markup=InlineKeyboardMarkup(keyboard))
    return SHOW_ORDERS

# –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é
async def back_to_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    return await show_profile(update, context)

# –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤
async def leave_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    text = (
        "‚úçÔ∏è *–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤*\n\n"
        "–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤ –æ —Ä–∞–±–æ—Ç–µ —Å –Ω–∞–º–∏ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏:"
    )
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data='back_to_profile')]]
    await query.message.edit_text(text, parse_mode=ParseMode.MARKDOWN, reply_markup=InlineKeyboardMarkup(keyboard))
    return LEAVE_FEEDBACK

# –ü—Ä–∏–Ω—è—Ç—å –æ—Ç–∑—ã–≤
async def input_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.callback_query:
        query = update.callback_query
        await query.answer()
        if query.data == 'back_to_profile':
            return await show_profile(update, context)
        return

    user = update.effective_user
    feedback_text = update.message.text
    feedback_data = {
        'user_id': user.id,
        'username': user.username,
        'name': user.first_name,
        'date': datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
        'text': feedback_text
    }

    feedbacks = load_feedbacks()
    feedbacks.setdefault(str(user.id), []).append(feedback_data)
    save_feedbacks(feedbacks)

    client_name = user.username or f"user_{user.id}"
    feedback_dir = os.path.join(BASE_DIR, 'feedbacks')
    os.makedirs(feedback_dir, exist_ok=True)
    feedback_path = os.path.join(feedback_dir, f"{client_name}.txt")
    with open(feedback_path, 'a', encoding='utf-8') as f:
        f.write(f"--- –û—Ç–∑—ã–≤ –æ—Ç {datetime.now().strftime('%Y-%m-%d %H:%M:%S')} ---\n{feedback_text}\n\n")

    try:
        await context.bot.send_message(
            chat_id=ADMIN_CHAT_ID,
            text=f"üì£ *–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤*\n\n–û—Ç: @{user.username} ({user.first_name})\n\n{feedback_text}",
            parse_mode=ParseMode.MARKDOWN
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω—É –æ–± –æ—Ç–∑—ã–≤–µ: {e}")

    text = "üôè *–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤!*\n\n–ú—ã —Ü–µ–Ω–∏–º –≤–∞—à–µ –º–Ω–µ–Ω–∏–µ."
    keyboard = [
        [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data='back_to_profile')],
        [InlineKeyboardButton("üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data='back_to_main')]
    ]
    await update.message.reply_text(text, parse_mode=ParseMode.MARKDOWN, reply_markup=InlineKeyboardMarkup(keyboard))
    return INPUT_FEEDBACK

# –ö–æ–º–∞–Ω–¥–∞ /admin
async def admin_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_CHAT_ID:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        return
    
    # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    all_orders = load_orders()
    total_orders = sum(len(orders) for orders in all_orders.values())
    total_users = len(all_orders)
    new_orders = sum(1 for orders in all_orders.values() for order in orders if order.get('status') == '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑')
    
    text = (
        "üéÜ *–ü–†–û–î–í–ò–ù–£–¢–ê–Ø –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨*\n\n"
        f"üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
        f"‚Ä¢ –ó–∞–∫–∞–∑–æ–≤: {total_orders}\n"
        f"‚Ä¢ –ö–ª–∏–µ–Ω—Ç–æ–≤: {total_users}\n"
        f"‚Ä¢ –ù–æ–≤—ã–µ: {new_orders}\n\n"
        "üéõÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º:*"
    )
    
    keyboard = [
        [InlineKeyboardButton("üìã –ó–∞–∫–∞–∑—ã", callback_data='admin_orders'),
         InlineKeyboardButton("üë• –ö–ª–∏–µ–Ω—Ç—ã", callback_data='admin_users')],
        [InlineKeyboardButton("üí∞ –¶–µ–Ω—ã", callback_data='admin_prices'),
         InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='admin_stats')],
        [InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data='admin_broadcast'),
         InlineKeyboardButton("üíª –õ–æ–≥–∏", callback_data='admin_logs')],
        [InlineKeyboardButton("üéÅ –ê–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏", callback_data='admin_promos')],
        [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='admin_settings')],
        [InlineKeyboardButton("‚ùå –í—ã–π—Ç–∏", callback_data='back_to_main_admin')]
    ]
    
    await update.message.reply_text(
        text, parse_mode=ParseMode.MARKDOWN, reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return ADMIN_MENU

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω-–º–µ–Ω—é
async def admin_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if update.effective_user.id != ADMIN_CHAT_ID:
        await query.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return await main_menu(update, context)

    choice = query.data
    
    if choice == 'admin_orders':
        # –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–∫–∞–∑—ã
        all_orders = load_orders()
        text = "üìã *–£–ü–†–ê–í–õ–ï–ù–ò–ï –ó–ê–ö–ê–ó–ê–ú–ò*\n\n"
        
        # –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç—É—Å–æ–≤
        statuses = {}
        for orders in all_orders.values():
            for order in orders:
                status = order.get('status', '–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω')
                statuses[status] = statuses.get(status, 0) + 1
        
        text += "üìä *–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:*\n"
        for status, count in statuses.items():
            text += f"‚Ä¢ {status}: {count}\n"
        
        text += "\nüÜï *–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–∫–∞–∑–æ–≤:*\n\n"
        
        # –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã
        recent_orders = []
        for uid, orders in all_orders.items():
            for order in orders:
                order['user_id'] = uid
                recent_orders.append(order)
        
        recent_orders = sorted(recent_orders, key=lambda x: x.get('date', ''), reverse=True)[:5]
        
        for order in recent_orders:
            text += f"üî∏ #{order.get('order_id', 'N/A')} | {order.get('user_name', 'Unknown')}\n"
            text += f"   {order.get('type', 'N/A')} | {order.get('status', 'N/A')}\n\n"
        
        keyboard = [
            [InlineKeyboardButton("üÜï –ù–æ–≤—ã–µ –∑–∞–∫–∞–∑—ã", callback_data="admin_new_orders")],
            [InlineKeyboardButton("‚úÖ –ü—Ä–∏–Ω—è—Ç—ã–µ", callback_data="admin_accepted_orders")],
            [InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç Excel", callback_data="admin_export_orders")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")]
        ]
        await query.message.edit_text(text, parse_mode=ParseMode.MARKDOWN, reply_markup=InlineKeyboardMarkup(keyboard))
    
    elif choice == 'admin_users':
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
        all_users = user_ids.union({int(uid) for uid in load_orders().keys() if uid.isdigit()})
        text = "üë• *–£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–õ–ò–ï–ù–¢–ê–ú–ò*\n\n"
        text += f"üìä *–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:* {len(all_users)}\n\n"
        
        # –¢–æ–ø –∫–ª–∏–µ–Ω—Ç–æ–≤
        top_clients = []
        for uid in all_users:
            orders = load_orders().get(str(uid), [])
            if orders:
                total = sum(order.get('price', 0) for order in orders)
                top_clients.append({'id': uid, 'orders': len(orders), 'total': total, 'name': orders[0].get('user_name', 'Unknown')})
        
        top_clients = sorted(top_clients, key=lambda x: x['total'], reverse=True)[:5]
        
        text += "üèÜ *–¢–æ–ø-5 –∫–ª–∏–µ–Ω—Ç–æ–≤:*\n"
        for idx, client in enumerate(top_clients, 1):
            text += f"{idx}. {client['name']} - {client['total']:,}‚ÇΩ ({client['orders']} –∑–∞–∫.)\n"
        
        keyboard = [
            [InlineKeyboardButton("üîç –ù–∞–π—Ç–∏ –∫–ª–∏–µ–Ω—Ç–∞", callback_data="admin_find_user")],
            [InlineKeyboardButton("üì® –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", callback_data="admin_message_user")],
            [InlineKeyboardButton("üö´ –ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫", callback_data="admin_blacklist")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")]
        ]
        await query.message.edit_text(text, parse_mode=ParseMode.MARKDOWN, reply_markup=InlineKeyboardMarkup(keyboard))
    
    elif choice == 'admin_prices':
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω–∞–º–∏
        text = "üí∞ *–£–ü–†–ê–í–õ–ï–ù–ò–ï –¶–ï–ù–ê–ú–ò*\n\n"
        text += "üìç *–¢–µ–∫—É—â–∏–µ —Ü–µ–Ω—ã:*\n\n"
        
        for key, val in PRICES.items():
            order_type = ORDER_TYPES.get(key, {})
            text += f"{order_type.get('icon', '')} {order_type.get('name', key)}: {val.get('base', 0):,}‚ÇΩ\n"
        
        text += f"\nüéÜ *–†–µ–∂–∏–º:* {PRICING_MODES.get(current_pricing_mode, {}).get('name', '')}\n"
        
        keyboard = [
            [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å —Ü–µ–Ω—ã", callback_data="admin_edit_prices")],
            [InlineKeyboardButton("üîÑ –°–º–µ–Ω–∏—Ç—å —Ä–µ–∂–∏–º", callback_data="admin_change_pricing_mode")],
            [InlineKeyboardButton("üéØ –°–∫–∏–¥–∫–∏", callback_data="admin_discounts")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")]
        ]
        await query.message.edit_text(text, parse_mode=ParseMode.MARKDOWN, reply_markup=InlineKeyboardMarkup(keyboard))

    elif choice == 'admin_stats':
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        all_orders = load_orders()
        total_orders = sum(len(orders) for orders in all_orders.values())
        total_users = len(all_orders)
        order_types = {}
        total_revenue = 0
        today_revenue = 0
        today = datetime.now().strftime('%Y-%m-%d')
        
        for uid, orders in all_orders.items():
            for order in orders:
                order_types[order.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π')] = order_types.get(order.get('type', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'), 0) + 1
                price = int(order.get('price', 0))
                total_revenue += price
                if order.get('date', '').startswith(today):
                    today_revenue += price
        
        text = "üìä *–î–ï–¢–ê–õ–¨–ù–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê*\n\n"
        text += f"üìà *–û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏:*\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤: {total_users}\n"
        text += f"‚Ä¢ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {total_orders}\n"
        text += f"‚Ä¢ –û–±—â–∞—è –≤—ã—Ä—É—á–∫–∞: {total_revenue:,} —Ä—É–±.\n"
        text += f"‚Ä¢ –°—Ä–µ–¥–Ω–∏–π —á–µ–∫: {int(total_revenue/total_orders) if total_orders else 0:,} —Ä—É–±.\n\n"
        
        text += f"üí∞ *–í—ã—Ä—É—á–∫–∞ —Å–µ–≥–æ–¥–Ω—è:* {today_revenue:,} —Ä—É–±.\n\n"
        
        text += "*üìù –ü–æ —Ç–∏–ø–∞–º —Ä–∞–±–æ—Ç:*\n"
        for t, c in sorted(order_types.items(), key=lambda x: x[1], reverse=True):
            text += f"‚Ä¢ {t}: {c} ({c/total_orders*100:.1f}%)\n"
        
        keyboard = [
            [InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel", callback_data="admin_export_stats")],
            [InlineKeyboardButton("üìä –ì—Ä–∞—Ñ–∏–∫–∏", callback_data="admin_charts")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")]
        ]
        await query.message.edit_text(text, parse_mode=ParseMode.MARKDOWN, reply_markup=InlineKeyboardMarkup(keyboard))
    
    elif choice == 'admin_broadcast':
        # –†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        text = (
            "üì¢ *–†–ê–°–°–´–õ–ö–ê –°–û–û–ë–©–ï–ù–ò–ô*\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞—Å—Å—ã–ª–∫–∏:\n\n"
            "‚Ä¢ *–í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º* - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ–º –∫–ª–∏–µ–Ω—Ç–∞–º\n"
            "‚Ä¢ *–ê–∫—Ç–∏–≤–Ω—ã–º* - —Ç–æ–ª—å–∫–æ —Ç–µ–º, –∫—Ç–æ –∑–∞–∫–∞–∑—ã–≤–∞–ª\n"
            "‚Ä¢ *–ù–æ–≤—ã–º* - –∫—Ç–æ –µ—â–µ –Ω–µ –∑–∞–∫–∞–∑—ã–≤–∞–ª\n"
        )
        keyboard = [
            [InlineKeyboardButton("üì® –í—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="broadcast_all")],
            [InlineKeyboardButton("‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–º –∫–ª–∏–µ–Ω—Ç–∞–º", callback_data="broadcast_active")],
            [InlineKeyboardButton("üÜï –ù–æ–≤—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º", callback_data="broadcast_new")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")]
        ]
        await query.message.edit_text(text, parse_mode=ParseMode.MARKDOWN, reply_markup=InlineKeyboardMarkup(keyboard))
    
    elif choice == 'admin_settings':
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
        text = (
            "‚öôÔ∏è *–ù–ê–°–¢–†–û–ô–ö–ò –ë–û–¢–ê*\n\n"
            "üîß *–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:*\n\n"
            "‚Ä¢ –†–µ–∂–∏–º —Ü–µ–Ω\n"
            "‚Ä¢ –ê–Ω—Ç–∏–ø–ª–∞–≥–∏–∞—Ç –º–∏–Ω–∏–º—É–º\n"
            "‚Ä¢ –°—Ä–æ–∫ –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö –ø—Ä–∞–≤–æ–∫\n"
            "‚Ä¢ –†–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç\n"
            "‚Ä¢ –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã\n"
        )
        keyboard = [
            [InlineKeyboardButton("üí≤ –†–µ–∂–∏–º —Ü–µ–Ω", callback_data="settings_pricing")],
            [InlineKeyboardButton("üìù –¢–µ–∫—Å—Ç—ã –∏ —Å–æ–æ–±—â–µ–Ω–∏—è", callback_data="settings_messages")],
            [InlineKeyboardButton("üéÅ –ë–æ–Ω—É—Å—ã –∏ —Å–∫–∏–¥–∫–∏", callback_data="settings_bonuses")],
            [InlineKeyboardButton("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è", callback_data="settings_automation")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")]
        ]
        await query.message.edit_text(text, parse_mode=ParseMode.MARKDOWN, reply_markup=InlineKeyboardMarkup(keyboard))
    
    elif choice == 'admin_change_pricing_mode':
        global current_pricing_mode
        current_pricing_mode = 'hard' if current_pricing_mode == 'light' else 'light'
        mode_info = PRICING_MODES[current_pricing_mode]
        text = f"üîÑ *–†–µ–∂–∏–º —Ü–µ–Ω –∏–∑–º–µ–Ω–µ–Ω*\n\n{mode_info['name']}: {mode_info['icon']} {mode_info['description']}"
        keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_prices")]]
        await query.message.edit_text(text, parse_mode=ParseMode.MARKDOWN, reply_markup=InlineKeyboardMarkup(keyboard))

    elif choice == 'back_to_main_admin':
        return await main_menu(update, context)

    elif choice == 'admin_menu':
        # –í–æ–∑–≤—Ä–∞—Ç –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é –∞–¥–º–∏–Ω–∞
        all_orders = load_orders()
        total_orders = sum(len(orders) for orders in all_orders.values())
        total_users = len(all_orders)
        new_orders = sum(1 for orders in all_orders.values() for order in orders if order.get('status') == '–ù–æ–≤—ã–π –∑–∞–∫–∞–∑')
        
        text = (
            "üéÜ *–ü–†–û–î–í–ò–ù–£–¢–ê–Ø –ê–î–ú–ò–ù-–ü–ê–ù–ï–õ–¨*\n\n"
            f"üìä *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
            f"‚Ä¢ –ó–∞–∫–∞–∑–æ–≤: {total_orders}\n"
            f"‚Ä¢ –ö–ª–∏–µ–Ω—Ç–æ–≤: {total_users}\n"
            f"‚Ä¢ –ù–æ–≤—ã–µ: {new_orders}\n\n"
            "üéõÔ∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–æ–º:*"
        )
        
        keyboard = [
            [InlineKeyboardButton("üìã –ó–∞–∫–∞–∑—ã", callback_data='admin_orders'),
             InlineKeyboardButton("üë• –ö–ª–∏–µ–Ω—Ç—ã", callback_data='admin_users')],
            [InlineKeyboardButton("üí∞ –¶–µ–Ω—ã", callback_data='admin_prices'),
             InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data='admin_stats')],
            [InlineKeyboardButton("üì¢ –†–∞—Å—Å—ã–ª–∫–∞", callback_data='admin_broadcast'),
             InlineKeyboardButton("üíª –õ–æ–≥–∏", callback_data='admin_logs')],
            [InlineKeyboardButton("üéÅ –ê–∫—Ü–∏–∏ –∏ —Å–∫–∏–¥–∫–∏", callback_data='admin_promos')],
            [InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data='admin_settings')],
            [InlineKeyboardButton("‚ùå –í—ã–π—Ç–∏", callback_data='back_to_main_admin')]
        ]
        
        await query.message.edit_text(
            text, parse_mode=ParseMode.MARKDOWN, reply_markup=InlineKeyboardMarkup(keyboard)
        )
    return ADMIN_MENU

# –î–µ–π—Å—Ç–≤–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def admin_order_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    if update.effective_user.id != ADMIN_CHAT_ID:
        await query.message.edit_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return ADMIN_MENU

    action_data = query.data.split('_')
    action, user_id, order_id = action_data[1], action_data[2], int(action_data[3])
    all_orders = load_orders()

    if user_id in all_orders:
        for order in all_orders[user_id]:
            if order.get('order_id') == order_id:
                if action == 'accept':
                    order['status'] = '–ü—Ä–∏–Ω—è—Ç'
                    try:
                        await context.bot.send_message(
                            chat_id=int(user_id),
                            text=f"‚úÖ *–ó–∞–∫–∞–∑ #{order_id} –ø—Ä–∏–Ω—è—Ç!*\n\n–¢–∏–ø: {order.get('type')}\n–¢–µ–º–∞: {order.get('topic')}\n–°—Ç–∞—Ç—É—Å: –ü—Ä–∏–Ω—è—Ç\n\n–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.",
                            parse_mode=ParseMode.MARKDOWN
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                    await query.message.edit_text(f"‚úÖ –ó–∞–∫–∞–∑ #{order_id} –ø—Ä–∏–Ω—è—Ç.")
                elif action == 'reject':
                    order['status'] = '–û—Ç–∫–ª–æ–Ω–µ–Ω'
                    try:
                        await context.bot.send_message(
                            chat_id=int(user_id),
                            text=f"‚ùå *–ó–∞–∫–∞–∑ #{order_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω*\n\n–¢–∏–ø: {order.get('type')}\n–¢–µ–º–∞: {order.get('topic')}\n–°—Ç–∞—Ç—É—Å: –û—Ç–∫–ª–æ–Ω–µ–Ω\n\n–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.",
                            parse_mode=ParseMode.MARKDOWN
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                    await query.message.edit_text(f"‚ùå –ó–∞–∫–∞–∑ #{order_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω.")
                elif action == 'change_price':
                    context.user_data['admin_edit_order'] = {'user_id': user_id, 'order_id': order_id, 'current_price': order.get('price')}
                    await query.message.edit_text(f"–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ #{order_id}: {order.get('price')} —Ä—É–±.\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É:")
                    return ADMIN_MENU
                break
        save_orders(all_orders)
        user_orders[user_id] = all_orders[user_id]
    else:
        await query.message.edit_text(f"–û—à–∏–±–∫–∞: –ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")

    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")]]
    await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup(keyboard))
    return ADMIN_MENU

# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
async def admin_change_price(update: Update, context: ContextTypes.DEFAULT_TYPE):
    edit_data = context.user_data.get('admin_edit_order', {})
    if not edit_data:
        await update.message.reply_text("–û—à–∏–±–∫–∞: –î–∞–Ω–Ω—ã–µ –æ –∑–∞–∫–∞–∑–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return ADMIN_MENU

    try:
        new_price = int(update.message.text)
        if new_price <= 0:
            await update.message.reply_text("–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π.")
            return ADMIN_MENU

        user_id, order_id = edit_data['user_id'], edit_data['order_id']
        all_orders = load_orders()
        if user_id in all_orders:
            for order in all_orders[user_id]:
                if order.get('order_id') == order_id:
                    old_price = order.get('price')
                    order['price'] = new_price
                    try:
                        await context.bot.send_message(
                            chat_id=int(user_id),
                            text=f"üí≤ *–¶–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ #{order_id} –∏–∑–º–µ–Ω–µ–Ω–∞*\n\n–¢–∏–ø: {order.get('type')}\n–¢–µ–º–∞: {order.get('topic')}\n–°—Ç–∞—Ä–∞—è —Ü–µ–Ω–∞: {old_price} —Ä—É–±.\n–ù–æ–≤–∞—è —Ü–µ–Ω–∞: {new_price} —Ä—É–±.\n\n–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.",
                            parse_mode=ParseMode.MARKDOWN
                        )
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                    save_orders(all_orders)
                    user_orders[user_id] = all_orders[user_id]
                    await update.message.reply_text(f"‚úÖ –¶–µ–Ω–∞ –∑–∞–∫–∞–∑–∞ #{order_id} –∏–∑–º–µ–Ω–µ–Ω–∞ —Å {old_price} –Ω–∞ {new_price} —Ä—É–±.")
                    del context.user_data['admin_edit_order']
                    break
        else:
            await update.message.reply_text(f"–û—à–∏–±–∫–∞: –ó–∞–∫–∞–∑ #{order_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin_menu")]]
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=InlineKeyboardMarkup(keyboard))
    return ADMIN_MENU

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    logger.info("="*50)
    logger.info("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    logger.info(f"Bot token: {TELEGRAM_BOT_TOKEN[:10]}...{TELEGRAM_BOT_TOKEN[-5:]}")
    logger.info(f"Admin ID: {ADMIN_CHAT_ID}")
    logger.info(f"Platform: {platform.system()}")
    logger.info(f"BASE_DIR: {BASE_DIR}")
    logger.info(f"DATA_DIR: {DATA_DIR}")
    logger.info(f"Python version: {sys.version}")
    logger.info(f"Directories exist: BASE={os.path.exists(BASE_DIR)}, DATA={os.path.exists(DATA_DIR)}")
    logger.info("="*50)

    try:
        application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
        conv_handler = ConversationHandler(
            entry_points=[
                CommandHandler('start', start),
                CommandHandler('order', order_command),
                CommandHandler('profile', profile_command),
                CommandHandler('admin', admin_start)
            ],
            states={
                SELECT_MAIN_MENU: [
                    CallbackQueryHandler(main_menu_handler),
                    CallbackQueryHandler(main_menu, pattern='^back_to_main$')
                ],
                SELECT_ORDER_TYPE: [CallbackQueryHandler(select_order_type_callback)],
                VIEW_ORDER_DETAILS: [CallbackQueryHandler(order_details_handler)],
                INPUT_TOPIC: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, input_topic),
                    CallbackQueryHandler(back_to_order_details, pattern='^back_to_order_details$')
                ],
                INPUT_DEADLINE: [
                    CallbackQueryHandler(input_deadline),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, input_custom_deadline)
                ],
                INPUT_REQUIREMENTS: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, input_requirements),
                    CallbackQueryHandler(back_to_deadline, pattern='^back_to_deadline$')
                ],
                CALCULATE_PRICE: [
                    CallbackQueryHandler(confirm_order, pattern='^confirm_order$'),
                    CallbackQueryHandler(cancel_order, pattern='^cancel_order$'),
                    CallbackQueryHandler(change_order_data, pattern='^change_order_data$'),
                    CallbackQueryHandler(handle_change_data, pattern='^change_'),
                    CallbackQueryHandler(back_to_price_calc, pattern='^back_to_price_calc$')
                ],
                CONFIRM_ORDER: [
                    CallbackQueryHandler(main_menu_handler, pattern='^back_to_main$'),
                    CallbackQueryHandler(show_profile, pattern='^profile$')
                ],
                PROFILE_MENU: [
                    CallbackQueryHandler(show_all_orders, pattern='^show_all_orders$'),
                    CallbackQueryHandler(leave_feedback, pattern='^leave_feedback$'),
                    CallbackQueryHandler(main_menu_handler, pattern='^make_order$'),
                    CallbackQueryHandler(main_menu, pattern='^back_to_main$')
                ],
                SHOW_PRICE_LIST: [
                    CallbackQueryHandler(price_calculator, pattern='^price_calculator$'),
                    CallbackQueryHandler(main_menu, pattern='^back_to_main$')
                ],
                PRICE_CALCULATOR: [
                    CallbackQueryHandler(calculate_price_in_calculator, pattern='^calc_'),
                    CallbackQueryHandler(handle_deadline_selection, pattern='^deadline_'),
                    CallbackQueryHandler(select_order_type_callback, pattern='^order_'),
                    CallbackQueryHandler(back_to_price, pattern='^back_to_price$')
                ],
                SHOW_FAQ: [
                    CallbackQueryHandler(show_faq_details, pattern='^faq_'),
                    CallbackQueryHandler(main_menu, pattern='^back_to_main$')
                ],
                FAQ_DETAILS: [
                    CallbackQueryHandler(back_to_faq, pattern='^back_to_faq$'),
                    CallbackQueryHandler(main_menu, pattern='^back_to_main$')
                ],
                SHOW_ORDERS: [
                    CallbackQueryHandler(back_to_profile, pattern='^back_to_profile$'),
                    CallbackQueryHandler(main_menu_handler, pattern='^make_order$')
                ],
                LEAVE_FEEDBACK: [
                    MessageHandler(filters.TEXT & ~filters.COMMAND, input_feedback),
                    CallbackQueryHandler(back_to_profile, pattern='^back_to_profile$')
                ],
                INPUT_FEEDBACK: [
                    CallbackQueryHandler(back_to_profile, pattern='^back_to_profile$'),
                    CallbackQueryHandler(main_menu, pattern='^back_to_main$')
                ],
                ADMIN_MENU: [
                    CallbackQueryHandler(admin_menu_handler, pattern='^admin_'),
                    CallbackQueryHandler(admin_order_action, pattern='^admin_(accept|reject|change_price)_'),
                    MessageHandler(filters.TEXT & ~filters.COMMAND, admin_change_price),
                    CallbackQueryHandler(main_menu, pattern='^back_to_main_admin$')
                ]
            },
            fallbacks=[
                CommandHandler('start', start),
                CommandHandler('order', order_command),
                CommandHandler('profile', profile_command),
                CommandHandler('admin', admin_start),
                CommandHandler('help', help_command)
            ],
            name="main_conversation",
            persistent=False
        )
        application.add_handler(conv_handler)
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –≤–Ω–µ ConversationHandler
        application.add_handler(CommandHandler('help', help_command))
        application.add_handler(CommandHandler('order', order_command))
        application.add_handler(CommandHandler('profile', profile_command))
        application.add_handler(CommandHandler('price', price_command))
        application.add_handler(CommandHandler('faq', faq_command))
        application.add_handler(CommandHandler('admin', admin_start))
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
        application.add_error_handler(error_handler)
        
        logger.info("–í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        logger.info("–ë–æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º polling...")
        application.run_polling(drop_pending_updates=True)
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ: {e}", exc_info=True)

if __name__ == '__main__':
    main()