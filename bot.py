import os
import logging
import json
import html
import re
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    CallbackQueryHandler, MessageHandler, filters, ConversationHandler
)
from telegram.constants import ParseMode
from telegram.error import TelegramError
from dotenv import load_dotenv
import pandas as pd

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ADMIN_CHAT_ID = int(os.getenv('ADMIN_CHAT_ID', 0))

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
BASE_DIR = os.path.join(os.getcwd(), 'clients')
DATA_DIR = os.path.join(os.getcwd(), 'data')
LOGS_DIR = os.path.join(os.getcwd(), 'logs')
for directory in [BASE_DIR, DATA_DIR, LOGS_DIR]:
    os.makedirs(directory, exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)
file_handler = logging.FileHandler(os.path.join(LOGS_DIR, 'bot.log'))
file_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
logger.addHandler(file_handler)

# –§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö
PRICES_FILE = os.path.join(DATA_DIR, 'prices.json')
REFERRALS_FILE = os.path.join(DATA_DIR, 'referrals.json')
ORDERS_FILE = os.path.join(DATA_DIR, 'orders.json')
FEEDBACKS_FILE = os.path.join(DATA_DIR, 'feedbacks.json')
USER_LOGS_FILE = os.path.join(DATA_DIR, 'user_logs.json')

# –§—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
def load_json(file_path, default=None):
    try:
        if os.path.exists(file_path):
            with open(file_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        return default or {}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {file_path}: {e}")
        return default or {}

def save_json(file_path, data):
    try:
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {file_path}: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
PRICES = load_json(PRICES_FILE, {
    'samostoyatelnye': {'base': 2000, 'min': 2000, 'max': 5000},
    'kursovaya_teoreticheskaya': {'base': 8000, 'min': 8000, 'max': 12000},
    'kursovaya_s_empirikov': {'base': 12000, 'min': 12000, 'max': 18000},
    'diplomnaya': {'base': 35000, 'min': 35000, 'max': 50000},
    'magisterskaya': {'base': 35000, 'min': 35000, 'max': 60000}
})
REFERALS = load_json(REFERRALS_FILE)
ORDERS = load_json(ORDERS_FILE)
FEEDBACKS = load_json(FEEDBACKS_FILE)
USER_LOGS = load_json(USER_LOGS_FILE)

ORDER_TYPES = {
    'samostoyatelnye': {
        'name': '–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–µ, –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ, —ç—Å—Å–µ',
        'icon': 'üìù',
        'description': '–ë—ã—Å—Ç—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è: —ç—Å—Å–µ, –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ, —Ä–µ—Ñ–µ—Ä–∞—Ç—ã. –ò–¥–µ–∞–ª—å–Ω–æ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤! –£–∂–µ 5000+ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ üî•',
        'details': '–û–±—ä–µ–º –¥–æ 20 —Å—Ç—Ä–∞–Ω–∏—Ü. –ë—ã—Å—Ç—Ä–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π –∫–∞—á–µ—Å—Ç–≤–∞.',
        'examples': ['–≠—Å—Å–µ –ø–æ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–µ', '–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è –ø–æ –º–∞—Ç–µ–º–∞—Ç–∏–∫–µ', '–†–µ—Ñ–µ—Ä–∞—Ç –ø–æ –∏—Å—Ç–æ—Ä–∏–∏']
    },
    'kursovaya_teoreticheskaya': {
        'name': '–ö—É—Ä—Å–æ–≤–∞—è —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è',
        'icon': 'üìò',
        'description': '–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã. –ü–æ–ª—É—á–∏—Ç–µ –æ—Ç–ª–∏—á–Ω—É—é –æ—Ü–µ–Ω–∫—É –±–µ–∑ —Å—Ç—Ä–µ—Å—Å–∞! üìà',
        'details': '–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è –æ—Å–Ω–æ–≤–∞, –∞–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ –ì–û–°–¢.',
        'examples': ['–¢–µ–æ—Ä–∏—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞', '–û–±–∑–æ—Ä –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ —Ä–∞–∑–≤–∏—Ç–∏—è']
    },
    'kursovaya_s_empirikov': {
        'name': '–ö—É—Ä—Å–æ–≤–∞—è —Å —ç–º–ø–∏—Ä–∏–∫–æ–π',
        'icon': 'üìä',
        'description': '–¢–µ–æ—Ä–∏—è + –¥–∞–Ω–Ω—ã–µ, –∞–Ω–∞–ª–∏–∑. –ö–ª–∏–µ–Ω—Ç—ã –≥–æ–≤–æ—Ä—è—Ç: "–õ—É—á—à–∞—è –ø–æ–º–æ—â—å!" ‚≠ê',
        'details': '–í–∫–ª—é—á–∞–µ—Ç –æ–ø—Ä–æ—Å—ã, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.',
        'examples': ['–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞', '–ê–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π']
    },
    'diplomnaya': {
        'name': '–î–∏–ø–ª–æ–º–Ω–∞—è —Ä–∞–±–æ—Ç–∞',
        'icon': 'üéì',
        'description': '–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π –∑–∞—â–∏—Ç—ã. –°–∫–∏–¥–∫–∞ 10% –Ω–∞ –ø–µ—Ä–≤—ã–π –¥–∏–ø–ª–æ–º! üíº',
        'details': '–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑, —ç–º–ø–∏—Ä–∏–∫–∞, –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è.',
        'examples': ['–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è', '–≠–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∫–æ–º–ø–∞–Ω–∏–∏']
    },
    'magisterskaya': {
        'name': '–ú–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–∞—è –¥–∏—Å—Å–µ—Ä—Ç–∞—Ü–∏—è',
        'icon': 'üîç',
        'description': '–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ. 100% –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞! üåü',
        'details': '–ù–∞—É—á–Ω–∞—è –Ω–æ–≤–∏–∑–Ω–∞, –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è, –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.',
        'examples': ['–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ –º–æ–¥–µ–ª–µ–π AI', '–ö–æ–º–ø–ª–µ–∫—Å–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è —ç–∫–æ–ª–æ–≥–∏–∏']
    }
}

UPSELL_LABELS = {
    'prez': '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è',
    'speech': '–†–µ—á—å'
}

FAQ_ITEMS = [
    {'question': '–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑?', 'answer': '–í—ã–±–µ—Ä–∏—Ç–µ "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑" –∏ —Å–ª–µ–¥—É–π—Ç–µ —à–∞–≥–∞–º. –ú–æ–∂–Ω–æ –∑–∞–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç —Å—Ä–∞–∑—É!'},
    {'question': '–ö–∞–∫ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Å—Ç–æ–∏–º–æ—Å—Ç—å?', 'answer': '–ó–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–∞, —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª—è —Ç–æ—á–Ω–æ–π —Ü–µ–Ω—ã!'},
    {'question': '–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞?', 'answer': '–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π ‚Äî –ø–æ–ª—É—á–∏—Ç–µ 5% –æ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥—Ä—É–∑–µ–π –∫–∞–∫ –±–æ–Ω—É—Å.'},
    {'question': '–ì–∞—Ä–∞–Ω—Ç–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞?', 'answer': '–ê–Ω—Ç–∏–ø–ª–∞–≥–∏–∞—Ç, –ø—Ä–∞–≤–∫–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ 14 –¥–Ω–µ–π, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–æ –∑–∞—â–∏—Ç—ã.'},
    {'question': '–°–∫–∏–¥–∫–∏?', 'answer': '5-15% –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö, 10% –Ω–∞ –ø–µ—Ä–≤—ã–π, —Ä–µ—Ñ–µ—Ä–∞–ª—ã.'},
    {'question': '–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞?', 'answer': '–í –ø—Ä–æ—Ñ–∏–ª–µ —Å—Ç–∞—Ç—É—Å—ã, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞.'}
]

current_pricing_mode = 'light'

# –°–æ—Å—Ç–æ—è–Ω–∏—è
SELECT_MAIN_MENU, SELECT_ORDER_TYPE, VIEW_ORDER_DETAILS, INPUT_TOPIC, SELECT_DEADLINE, INPUT_REQUIREMENTS, INPUT_CONTACT, UPLOAD_FILES, ADD_UPSSELL, ADD_ANOTHER_ORDER, CONFIRM_CART, ADMIN_MENU, PROFILE_MENU, SHOW_PRICE_LIST, PRICE_CALCULATOR, SELECT_CALC_DEADLINE, SELECT_CALC_COMPLEXITY, SHOW_FAQ, FAQ_DETAILS, SHOW_ORDERS, LEAVE_FEEDBACK, INPUT_FEEDBACK = range(22)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def log_user_action(user_id, username, action):
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    USER_LOGS.setdefault(str(user_id), []).append({'timestamp': timestamp, 'action': action, 'username': username})
    save_json(USER_LOGS_FILE, USER_LOGS)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({username}): {action}")

async def answer_callback_query(query, context):
    if not query:
        return
    last_answered_id = context.user_data.get('_last_answered_query')
    if last_answered_id == query.id:
        return
    await query.answer()
    context.user_data['_last_answered_query'] = query.id

def build_contact_link(contact_text):
    if not contact_text:
        return None
    contact = contact_text.strip()
    if not contact:
        return None
    lowered = contact.lower()
    if lowered.startswith(('http://', 'https://', 'tg://', 'mailto:')):
        return contact
    if lowered.startswith(('t.me/', 'telegram.me/')):
        return f"https://{contact}" if lowered.startswith('t.me/') else f"https://{contact.split('://', 1)[-1]}"
    if lowered.startswith('vk.com/'):
        return f"https://{contact}"
    if contact.startswith('@') and re.fullmatch(r'@[A-Za-z0-9_]{4,}', contact):
        return f"https://t.me/{contact[1:]}"
    if re.fullmatch(r'[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}', contact):
        return f"mailto:{contact}"
    if lowered.startswith(('vk.com', 't.me')):
        return f"https://{contact}"
    return None

def get_user_link(user):
    if user.username:
        return f"https://t.me/{user.username}"
    return f"tg://user?id={user.id}"

# –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã
def calculate_price(order_type_key, days_left, complexity_factor=1.0):
    if order_type_key not in PRICES:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø: {order_type_key}")
        return 0
    base = PRICES[order_type_key]['base']
    price = int(base * complexity_factor)
    if current_pricing_mode == 'hard':
        if days_left < 7:
            price *= 1.3
        elif days_left < 15:
            price *= 1.15
    else:
        if days_left < 3:
            price *= 1.3
        elif days_left < 7:
            price *= 1.15
    return int(price)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
    if ADMIN_CHAT_ID:
        await context.bot.send_message(ADMIN_CHAT_ID, f"–û—à–∏–±–∫–∞: {context.error}")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    log_user_action(user.id, user.username, "/start")
    args = update.message.text.split()
    bot_username = (await context.bot.get_me()).username
    ref_link = f"https://t.me/{bot_username}?start={user.id}"
    context.user_data['ref_link'] = ref_link
    if len(args) > 1 and args[1].isdigit():
        referrer_id = int(args[1])
        if referrer_id != user.id:
            REFERALS.setdefault(str(referrer_id), []).append(user.id)
            save_json(REFERRALS_FILE, REFERALS)
            await context.bot.send_message(referrer_id, f"üéâ –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª: {user.first_name}")
    welcome = (
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}! –†–∞–±–æ—Ç–∞–µ–º —Å–æ –≤—Å–µ–º–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º–∏, –∫—Ä–æ–º–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö (—á–µ—Ä—Ç–µ–∂–∏)."
        f" –£–∂–µ 5000+ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ 10% —Å–∫–∏–¥–∫–∞ –Ω–∞ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ üî•\n–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π –¥–ª—è –±–æ–Ω—É—Å–æ–≤: {ref_link}"
    )
    await main_menu(update, context, welcome)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, message=None):
    user = update.effective_user
    log_user_action(user.id, user.username, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    text = message or "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
    keyboard = [
        [InlineKeyboardButton("üìù –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data='make_order')],
        [InlineKeyboardButton("üí≤ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç", callback_data='price_list'), InlineKeyboardButton("üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", callback_data='price_calculator')],
        [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data='profile'), InlineKeyboardButton("‚ùì FAQ", callback_data='faq')],
        [InlineKeyboardButton("üìû –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", url='https://t.me/Thisissaymoon')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.callback_query:
        query = update.callback_query
        await answer_callback_query(query, context)
        try:
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
        except TelegramError as e:
            if "message is not modified" in str(e).lower():
                pass
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    else:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    return SELECT_MAIN_MENU

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def main_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await answer_callback_query(query, context)
    data = query.data
    user = update.effective_user
    log_user_action(user.id, user.username, f"–í—ã–±–æ—Ä –≤ –º–µ–Ω—é: {data}")
    if data == 'make_order':
        return await select_order_type(update, context)
    elif data == 'price_list':
        return await show_price_list(update, context)
    elif data == 'price_calculator':
        return await price_calculator(update, context)
    elif data == 'profile':
        return await show_profile(update, context)
    elif data == 'faq':
        return await show_faq(update, context)
    await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    return await main_menu(update, context)
    return SELECT_MAIN_MENU

# –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞–∫–∞–∑–∞
async def select_order_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await answer_callback_query(query, context)
    data = query.data if query else None
    user = update.effective_user
    log_user_action(user.id, user.username, "–í—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞–∫–∞–∑–∞")
    if data == 'back_to_main':
        return await main_menu(update, context)
    text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã (–¥–æ–±–∞–≤—å—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤ –∫–æ—Ä–∑–∏–Ω—É –¥–ª—è —Å–∫–∏–¥–∫–∏!):"
    keyboard = [[InlineKeyboardButton(f"{val['icon']} {val['name']}", callback_data=f'type_{key}')] for key, val in ORDER_TYPES.items()]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ú–µ–Ω—é", callback_data='back_to_main')])
    reply_markup = InlineKeyboardMarkup(keyboard)
    try:
        await query.edit_message_text(text, reply_markup=reply_markup)
    except TelegramError as e:
        if "message is not modified" in str(e).lower():
            pass
        else:
            raise
    return SELECT_ORDER_TYPE

# –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ —Ç–∏–ø–µ –∑–∞–∫–∞–∑–∞
async def view_order_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await answer_callback_query(query, context)
    data = query.data
    if data.startswith('order_'):
        key = data[6:]
        context.user_data['current_order_type'] = key
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É:")
        return INPUT_TOPIC
    elif data == 'select_order_type':
        return await select_order_type(update, context)
    elif data.startswith('type_'):
        key = data[5:]
        if key not in ORDER_TYPES:
            await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø.")
            return SELECT_ORDER_TYPE
        val = ORDER_TYPES[key]
        text = f"{val['icon']} *{val['name']}*\n\n{val['description']}\n{val['details']}\n–ü—Ä–∏–º–µ—Ä—ã: {', '.join(val['examples'])}\n\n–ó–∞–∫–∞–∑–∞—Ç—å? (–î–æ–±–∞–≤—å—Ç–µ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é/—Ä–µ—á—å –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞!)"
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ó–∞–∫–∞–∑–∞—Ç—å", callback_data=f'order_{key}')],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='select_order_type')]
        ]
        await query.edit_message_text(text, parse_mode=ParseMode.MARKDOWN, reply_markup=InlineKeyboardMarkup(keyboard))
        return VIEW_ORDER_DETAILS

# –í–≤–æ–¥ —Ç–µ–º—ã
async def input_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['topic'] = update.message.text
    user = update.effective_user
    log_user_action(user.id, user.username, f"–¢–µ–º–∞: {update.message.text}")
    text = "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ —Å–¥–∞—á–∏ (–¥–æ–ª—å—à–µ = –¥–µ—à–µ–≤–ª–µ + –±–æ–Ω—É—Å!):"
    today = datetime.now()
    keyboard = []
    for i in range(1, 31, 5):  
        row = []
        for j in range(i, min(i+5, 31)):
            date = today + timedelta(days=j)
            button_text = f"{date.day} {date.strftime('%b')} ({j} –¥–Ω–µ–π)"
            row.append(InlineKeyboardButton(button_text, callback_data=f'deadline_{j}'))
        keyboard.append(row)
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f'type_{context.user_data["current_order_type"]}')])
    await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    return SELECT_DEADLINE

# –í—ã–±–æ—Ä —Å—Ä–æ–∫–∞
async def select_deadline(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await answer_callback_query(query, context)
    data = query.data
    if data.startswith('deadline_'):
        days = int(data[9:])
        context.user_data['days_left'] = days
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è (–∏–ª–∏ /skip):")
        return INPUT_REQUIREMENTS
    elif data.startswith('type_'):
        return await view_order_details(update, context)
    return SELECT_DEADLINE

# –í–≤–æ–¥ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
async def input_requirements(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['requirements'] = update.message.text
    return await ask_contact(update, context)

async def skip_requirements(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['requirements'] = '–ù–µ—Ç'
    return await ask_contact(update, context)

async def ask_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç, –∫—É–¥–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É –Ω–∞–ø–∏—Å–∞—Ç—å (Telegram, VK –∏–ª–∏ –ø–æ—á—Ç–∞)."
        " –ë–µ–∑ —ç—Ç–æ–≥–æ –º—ã –Ω–µ —Å–º–æ–∂–µ–º –ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑. –ü—Ä–∏–º–µ—Ä: https://t.me/username"
    )
    await update.message.reply_text(text)
    return INPUT_CONTACT

async def input_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact_text = update.message.text.strip()
    link = build_contact_link(contact_text)
    if not link:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç (—Å—Å—ã–ª–∫–∞ –Ω–∞ Telegram/VK –∏–ª–∏ e-mail)."
            " –ù–∞–ø—Ä–∏–º–µ—Ä: https://t.me/username –∏–ª–∏ name@example.com"
        )
        return INPUT_CONTACT
    context.user_data['contact'] = contact_text
    context.user_data['contact_link'] = link
    context.user_data['pending_files'] = []
    return await prompt_file_upload(update, context)

async def prompt_file_upload(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –∑–∞–¥–∞–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å). –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø–æ –æ–¥–Ω–æ–º—É."
        " –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ ‚Äî –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /done –∏–ª–∏ /skip."
    )
    await update.message.reply_text(text)
    return UPLOAD_FILES

async def handle_file_upload(update: Update, context: ContextTypes.DEFAULT_TYPE):
    files_list = context.user_data.setdefault('pending_files', [])
    if update.message.document:
        document = update.message.document
        files_list.append({
            'type': 'document',
            'file_id': document.file_id,
            'file_name': document.file_name,
        })
        await update.message.reply_text(f"–§–∞–π–ª {document.file_name} —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –µ—â–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /done.")
    elif update.message.photo:
        photo = update.message.photo[-1]
        files_list.append({
            'type': 'photo',
            'file_id': photo.file_id,
        })
        await update.message.reply_text("–§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ. –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –µ—â–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /done.")
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /done.")
    return UPLOAD_FILES

async def skip_file_upload(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.setdefault('pending_files', [])
    return await add_upsell(update, context)

async def remind_file_upload(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ /done.")
    return UPLOAD_FILES

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø—É—Å–ª—É–≥
async def add_upsell(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = "–î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥–∏? (–ö–ª–∏–µ–Ω—Ç—ã, –¥–æ–±–∞–≤–ª—è—é—â–∏–µ, –ø–æ–ª—É—á–∞—é—Ç 5% —Å–∫–∏–¥–∫–∏ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑!)"
    keyboard = [
        [InlineKeyboardButton("–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è (+2000‚ÇΩ)", callback_data='add_prez')],
        [InlineKeyboardButton("–†–µ—á—å (+1000‚ÇΩ)", callback_data='add_speech')],
        [InlineKeyboardButton("–ë–µ–∑ –¥–æ–ø–æ–≤", callback_data='no_upsell')]
    ]
    if update.message:
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        query = update.callback_query
        await answer_callback_query(query, context)
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    return ADD_UPSSELL

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ø—É—Å–ª—É–≥
async def upsell_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await answer_callback_query(query, context)
    data = query.data
    upsells = context.user_data.setdefault('upsells', set())  
    added = False
    if data == 'add_prez':
        if 'prez' not in upsells:
            upsells.add('prez')
            added = True
    elif data == 'add_speech':
        if 'speech' not in upsells:
            upsells.add('speech')
            added = True
    elif data == 'no_upsell':
        return await process_order(update, context)
    text = "–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ? (–ü–æ–ª–Ω—ã–π –ø–∞–∫–µ—Ç —ç–∫–æ–Ω–æ–º–∏—Ç –≤—Ä–µ–º—è!)" if added else "–£–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ. –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ?"
    keyboard = [
        [InlineKeyboardButton("–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è (+2000‚ÇΩ)", callback_data='add_prez')],
        [InlineKeyboardButton("–†–µ—á—å (+1000‚ÇΩ)", callback_data='add_speech')],
        [InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data='no_upsell')]
    ]
    try:
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    except TelegramError as e:
        if "message is not modified" in str(e).lower():
            pass
    return ADD_UPSSELL

async def process_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    type_key = context.user_data.get('current_order_type')
    if not type_key or type_key not in ORDER_TYPES:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∑–∞–∫–∞–∑–∞.")
        return ConversationHandler.END
    topic = context.user_data.get('topic', '–ë–µ–∑ —Ç–µ–º—ã')
    days_left = context.user_data.get('days_left', 14)
    requirements = context.user_data.get('requirements', '–ù–µ—Ç')
    contact = context.user_data.get('contact', '')
    contact_link = context.user_data.get('contact_link')
    files = list(context.user_data.get('pending_files', []))
    upsells = list(context.user_data.get('upsells', set()))
    price = calculate_price(type_key, days_left)
    extra = len(upsells) * 1000
    price += extra
    order = {
        'type': type_key,
        'topic': topic,
        'deadline_days': days_left,
        'requirements': requirements,
        'upsells': upsells,
        'price': price,
        'status': '–Ω–æ–≤—ã–π',
        'contact': contact,
        'contact_link': contact_link,
        'files': files,
    }
    context.user_data.setdefault('cart', []).append(order)
    context.user_data.pop('upsells', None)
    context.user_data.pop('requirements', None)
    context.user_data.pop('days_left', None)
    context.user_data.pop('topic', None)
    context.user_data.pop('current_order_type', None)
    context.user_data.pop('contact', None)
    context.user_data.pop('contact_link', None)
    context.user_data.pop('pending_files', None)
    return await add_another_order(update, context)

# –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∑–∞–∫–∞–∑
async def add_another_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    text = "–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∑–∞–∫–∞–∑? (–ù–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤ = 10% —Å–∫–∏–¥–∫–∞!)"
    keyboard = [
        [InlineKeyboardButton("–î–∞", callback_data='add_another_yes')],
        [InlineKeyboardButton("–ù–µ—Ç, –æ—Ñ–æ—Ä–º–∏—Ç—å", callback_data='confirm_cart')]
    ]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    return ADD_ANOTHER_ORDER

async def add_another_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await answer_callback_query(query, context)
    data = query.data
    if data == 'add_another_yes':
        return await select_order_type(update, context)
    elif data == 'confirm_cart':
        return await confirm_cart(update, context)
    return ADD_ANOTHER_ORDER

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
async def confirm_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    cart = context.user_data.get('cart', [])
    if not cart:
        await query.edit_message_text("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return await main_menu(update, context)
    text = "–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ (–ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–≥–æ –±–æ–Ω—É—Å–∞!):\n"
    total = 0
    for i, order in enumerate(cart, 1):
        order_name = ORDER_TYPES.get(order['type'], {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        contact_display = order.get('contact', '–ù–µ —É–∫–∞–∑–∞–Ω')
        text += (
            f"{i}. {order_name} - {order['topic']} - {order['price']} ‚ÇΩ\n"
            f"   –°—Ä–æ–∫: {order.get('deadline_days', 0)} –¥–Ω–µ–π\n"
            f"   –ö–æ–Ω—Ç–∞–∫—Ç: {contact_display}\n"
        )
        total += order['price']
    if len(cart) > 1:
        discount = total * 0.1
        total -= discount
        text += f"–°–∫–∏–¥–∫–∞ –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤: -{discount} ‚ÇΩ\n"
    text += f"–ò—Ç–æ–≥–æ: {total} ‚ÇΩ\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?"
    keyboard = [
        [InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data='place_order')],
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel_cart')]
    ]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    return CONFIRM_CART

async def confirm_cart_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await answer_callback_query(query, context)
    data = query.data
    if data == 'place_order':
        user_id = str(update.effective_user.id)
        user_orders = ORDERS.setdefault(user_id, [])
        existing_ids = [order.get('order_id', 0) for order in user_orders]
        order_id = max(existing_ids, default=0) + 1
        for order in context.user_data['cart']:
            order['order_id'] = order_id
            user_orders.append(order)
            order_id += 1
        save_json(ORDERS_FILE, ORDERS)
        text = (
            "–ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏."
            " [–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä](https://t.me/Thisissaymoon) —É–∂–µ –ø–æ–ª—É—á–∏–ª –¥–µ—Ç–∞–ª–∏."
        )
        await query.edit_message_text(text, parse_mode=ParseMode.MARKDOWN)
        if ADMIN_CHAT_ID:
            await notify_admin_about_order(update, context, context.user_data['cart'])
        context.user_data.pop('cart', None)
        return await main_menu(update, context, "–°–ø–∞—Å–∏–±–æ! –•–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –µ—â–µ?")
    elif data == 'cancel_cart':
        context.user_data.pop('cart', None)
        return await main_menu(update, context, "–ö–æ—Ä–∑–∏–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –µ—â–µ?")
    return CONFIRM_CART

async def notify_admin_about_order(update: Update, context: ContextTypes.DEFAULT_TYPE, orders):
    if not ADMIN_CHAT_ID:
        return
    user = update.effective_user
    user_id = str(user.id)
    user_link = get_user_link(user)
    user_name = html.escape(user.full_name or user.first_name or str(user.id))
    header = f"üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç <a href=\"{html.escape(user_link, quote=True)}\">{user_name}</a> (ID: {user_id})"
    blocks = []
    for order in orders:
        order_name = ORDER_TYPES.get(order.get('type'), {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        contact_display = order.get('contact', '–ù–µ —É–∫–∞–∑–∞–Ω')
        contact_link = order.get('contact_link')
        if contact_link:
            contact_html = f"<a href=\"{html.escape(contact_link, quote=True)}\">{html.escape(contact_display)}</a>"
        else:
            contact_html = html.escape(contact_display)
        upsell_titles = [UPSELL_LABELS.get(u, u) for u in order.get('upsells', [])]
        upsell_text = ', '.join(upsell_titles) if upsell_titles else '–Ω–µ—Ç'
        block = (
            f"#{order.get('order_id', 'N/A')} ‚Äî {html.escape(order_name)}\n"
            f"–¢–µ–º–∞: {html.escape(order.get('topic', '–ë–µ–∑ —Ç–µ–º—ã'))}\n"
            f"–°—Ä–æ–∫: {order.get('deadline_days', 0)} –¥–Ω–µ–π\n"
            f"–ö–æ–Ω—Ç–∞–∫—Ç –∫–ª–∏–µ–Ω—Ç–∞: {contact_html}\n"
            f"–î–æ–ø—ã: {html.escape(upsell_text)}\n"
            f"–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: {html.escape(order.get('requirements', '–ù–µ—Ç'))}\n"
            f"–°—É–º–º–∞: {order.get('price', 0)} ‚ÇΩ"
        )
        if order.get('files'):
            block += f"\n–§–∞–π–ª—ã: {len(order['files'])} —à—Ç."
        blocks.append(block)
    message = header + "\n\n" + "\n\n".join(blocks)
    await context.bot.send_message(ADMIN_CHAT_ID, message, parse_mode=ParseMode.HTML)
    for order in orders:
        order_name = ORDER_TYPES.get(order.get('type'), {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        caption_base = f"–§–∞–π–ª—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order.get('order_id', 'N/A')} ‚Äî {order_name}"
        for file_info in order.get('files', []):
            if file_info.get('type') == 'document':
                caption = caption_base
                if file_info.get('file_name'):
                    caption += f"\n{file_info['file_name']}"
                await context.bot.send_document(ADMIN_CHAT_ID, file_info['file_id'], caption=caption)
            elif file_info.get('type') == 'photo':
                await context.bot.send_photo(ADMIN_CHAT_ID, file_info['file_id'], caption=caption_base)

# –ü–æ–∫–∞–∑ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞
async def show_price_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await answer_callback_query(query, context)
    data = query.data
    if data.startswith('price_detail_'):
        key = data[13:]
        val = ORDER_TYPES.get(key, {})
        if not val:
            await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø.")
            return SHOW_PRICE_LIST
        prices = PRICES.get(key, {'min': 0, 'max': 0})
        text = f"{val.get('icon', '')} *{val.get('name', '')}*\n\n{val.get('description', '')}\n{val.get('details', '')}\n–ü—Ä–∏–º–µ—Ä—ã: {', '.join(val.get('examples', []))}\n–¶–µ–Ω–∞: {prices['min']}-{prices['max']} ‚ÇΩ\n\n–ó–∞–∫–∞–∂–∏—Ç–µ —Å–æ —Å–∫–∏–¥–∫–æ–π!"
        keyboard = [
            [InlineKeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å", callback_data='price_calculator')],
            [InlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å", callback_data=f'type_{key}')],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='price_list')]
        ]
        await query.edit_message_text(text, parse_mode=ParseMode.MARKDOWN, reply_markup=InlineKeyboardMarkup(keyboard))
        return SHOW_PRICE_LIST
    elif data == 'price_calculator':
        return await price_calculator(update, context)
    elif data == 'back_to_main':
        return await main_menu(update, context)
    user = update.effective_user
    log_user_action(user.id, user.username, "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç")
    text = "üí≤ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç (10% —Å–∫–∏–¥–∫–∞ —Å–µ–≥–æ–¥–Ω—è! üî•):\n\n"
    for key, val in ORDER_TYPES.items():
        prices = PRICES.get(key, {'base': 0})
        text += f"{val['icon']} *{val['name']}* ‚Äî –æ—Ç {prices['base']} ‚ÇΩ\n"
    keyboard = [[InlineKeyboardButton(f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ {val['name']}", callback_data=f'price_detail_{key}')] for key, val in ORDER_TYPES.items()]
    keyboard.append([InlineKeyboardButton("üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ü–µ–Ω—É", callback_data='price_calculator')])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ú–µ–Ω—é", callback_data='back_to_main')])
    await query.edit_message_text(text, parse_mode=ParseMode.MARKDOWN, reply_markup=InlineKeyboardMarkup(keyboard))
    return SHOW_PRICE_LIST

# –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ü–µ–Ω
async def price_calculator(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await answer_callback_query(query, context)
    data = query.data
    if data.startswith('calc_type_'):
        key = data[10:]
        context.user_data['calc_type'] = key
        text = f"–¢–∏–ø: {ORDER_TYPES.get(key, {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ (–¥–æ–ª—å—à–µ = –¥–µ—à–µ–≤–ª–µ):"
        keyboard = [
            [InlineKeyboardButton("3 –¥–Ω—è (+30%)", callback_data='calc_dead_3')],
            [InlineKeyboardButton("7 –¥–Ω–µ–π (+15%)", callback_data='calc_dead_7'), InlineKeyboardButton("14 –¥–Ω–µ–π (–±–∞–∑–æ–≤–∞—è)", callback_data='calc_dead_14')],
            [InlineKeyboardButton("30 –¥–Ω–µ–π (—Å–∫–∏–¥–∫–∞!)", callback_data='calc_dead_30')],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='price_calculator')]
        ]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
        return SELECT_CALC_DEADLINE
    elif data == 'back_to_main':
        return await main_menu(update, context)
    user = update.effective_user
    log_user_action(user.id, user.username, "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä")
    text = "üßÆ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:"
    keyboard = [[InlineKeyboardButton(f"{v['icon']} {v['name']}", callback_data=f'calc_type_{k}')] for k, v in ORDER_TYPES.items()]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ú–µ–Ω—é", callback_data='back_to_main')])
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    return PRICE_CALCULATOR

async def calc_select_deadline(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await answer_callback_query(query, context)
    data = query.data
    if data.startswith('calc_dead_'):
        days = int(data[10:])
        context.user_data['calc_days'] = days
        text = f"–°—Ä–æ–∫: {days} –¥–Ω–µ–π\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å:"
        keyboard = [
            [InlineKeyboardButton("–ü—Ä–æ—Å—Ç–∞—è (–±–∞–∑–æ–≤–∞—è)", callback_data='calc_comp_1.0')],
            [InlineKeyboardButton("–°—Ä–µ–¥–Ω—è—è (+10%)", callback_data='calc_comp_1.1'), InlineKeyboardButton("–°–ª–æ–∂–Ω–∞—è (+30%)", callback_data='calc_comp_1.3')],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=f'calc_type_{context.user_data["calc_type"]}')]
        ]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
        return SELECT_CALC_COMPLEXITY
    return SELECT_CALC_DEADLINE

async def calc_select_complexity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await answer_callback_query(query, context)
    data = query.data
    if data.startswith('calc_comp_'):
        comp = float(data[10:])
        key = context.user_data.get('calc_type')
        days = context.user_data.get('calc_days', 14)
        price = calculate_price(key, days, comp)
        name = ORDER_TYPES.get(key, {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        text = f"–†–∞—Å—á–µ—Ç: {name}\n–°—Ä–æ–∫: {days} –¥–Ω–µ–π\n–°–ª–æ–∂–Ω–æ—Å—Ç—å: {int((comp-1)*100)}%\n–¶–µ–Ω–∞: {price} ‚ÇΩ (–°–∫–∏–¥–∫–∞ —Å–µ–≥–æ–¥–Ω—è!)\n\n–ó–∞–∫–∞–∑–∞—Ç—å?"
        keyboard = [
            [InlineKeyboardButton("üìù –ó–∞–∫–∞–∑–∞—Ç—å", callback_data=f'type_{key}')],
            [InlineKeyboardButton("–ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å", callback_data='price_calculator'), InlineKeyboardButton("–ú–µ–Ω—é", callback_data='back_to_main')]
        ]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
        return PRICE_CALCULATOR
    return SELECT_CALC_COMPLEXITY

# –ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è
async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await answer_callback_query(query, context)
    data = query.data
    user = update.effective_user
    user_id = str(user.id)
    if data == 'my_orders':
        return await show_orders(update, context)
    elif data == 'leave_feedback':
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–∑—ã–≤:")
        return INPUT_FEEDBACK
    elif data == 'back_to_main':
        return await main_menu(update, context)
    log_user_action(user.id, user.username, "–ü—Ä–æ—Ñ–∏–ª—å")
    orders_count = len(ORDERS.get(user_id, []))
    feedbacks_count = len(FEEDBACKS.get(user_id, []))
    refs_count = len(REFERALS.get(user_id, []))
    ref_link = context.user_data.get('ref_link', '–ù–µ—Ç —Å—Å—ã–ª–∫–∏')
    text = f"üë§ –ü—Ä–æ—Ñ–∏–ª—å {user.first_name}\n\n–ó–∞–∫–∞–∑–æ–≤: {orders_count}\n–û—Ç–∑—ã–≤–æ–≤: {feedbacks_count}\n–†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {refs_count}\n–†–µ—Ñ. —Å—Å—ã–ª–∫–∞: {ref_link}\n\n–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∑–∞ –±–æ–Ω—É—Å—ã!"
    keyboard = [
        [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data='my_orders')],
        [InlineKeyboardButton("‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data='leave_feedback')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ú–µ–Ω—é", callback_data='back_to_main')]
    ]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    return PROFILE_MENU

# –ü–æ–∫–∞–∑ –∑–∞–∫–∞–∑–æ–≤
async def show_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await answer_callback_query(query, context)
    data = query.data
    if data == 'profile':
        return await show_profile(update, context)
    user_id = str(update.effective_user.id)
    user_orders = ORDERS.get(user_id, [])
    if not user_orders:
        text = "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤. –°–¥–µ–ª–∞–π—Ç–µ –∑–∞–∫–∞–∑ —Å–µ–π—á–∞—Å!"
    else:
        text = "–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n"
        for order in user_orders:
            name = ORDER_TYPES.get(order.get('type'), {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
            text += f"#{order.get('order_id', 'N/A')}: {name} - {order.get('status', '–Ω–æ–≤—ã–π')}\n"
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='profile')]]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    return SHOW_ORDERS

# –í–≤–æ–¥ –æ—Ç–∑—ã–≤–∞
async def input_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    feedback = update.message.text
    FEEDBACKS.setdefault(user_id, []).append(feedback)
    save_json(FEEDBACKS_FILE, FEEDBACKS)
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –î–æ–±–∞–≤–ª–µ–Ω—ã –±–æ–Ω—É—Å–Ω—ã–µ –±–∞–ª–ª—ã.")
    return await show_profile(update, context)

# –ü–æ–∫–∞–∑ FAQ
async def show_faq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await answer_callback_query(query, context)
    data = query.data
    if data.startswith('faq_'):
        idx = int(data[4:])
        item = FAQ_ITEMS[idx]
        text = f"‚ùì {item['question']}\n\n{item['answer']}"
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ FAQ", callback_data='faq')],
                    [InlineKeyboardButton("–ú–µ–Ω—é", callback_data='back_to_main')]]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
        return FAQ_DETAILS
    elif data == 'back_to_main':
        return await main_menu(update, context)
    user = update.effective_user
    log_user_action(user.id, user.username, "FAQ")
    text = "‚ùì FAQ: –í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å"
    keyboard = [[InlineKeyboardButton(item['question'], callback_data=f'faq_{i}')] for i, item in enumerate(FAQ_ITEMS)]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ú–µ–Ω—é", callback_data='back_to_main')])
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    return SHOW_FAQ

# –ü–æ–∫–∞–∑ –∞–¥–º–∏–Ω –º–µ–Ω—é
async def show_admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üìã –ó–∞–∫–∞–∑—ã", callback_data='admin_orders')],
        [InlineKeyboardButton("üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data='admin_users'), InlineKeyboardButton("üìä –õ–æ–≥–∏", callback_data='admin_logs')],
        [InlineKeyboardButton("üí≤ –¶–µ–Ω—ã", callback_data='admin_prices')],
        [InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç", callback_data='admin_export')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –í—ã—Ö–æ–¥", callback_data='back_to_main')]
    ]
    text = "üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å"
    if update.callback_query:
        query = update.callback_query
        await answer_callback_query(query, context)
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    return ADMIN_MENU

def find_order_for_admin(user_id, order_id):
    user_orders = ORDERS.get(user_id, [])
    for order in user_orders:
        if str(order.get('order_id')) == str(order_id):
            return order, user_orders
    return None, user_orders

async def admin_show_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    text_lines = ["üìã –ó–∞–∫–∞–∑—ã (–≤—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å):"]
    keyboard = []
    has_orders = False
    user_ids = sorted(
        ORDERS.keys(),
        key=lambda x: int(x) if str(x).lstrip('-').isdigit() else str(x)
    ) if ORDERS else []
    for uid in user_ids:
        for order in sorted(ORDERS.get(uid, []), key=lambda o: o.get('order_id', 0)):
            order_id = order.get('order_id')
            if order_id is None:
                continue
            status = order.get('status', '–Ω–æ–≤—ã–π')
            button_text = f"#{order_id} ¬∑ {uid} ¬∑ {status}"
            keyboard.append([InlineKeyboardButton(button_text, callback_data=f'admin_view_{uid}_{order_id}')])
            has_orders = True
    if not has_orders:
        text_lines.append("–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
    keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='admin_menu')])
    await query.edit_message_text("\n".join(text_lines), reply_markup=InlineKeyboardMarkup(keyboard))
    return ADMIN_MENU

async def admin_view_order(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: str, order_id: str):
    query = update.callback_query
    order, _ = find_order_for_admin(user_id, order_id)
    if not order:
        await query.edit_message_text(
            "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='admin_orders')]])
        )
        return ADMIN_MENU
    order_name = ORDER_TYPES.get(order.get('type'), {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
    contact_display = order.get('contact', '–ù–µ —É–∫–∞–∑–∞–Ω')
    contact_link = order.get('contact_link')
    if contact_link:
        contact_html = f"<a href=\"{html.escape(contact_link, quote=True)}\">{html.escape(contact_display)}</a>"
    else:
        contact_html = html.escape(contact_display)
    upsell_titles = [UPSELL_LABELS.get(u, u) for u in order.get('upsells', [])]
    upsell_text = ', '.join(upsell_titles) if upsell_titles else '–Ω–µ—Ç'
    files_count = len(order.get('files', [])) if order.get('files') else 0
    user_link = f"tg://user?id={user_id}"
    text = (
        f"–ó–∞–∫–∞–∑ #{order.get('order_id', 'N/A')} –æ—Ç <a href=\"{user_link}\">{user_id}</a>\n"
        f"–¢–∏–ø: {html.escape(order_name)}\n"
        f"–°—Ç–∞—Ç—É—Å: {html.escape(order.get('status', '–Ω–æ–≤—ã–π'))}\n"
        f"–¢–µ–º–∞: {html.escape(order.get('topic', '–ë–µ–∑ —Ç–µ–º—ã'))}\n"
        f"–°—Ä–æ–∫: {order.get('deadline_days', 0)} –¥–Ω–µ–π\n"
        f"–ö–æ–Ω—Ç–∞–∫—Ç: {contact_html}\n"
        f"–î–æ–ø—ã: {html.escape(upsell_text)}\n"
        f"–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: {html.escape(order.get('requirements', '–ù–µ—Ç'))}\n"
        f"–°—É–º–º–∞: {order.get('price', 0)} ‚ÇΩ\n"
        f"–§–∞–π–ª—ã: {files_count}"
    )
    keyboard = [
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f'admin_cancel_{user_id}_{order_id}')],
        [InlineKeyboardButton("–£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f'admin_delete_{user_id}_{order_id}')],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='admin_orders')]
    ]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.HTML)
    return ADMIN_MENU

async def admin_cancel_order(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: str, order_id: str):
    query = update.callback_query
    order, _ = find_order_for_admin(user_id, order_id)
    if not order:
        await query.edit_message_text(
            "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='admin_orders')]])
        )
        return ADMIN_MENU
    order['status'] = '–æ—Ç–º–µ–Ω–µ–Ω'
    save_json(ORDERS_FILE, ORDERS)
    return await admin_view_order(update, context, user_id, order_id)

async def admin_delete_order(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: str, order_id: str):
    query = update.callback_query
    order, user_orders = find_order_for_admin(user_id, order_id)
    if not order:
        await query.edit_message_text(
            "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='admin_orders')]])
        )
        return ADMIN_MENU
    user_orders[:] = [ordr for ordr in user_orders if str(ordr.get('order_id')) != str(order_id)]
    if not user_orders:
        ORDERS.pop(user_id, None)
    save_json(ORDERS_FILE, ORDERS)
    return await admin_show_orders(update, context)

# –ê–¥–º–∏–Ω —Å—Ç–∞—Ä—Ç
async def admin_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_CHAT_ID:
        await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    user = update.effective_user
    log_user_action(user.id, user.username, "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å")
    return await show_admin_menu(update, context)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω-–º–µ–Ω—é
async def admin_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await answer_callback_query(query, context)
    data = query.data
    if data == 'admin_menu':
        return await show_admin_menu(update, context)
    if data == 'admin_orders':
        return await admin_show_orders(update, context)
    if data.startswith('admin_view_'):
        _, _, payload = data.partition('admin_view_')
        parts = payload.split('_')
        if len(parts) >= 2:
            user_id, order_id = parts[0], parts[1]
            return await admin_view_order(update, context, user_id, order_id)
    if data.startswith('admin_cancel_'):
        _, _, payload = data.partition('admin_cancel_')
        parts = payload.split('_')
        if len(parts) >= 2:
            user_id, order_id = parts[0], parts[1]
            return await admin_cancel_order(update, context, user_id, order_id)
    if data.startswith('admin_delete_'):
        _, _, payload = data.partition('admin_delete_')
        parts = payload.split('_')
        if len(parts) >= 2:
            user_id, order_id = parts[0], parts[1]
            return await admin_delete_order(update, context, user_id, order_id)
    text = ""
    keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='admin_menu')]]
    if data == 'admin_users':
        text = "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:\n" + "\n".join(f"ID: {uid}" for uid in ORDERS.keys())
    elif data == 'admin_logs':
        text = "üìä –õ–æ–≥–∏ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 10):\n"
        for uid, logs in list(USER_LOGS.items())[-10:]:
            if logs:
                text += f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {uid}: {logs[-1]['action']}\n"
    elif data == 'admin_prices':
        text = f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {current_pricing_mode}\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ä–µ–∂–∏–º (hard/light):"
        context.user_data['admin_state'] = 'change_mode'
    elif data == 'admin_export':
        df = pd.DataFrame([{'user_id': uid, **ord} for uid, ords in ORDERS.items() for ord in ords])
        export_file = os.path.join(DATA_DIR, 'orders_export.csv')
        df.to_csv(export_file, index=False)
        await context.bot.send_document(ADMIN_CHAT_ID, open(export_file, 'rb'))
        os.remove(export_file)
        text = "üì§ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!"
    elif data == 'back_to_main':
        return await main_menu(update, context)
    await query.edit_message_text(text or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é.", reply_markup=InlineKeyboardMarkup(keyboard))
    return ADMIN_MENU

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞
async def admin_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = context.user_data.get('admin_state')
    if state == 'change_mode':
        global current_pricing_mode
        current_pricing_mode = update.message.text.lower()
        await update.message.reply_text("–†–µ–∂–∏–º –∏–∑–º–µ–Ω–µ–Ω!")
        context.user_data.pop('admin_state')
        return await show_admin_menu(update, context)
    return ADMIN_MENU

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start), CommandHandler('admin', admin_start)],
        states={
            SELECT_MAIN_MENU: [CallbackQueryHandler(main_menu_handler)],
            SELECT_ORDER_TYPE: [CallbackQueryHandler(select_order_type)],
            VIEW_ORDER_DETAILS: [CallbackQueryHandler(view_order_details)],
            INPUT_TOPIC: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_topic)],
            SELECT_DEADLINE: [CallbackQueryHandler(select_deadline)],
            INPUT_REQUIREMENTS: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_requirements), CommandHandler('skip', skip_requirements)],
            INPUT_CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_contact)],
            UPLOAD_FILES: [
                MessageHandler((filters.Document.ALL | filters.PHOTO), handle_file_upload),
                CommandHandler('skip', skip_file_upload),
                CommandHandler('done', skip_file_upload),
                MessageHandler(filters.TEXT & ~filters.COMMAND, remind_file_upload),
            ],
            ADD_UPSSELL: [CallbackQueryHandler(upsell_handler)],
            ADD_ANOTHER_ORDER: [CallbackQueryHandler(add_another_handler)],
            CONFIRM_CART: [CallbackQueryHandler(confirm_cart_handler)],
            ADMIN_MENU: [CallbackQueryHandler(admin_menu_handler), MessageHandler(filters.TEXT & ~filters.COMMAND, admin_message)],
            PROFILE_MENU: [CallbackQueryHandler(show_profile)],
            SHOW_PRICE_LIST: [CallbackQueryHandler(show_price_list)],
            PRICE_CALCULATOR: [CallbackQueryHandler(price_calculator)],
            SELECT_CALC_DEADLINE: [CallbackQueryHandler(calc_select_deadline)],
            SELECT_CALC_COMPLEXITY: [CallbackQueryHandler(calc_select_complexity)],
            SHOW_FAQ: [CallbackQueryHandler(show_faq)],
            FAQ_DETAILS: [CallbackQueryHandler(show_faq)],
            SHOW_ORDERS: [CallbackQueryHandler(show_orders)],
            INPUT_FEEDBACK: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_feedback)],
        },
        fallbacks=[CommandHandler('start', start)],
    )
    application.add_handler(conv_handler)
    application.add_error_handler(error_handler)
    application.run_polling(drop_pending_updates=True)

if __name__ == '__main__':
    main()
