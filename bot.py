from __future__ import annotations

import asyncio
import html
import json
import logging
import os
from dataclasses import dataclass, asdict, field
from datetime import datetime, timedelta
from pathlib import Path
from typing import Dict, Iterable, List, Optional

import pandas as pd
from dotenv import load_dotenv
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, Update
from telegram.constants import ParseMode
from telegram.error import BadRequest
from telegram.ext import (
    ApplicationBuilder,
    CallbackQueryHandler,
    CommandHandler,
    ContextTypes,
    ConversationHandler,
    MessageHandler,
    filters,
)

from config import (
    BOT_TOKEN,
    DEFAULT_ADMIN_CHAT_ID as CONFIG_ADMIN_CHAT_ID,
    DEFAULT_ADMIN_USERNAME as CONFIG_ADMIN_USERNAME,
    DEFAULT_PRICING_MODE,
    MANAGER_CONTACT_URL as CONFIG_MANAGER_CONTACT_URL,
    ORDER_STATUS_TITLES,
    OWNER_CHAT_ID as CONFIG_OWNER_CHAT_ID,
    OWNER_USERNAME as CONFIG_OWNER_USERNAME,
    SECONDARY_ADMINS,
    WELCOME_MESSAGE,
)

load_dotenv()

TELEGRAM_BOT_TOKEN = (os.getenv("TELEGRAM_BOT_TOKEN") or BOT_TOKEN or "").strip()

owner_id_env = os.getenv("OWNER_CHAT_ID")
admin_id_env = os.getenv("ADMIN_CHAT_ID")

try:
    OWNER_CHAT_ID_DEFAULT = (
        int(owner_id_env) if owner_id_env is not None else int(CONFIG_OWNER_CHAT_ID or 0)
    )
except ValueError:
    OWNER_CHAT_ID_DEFAULT = int(CONFIG_OWNER_CHAT_ID or 0)

try:
    ADMIN_CHAT_ID_DEFAULT = (
        int(admin_id_env) if admin_id_env is not None else int(CONFIG_ADMIN_CHAT_ID or 0)
    )
except ValueError:
    ADMIN_CHAT_ID_DEFAULT = int(CONFIG_ADMIN_CHAT_ID or 0)

DEFAULT_OWNER_USERNAME = (
    os.getenv("OWNER_USERNAME") or CONFIG_OWNER_USERNAME or ""
).strip()
ADMIN_USERNAME_DEFAULT = (
    os.getenv("ADMIN_USERNAME") or CONFIG_ADMIN_USERNAME or ""
).strip()

MANAGER_CONTACT_LINK = (
    os.getenv("MANAGER_CONTACT") or CONFIG_MANAGER_CONTACT_URL or ""
).strip() or CONFIG_MANAGER_CONTACT_URL

if not TELEGRAM_BOT_TOKEN:
    raise RuntimeError(
        "TELEGRAM_BOT_TOKEN is not configured. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ .env –∏–ª–∏ config.py."
    )

BASE_DIR = Path(__file__).resolve().parent
DATA_DIR = BASE_DIR / "data"
LOGS_DIR = BASE_DIR / "logs"
CLIENTS_DIR = BASE_DIR / "clients"

for directory in (DATA_DIR, LOGS_DIR, CLIENTS_DIR):
    directory.mkdir(parents=True, exist_ok=True)

logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO,
)
logger = logging.getLogger(__name__)
file_handler = logging.FileHandler(LOGS_DIR / "bot.log")
file_handler.setFormatter(
    logging.Formatter("%(asctime)s - %(name)s - %(levelname)s - %(message)s")
)
logger.addHandler(file_handler)

DEFAULT_PRICES: Dict[str, Dict[str, int]] = {
    "self": {"base": 2500, "min": 2500, "max": 4200},
    "course_theory": {"base": 10000, "min": 10000, "max": 16500},
    "course_empirical": {"base": 16500, "min": 15000, "max": 24000},
    "normcontrol": {"base": 5000, "min": 5000, "max": 7000},
    "vkr": {"base": 32000, "min": 30000, "max": 48000},
    "master": {"base": 40000, "min": 40000, "max": 65000},
}

UNIVERSITIES_EXAMPLES = "–ú–ì–£, –°–ü–±–ì–£, –í–®–≠, –†–ê–ù–•–∏–ì–°, –£—Ä–§–£ –∏ –¥—Ä—É–≥–∏–µ –≤–µ–¥—É—â–∏–µ –≤—É–∑—ã –†–æ—Å—Å–∏–∏"

ORDER_TYPES: Dict[str, Dict[str, object]] = {
    "self": {
        "name": "–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞",
        "icon": "üìù",
        "description": "–ö–æ—Ä–æ—Ç–∫–∏–µ –∑–∞–¥–∞–Ω–∏—è, –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ, —ç—Å—Å–µ –∏ –æ—Ç—á—ë—Ç—ã. –í—ã–ø–æ–ª–Ω—è–µ–º —Ç–æ—á–Ω–æ –ø–æ –º–µ—Ç–æ–¥–∏—á–∫–∞–º –∏ –±—ã—Å—Ç—Ä–æ –≤–æ–≤–ª–µ–∫–∞–µ–º –∞–≤—Ç–æ—Ä–∞ –≤ –∑–∞–¥–∞—á—É.",
        "details": "–ü–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è —Ä–∞–±–æ—Ç –¥–æ 20 —Å—Ç—Ä–∞–Ω–∏—Ü, –≥–æ—Ç–æ–≤–∏–º –∑–∞ –≤–µ—á–µ—Ä –∏ –¥–æ–∂–∏–¥–∞–µ–º—Å—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.",
        "examples": [
            "–≠—Å—Å–µ –ø–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏",
            "–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è –ø–æ –ø–µ–¥–∞–≥–æ–≥–∏–∫–µ",
            "–û—Ç—á—ë—Ç –ø–æ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ",
        ],
    },
    "course_theory": {
        "name": "–ö—É—Ä—Å–æ–≤–∞—è (—Ç–µ–æ—Ä–∏—è)",
        "icon": "üìò",
        "description": "–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è –∫—É—Ä—Å–æ–≤–∞—è —Å –ø–æ–Ω—è—Ç–Ω–æ–π –ª–æ–≥–∏–∫–æ–π, –∞–∫—Ç—É–∞–ª—å–Ω—ã–º–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –∏ –∞–∫—Ü–µ–Ω—Ç–æ–º –Ω–∞ –Ω–∞—É—á–Ω—É—é –Ω–æ–≤–∏–∑–Ω—É.",
        "details": "–û—Ñ–æ—Ä–º–ª—è–µ–º –≥–ª–∞–≤—ã, —Å–ø–∏—Å–æ–∫ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å —É—á—ë—Ç–æ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –∫–∞—Ñ–µ–¥—Ä—ã. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–¥–±–∏—Ä–∞–µ–º –ø–æ–¥ –≤–∞—à—É –∑–∞–¥–∞—á—É.",
        "examples": [
            "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—è —Ä–∞–∑–≤–∏—Ç–∏—è –ª–∏—á–Ω–æ—Å—Ç–∏",
            "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –º–µ—Ç–æ–¥–∏–∫–∏ –ª–æ–≥–æ–ø–µ–¥–∏–∏",
            "–°–æ—Ü–∏–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å —Å–µ–º—å—ë–π",
        ],
    },
    "course_empirical": {
        "name": "–ö—É—Ä—Å–æ–≤–∞—è (—Ç–µ–æ—Ä–∏—è + —ç–º–ø–∏—Ä–∏–∫–∞)",
        "icon": "üìä",
        "description": "–ü–æ–ª–Ω—ã–π –∫—É—Ä—Å —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π: —Ç–µ–æ—Ä–∏—è, –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ, —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏ –≤—ã–≤–æ–¥—ã. –ú–æ–∂–µ–º –ø—Ä–∏–¥—É–º–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–∞—à–∏.",
        "details": "–†–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞—Ä–∏–π, –ø—Ä–æ–≤–æ–¥–∏–º –æ–ø—Ä–æ—Å—ã/—Ç–µ—Å—Ç—ã, –æ—Ñ–æ—Ä–º–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã –∏ –≥—Ä–∞—Ñ–∏–∫–∏. –í—Å—ë –≥–æ—Ç–æ–≤–æ –∫ –∑–∞—â–∏—Ç–µ.",
        "examples": [
            "–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏",
            "–ê–Ω–∞–ª–∏–∑ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —Å–æ—Ü—Å–ª—É–∂–±",
            "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ –ª–æ–≥–æ–ø–µ–¥–∏—á–µ—Å–∫–∏—Ö –º–µ—Ç–æ–¥–∏–∫",
        ],
    },
    "normcontrol": {
        "name": "–ù–æ—Ä–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—å",
        "icon": "üìè",
        "description": "–ü—Ä–æ–≤–µ—Ä–∏–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ, –ì–û–°–¢, —Å—Å—ã–ª–∫–∏ –∏ –ø–ª–∞–≥–∏–Ω—ã. –í—Å—ë –ø—Ä–∏–≤–µ–¥—ë–º –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç—É –≤—É–∑–∞.",
        "details": "–®–∞–±–ª–æ–Ω—ã, –æ–≥–ª–∞–≤–ª–µ–Ω–∏–µ, —Å–ø–∏—Å–∫–∏ –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è ‚Äî –≤—Å—ë –≤—ã–≤–µ—Ä–µ–Ω–æ –ø–æ–¥ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.",
        "examples": [
            "–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–ø–ª–æ–º–∞ –ø–µ—Ä–µ–¥ —Å–¥–∞—á–µ–π",
            "–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–æ–≤–æ–π",
            "–ê–¥–∞–ø—Ç–∞—Ü–∏—è —Å—Ç–∞—Ç–µ–π –ø–æ–¥ –ì–û–°–¢",
        ],
    },
    "vkr": {
        "name": "–î–∏–ø–ª–æ–º–Ω–∞—è —Ä–∞–±–æ—Ç–∞ (–í–ö–†)",
        "icon": "üéì",
        "description": "–í—ã–ø—É—Å–∫–Ω–∞—è —Ä–∞–±–æ—Ç–∞ –ø–æ–¥ –∫–ª—é—á: –ø–ª–∞–Ω, —Ç–µ–æ—Ä–∏—è, –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —á–∞—Å—Ç—å –∏ –∑–∞—â–∏—Ç–∞. –°–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ–º –¥–æ —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ –æ—Ç–∑—ã–≤–∞.",
        "details": "–ì–æ—Ç–æ–≤–∏–º –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é, —Ä–µ—á—å –∏ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ–º –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è–º–∏. –û–ø—ã—Ç ‚Äî 6 –ª–µ—Ç, –±–æ–ª–µ–µ 4000 —É—Å–ø–µ—à–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –≤ {UNIVERSITIES_EXAMPLES}.",
        "examples": [
            "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∞",
            "–ü—Ä–æ–≥—Ä–∞–º–º–∞ —Ä–∞–∑–≤–∏—Ç–∏—è —Å–æ—Ü—Å–ª—É–∂–±—ã",
            "–ö–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã –∏ –∏—Ö —Ä–µ—à–µ–Ω–∏—è",
        ],
    },
    "master": {
        "name": "–ú–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–∞—è –¥–∏—Å—Å–µ—Ä—Ç–∞—Ü–∏—è",
        "icon": "üîç",
        "description": "–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —É—Ä–æ–≤–Ω—è –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã: –≥–ª—É–±–æ–∫–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞, –Ω–∞—É—á–Ω–∞—è –Ω–æ–≤–∏–∑–Ω–∞ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.",
        "details": "–°–æ–≥–ª–∞—Å–æ–≤—ã–≤–∞–µ–º –ø–ª–∞–Ω, –ø—Ä–æ–≤–æ–¥–∏–º –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è, –≥–æ—Ç–æ–≤–∏–º —Å—Ç–∞—Ç—å–∏, –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –∏ —Ä–µ—á—å. –°–æ–ø—Ä–æ–≤–æ–∂–¥–∞–µ–º –¥–æ –∑–∞—â–∏—Ç—ã.",
        "examples": [
            "–ò–Ω–Ω–æ–≤–∞—Ü–∏–∏ –≤ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Å—Ñ–µ—Ä–µ",
            "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏—è",
            "–ü—Ä–æ–≥—Ä–∞–º–º—ã –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤",
        ],
    },
}

FAQ_ITEMS: List[Dict[str, str]] = [
    {
        "question": "–ö–∞–∫ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?",
        "answer": "–ù–∞–∂–º–∏—Ç–µ 'üìù –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑', –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø, —Å—Ä–æ–∫, –æ–±—ä—ë–º –∏ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è. –ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å –ª—é–±—ã–µ —Ñ–∞–π–ª—ã –ø—Ä—è–º–æ –≤ —á–∞—Ç.",
    },
    {
        "question": "–° –∫–∞–∫–∏–º–∏ —Å—Ä–æ–∫–∞–º–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç–µ?",
        "answer": "–ë–µ—Ä—ë–º —Å—Ä–æ—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã –æ—Ç 24 —á–∞—Å–æ–≤ —Å –ø–æ–≤—ã—à–∞—é—â–∏–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º. –ß–µ–º —Ä–∞–Ω—å—à–µ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å ‚Äî —Ç–µ–º –≤—ã–≥–æ–¥–Ω–µ–µ.",
    },
    {
        "question": "–ö–∞–∫–∏–µ —Å–∫–∏–¥–∫–∏ –∏ –±–æ–Ω—É—Å—ã?",
        "answer": "–ù–∞ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ –¥–µ–π—Å—Ç–≤—É–µ—Ç —Å–∫–∏–¥–∫–∞ 7% (–¥–æ 3000 ‚ÇΩ). –ó–∞ –∫–∞–∂–¥–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ –¥—Ä—É–≥–∞ ‚Äî +300 ‚ÇΩ –Ω–∞ –±–æ–Ω—É—Å–Ω—ã–π —Å—á—ë—Ç.",
    },
    {
        "question": "–†–∞–±–æ—Ç–∞–µ—Ç–µ –ª–∏ —Å –º–æ–∏–º –≤—É–∑–æ–º?",
        "answer": f"–î–∞! –ó–∞ 6 –ª–µ—Ç –º—ã –¥–µ–ª–∞–ª–∏ —Ä–∞–±–æ—Ç—ã –¥–ª—è {UNIVERSITIES_EXAMPLES}. –ü–æ–¥—Å—Ç—Ä–æ–∏–º—Å—è –ø–æ–¥ –≤–∞—à–∏ –º–µ—Ç–æ–¥–∏—á–∫–∏.",
    },
    {
        "question": "–ö–∞–∫ –ø–µ—Ä–µ–¥–∞—Ç—å –º–µ—Ç–æ–¥–∏—á–∫–∏ –∏ –¥–∞–Ω–Ω—ã–µ?",
        "answer": "–ù–∞ —ç—Ç–∞–ø–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª—ã –ª—é–±–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞: Word, PDF, —Ñ–æ—Ç–æ, –∞—É–¥–∏–æ. –í—Å—ë –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–ª–µ—Ç–∞–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.",
    },
    {
        "question": "–ß—Ç–æ —Å –∞–Ω—Ç–∏–ø–ª–∞–≥–∏–∞—Ç–æ–º?",
        "answer": "–ò–∑-–∑–∞ –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –ê–Ω—Ç–∏–ø–ª–∞–≥–∏–∞—Ç.—Ä—É –º—ã –Ω–µ –¥–µ–ª–∞–µ–º –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫, –Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –ø–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ–º –¥–æ –Ω—É–∂–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ–Ω—Ç–∞. –î–ª—è –∫—Ä—É–ø–Ω—ã—Ö —Ä–∞–±–æ—Ç –ø—Ä–∞–≤–∫–∏ ‚Äî 6 –º–µ—Å—è—Ü–µ–≤.",
    },
]

UPSELL_OPTIONS: Dict[str, Dict[str, int]] = {
    "presentation_pack": {"title": "–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è + —Ä–µ—á—å", "price": 3000},
    "mentor": {"title": "–õ–∏—á–Ω—ã–π –∫—É—Ä–∞—Ç–æ—Ä —Å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤—è–∑—å—é", "price": 1500},
}

PAGE_OPTIONS: Dict[str, Dict[str, object]] = {
    "20": {"label": "–¥–æ 20 —Å—Ç—Ä.", "multiplier": 1.0},
    "35": {"label": "–¥–æ 35 —Å—Ç—Ä.", "multiplier": 1.2},
    "50": {"label": "–¥–æ 50 —Å—Ç—Ä.", "multiplier": 1.35},
    "70": {"label": "70+ —Å—Ç—Ä.", "multiplier": 1.55},
}

DEADLINE_CHOICES: List[tuple[int, str]] = [
    (1, "üî• 24 —á–∞—Å–∞"),
    (2, "‚ö° 2 –¥–Ω—è"),
    (3, "‚ö° 3 –¥–Ω—è"),
    (5, "5 –¥–Ω–µ–π"),
    (7, "–ù–µ–¥–µ–ª—è"),
    (14, "2 –Ω–µ–¥–µ–ª–∏"),
    (21, "3 –Ω–µ–¥–µ–ª–∏"),
    (30, "–ú–µ—Å—è—Ü"),
]

FIRST_ORDER_DISCOUNT_RATE = 0.07
FIRST_ORDER_DISCOUNT_CAP = 3000
REFERRAL_BONUS_AMOUNT = 300
LOYALTY_REWARD_RATE = 0.02

SETTINGS_FILE = DATA_DIR / "settings.json"
PRICES_FILE = DATA_DIR / "prices.json"
REFERRALS_FILE = DATA_DIR / "referrals.json"
ORDERS_FILE = DATA_DIR / "orders.json"
FEEDBACKS_FILE = DATA_DIR / "feedbacks.json"
USER_LOGS_FILE = DATA_DIR / "user_logs.json"
BONUSES_FILE = DATA_DIR / "bonuses.json"


@dataclass
class OrderRecord:
    order_id: int
    type_key: str
    topic: str
    deadline_days: int
    deadline_date: str
    page_plan: str
    requirements: str
    attachments: List[Dict[str, str]] = field(default_factory=list)
    upsells: List[str]
    status_key: str
    base_price: int
    discount: int
    price: int
    status: str
    created_at: str


class DataStore:
    def __init__(self) -> None:
        default_notification_ids: List[int] = []
        if OWNER_CHAT_ID_DEFAULT:
            default_notification_ids.append(int(OWNER_CHAT_ID_DEFAULT))
        if ADMIN_CHAT_ID_DEFAULT and ADMIN_CHAT_ID_DEFAULT not in default_notification_ids:
            default_notification_ids.append(int(ADMIN_CHAT_ID_DEFAULT))
        for entry in SECONDARY_ADMINS or []:
            try:
                extra_id = int(entry.get("chat_id", 0))
            except (TypeError, ValueError):
                continue
            if extra_id and extra_id not in default_notification_ids:
                default_notification_ids.append(extra_id)
        default_settings = {
            "pricing_mode": DEFAULT_PRICING_MODE,
            "owner_chat_id": OWNER_CHAT_ID_DEFAULT,
            "owner_username": DEFAULT_OWNER_USERNAME,
            "admin_chat_id": ADMIN_CHAT_ID_DEFAULT,
            "admin_username": ADMIN_USERNAME_DEFAULT,
            "manager_contact_url": MANAGER_CONTACT_LINK,
            "notification_chat_ids": default_notification_ids,
        }
        loaded_settings = self._load_json(SETTINGS_FILE, default_settings)
        changed = False
        for key, value in default_settings.items():
            if key not in loaded_settings:
                loaded_settings[key] = value
                changed = True
        if (
            int(default_settings.get("owner_chat_id", 0))
            and int(loaded_settings.get("owner_chat_id", 0)) == 0
        ):
            loaded_settings["owner_chat_id"] = default_settings["owner_chat_id"]
            changed = True
        if (
            default_settings.get("owner_username")
            and not loaded_settings.get("owner_username")
        ):
            loaded_settings["owner_username"] = default_settings["owner_username"]
            changed = True
        if (
            int(default_settings.get("admin_chat_id", 0))
            and int(loaded_settings.get("admin_chat_id", 0)) == 0
        ):
            loaded_settings["admin_chat_id"] = default_settings["admin_chat_id"]
            changed = True
        if (
            default_settings.get("admin_username")
            and not loaded_settings.get("admin_username")
        ):
            loaded_settings["admin_username"] = default_settings["admin_username"]
            changed = True
        notifications = loaded_settings.get("notification_chat_ids")
        if not isinstance(notifications, list):
            notifications = []
            changed = True
        for value in default_notification_ids:
            if value and value not in notifications:
                notifications.append(value)
                changed = True
        loaded_settings["notification_chat_ids"] = notifications
        if changed:
            self._save_json(SETTINGS_FILE, loaded_settings)
        self.settings: Dict[str, object] = loaded_settings
        self.prices: Dict[str, Dict[str, int]] = self._load_json(PRICES_FILE, DEFAULT_PRICES)
        self.referrals: Dict[str, List[int]] = self._load_json(REFERRALS_FILE, {})
        self.orders: Dict[str, List[Dict[str, object]]] = self._load_json(ORDERS_FILE, {})
        self.feedbacks: Dict[str, List[str]] = self._load_json(FEEDBACKS_FILE, {})
        self.user_logs: Dict[str, List[Dict[str, str]]] = self._load_json(USER_LOGS_FILE, {})
        self.bonuses: Dict[str, Dict[str, object]] = self._load_json(BONUSES_FILE, {})

    @staticmethod
    def _load_json(path: Path, default) -> object:
        if path.exists():
            try:
                with path.open("r", encoding="utf-8") as fh:
                    return json.load(fh)
            except json.JSONDecodeError as exc:
                logger.warning("Failed to decode %s (%s). Restoring defaults.", path, exc)
        DataStore._save_json(path, default)
        return json.loads(json.dumps(default))

    @staticmethod
    def _save_json(path: Path, data) -> None:
        with path.open("w", encoding="utf-8") as fh:
            json.dump(data, fh, ensure_ascii=False, indent=2)

    def get_pricing_mode(self) -> str:
        return self.settings.get("pricing_mode", DEFAULT_PRICING_MODE)

    def set_pricing_mode(self, mode: str) -> None:
        self.settings["pricing_mode"] = mode
        self._save_json(SETTINGS_FILE, self.settings)

    def get_owner_chat_id(self) -> int:
        try:
            return int(self.settings.get("owner_chat_id", 0))
        except (TypeError, ValueError):
            return 0

    def set_owner_chat_id(self, chat_id: int, username: Optional[str] = None) -> None:
        try:
            normalized = int(chat_id)
        except (TypeError, ValueError):
            normalized = 0
        self.settings["owner_chat_id"] = normalized
        if username is not None:
            self.settings["owner_username"] = username or ""
        notifications = self.settings.get("notification_chat_ids")
        if not isinstance(notifications, list):
            notifications = []
        if normalized and normalized not in notifications:
            notifications.append(normalized)
        self.settings["notification_chat_ids"] = notifications
        self._save_json(SETTINGS_FILE, self.settings)

    def get_admin_chat_id(self) -> int:
        try:
            return int(self.settings.get("admin_chat_id", 0))
        except (TypeError, ValueError):
            return 0

    def set_admin_chat_id(self, chat_id: int, username: Optional[str] = None) -> None:
        try:
            normalized = int(chat_id)
        except (TypeError, ValueError):
            normalized = 0
        self.settings["admin_chat_id"] = normalized
        if username is not None:
            self.settings["admin_username"] = username or ""
        notifications = self.settings.get("notification_chat_ids")
        if not isinstance(notifications, list):
            notifications = []
        if normalized and normalized not in notifications:
            notifications.append(normalized)
        self.settings["notification_chat_ids"] = notifications
        self._save_json(SETTINGS_FILE, self.settings)

    def get_admin_username(self) -> str:
        return str(self.settings.get("admin_username", "") or "")

    def get_notification_chat_ids(self) -> List[int]:
        recipients: List[int] = []
        owner_id = self.get_owner_chat_id()
        if owner_id:
            recipients.append(owner_id)
        try:
            admin_id = int(self.settings.get("admin_chat_id", 0))
        except (TypeError, ValueError):
            admin_id = 0
        if admin_id and admin_id not in recipients:
            recipients.append(admin_id)
        extras = self.settings.get("notification_chat_ids", [])
        if isinstance(extras, list):
            for value in extras:
                try:
                    candidate = int(value)
                except (TypeError, ValueError):
                    continue
                if candidate and candidate not in recipients:
                    recipients.append(candidate)
        return recipients

    def get_manager_contact(self) -> str:
        return str(self.settings.get("manager_contact_url", MANAGER_CONTACT_LINK))

    def add_referral(self, referrer_id: int, new_user_id: int) -> bool:
        referrer_key = str(referrer_id)
        referred_list = self.referrals.setdefault(referrer_key, [])
        if new_user_id in referred_list:
            return False
        referred_list.append(new_user_id)
        self._save_json(REFERRALS_FILE, self.referrals)
        self.add_bonus(referrer_id, REFERRAL_BONUS_AMOUNT, f"–†–µ—Ñ–µ—Ä–∞–ª {new_user_id}")
        return True

    def add_bonus(self, user_id: int, amount: int, reason: str) -> None:
        if not amount:
            return
        user_key = str(user_id)
        entry = self.bonuses.setdefault(user_key, {"balance": 0, "history": []})
        entry["balance"] = int(entry.get("balance", 0)) + int(amount)
        history = entry.setdefault("history", [])
        history.append(
            {
                "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                "amount": int(amount),
                "reason": reason,
            }
        )
        self._save_json(BONUSES_FILE, self.bonuses)

    def get_bonus_info(self, user_id: int) -> Dict[str, object]:
        entry = self.bonuses.get(str(user_id), {})
        return {
            "balance": int(entry.get("balance", 0)),
            "history": list(entry.get("history", [])),
        }

    def list_referral_stats(self) -> List[Dict[str, object]]:
        stats: List[Dict[str, object]] = []
        for user_id, referred in self.referrals.items():
            info = self.get_bonus_info(int(user_id))
            stats.append(
                {
                    "user_id": int(user_id),
                    "count": len(referred),
                    "bonus": int(info.get("balance", 0)),
                }
            )
        stats.sort(key=lambda item: (item["bonus"], item["count"]), reverse=True)
        return stats

    def log_action(self, user_id: int, username: Optional[str], action: str) -> None:
        entry = {
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "action": action,
            "username": username or "",
        }
        user_key = str(user_id)
        self.user_logs.setdefault(user_key, []).append(entry)
        self._save_json(USER_LOGS_FILE, self.user_logs)

    def add_feedback(self, user_id: int, feedback: str) -> None:
        user_key = str(user_id)
        self.feedbacks.setdefault(user_key, []).append(feedback)
        self._save_json(FEEDBACKS_FILE, self.feedbacks)

    def next_order_id(self, user_id: int) -> int:
        user_key = str(user_id)
        orders = self.orders.get(user_key, [])
        if not orders:
            return 1
        last_id = max(int(order.get("order_id", 0)) for order in orders)
        return last_id + 1

    def add_order(self, user_id: int, order: OrderRecord) -> OrderRecord:
        user_key = str(user_id)
        orders = self.orders.setdefault(user_key, [])
        orders.append(asdict(order))
        self._save_json(ORDERS_FILE, self.orders)
        return order

    def get_orders(self, user_id: int) -> List[Dict[str, object]]:
        return self.orders.get(str(user_id), [])

    def get_order(self, user_id: int, order_id: int) -> Optional[Dict[str, object]]:
        orders = self.orders.get(str(user_id))
        if not orders:
            return None
        for order in orders:
            if int(order.get("order_id", 0)) == int(order_id):
                return order
        return None

    def list_recent_orders(self, limit: int = 10) -> List[Dict[str, object]]:
        entries: List[Dict[str, object]] = []
        for user_id, orders in self.orders.items():
            for order in orders:
                combined = {"user_id": int(user_id)}
                combined.update(order)
                entries.append(combined)
        entries.sort(key=lambda item: item.get("created_at", ""), reverse=True)
        return entries[:limit]

    def total_spent(self, user_id: int) -> int:
        return int(sum(int(order.get("price", 0)) for order in self.get_orders(user_id)))

    def get_referrals(self, user_id: int) -> List[int]:
        return self.referrals.get(str(user_id), [])

    def export_orders(self) -> Optional[Path]:
        records: List[Dict[str, object]] = []
        for user_id, orders in self.orders.items():
            for order in orders:
                records.append({"user_id": user_id, **order})
        if not records:
            return None
        df = pd.DataFrame(records)
        export_path = DATA_DIR / "orders_export.xlsx"
        df.to_excel(export_path, index=False)
        return export_path

    def get_statistics(self) -> Dict[str, int]:
        orders_flat = [order for orders in self.orders.values() for order in orders]
        total_orders = len(orders_flat)
        total_revenue = int(sum(int(order.get("price", 0)) for order in orders_flat))
        active_orders = 0
        for order in orders_flat:
            status_key = str(order.get("status_key", "")).lower()
            status_text = str(order.get("status", "")).lower()
            if status_key in {"done"}:
                continue
            if any(word in status_text for word in ("–≥–æ—Ç–æ–≤", "–∑–∞–≤–µ—Ä—à")):
                continue
            active_orders += 1
        unique_users = len(self.orders)
        total_referrals = sum(len(refs) for refs in self.referrals.values())
        total_bonuses = int(
            sum(int(info.get("balance", 0)) for info in self.bonuses.values())
        )
        return {
            "orders": total_orders,
            "revenue": total_revenue,
            "active": active_orders,
            "users": unique_users,
            "referrals": total_referrals,
            "bonuses": total_bonuses,
        }

    def update_order_status(
        self, user_id: int, order_id: int, status_key: str, status_title: str
    ) -> Optional[Dict[str, object]]:
        orders = self.orders.get(str(user_id))
        if not orders:
            return None
        for order in orders:
            if int(order.get("order_id", 0)) == int(order_id):
                order["status_key"] = status_key
                order["status"] = status_title
                self._save_json(ORDERS_FILE, self.orders)
                return order
        return None


store = DataStore()


STATE_NAVIGATION, STATE_ORDER_TOPIC, STATE_ORDER_PAGES, STATE_ORDER_REQUIREMENTS, STATE_FEEDBACK, STATE_ADMIN = range(6)


def schedule_restart(delay: float = 1.5) -> None:
    loop = asyncio.get_running_loop()

    def _shutdown() -> None:
        logger.warning("Stopping bot process by admin request")
        os._exit(0)

    loop.call_later(delay, _shutdown)


def log_user_action(update: Update, action: str) -> None:
    user = update.effective_user
    if not user:
        return
    store.log_action(user.id, user.username, action)


async def ensure_owner_access(
    update: Update, context: ContextTypes.DEFAULT_TYPE
) -> bool:
    user = update.effective_user
    owner_id = store.get_owner_chat_id()
    if not user or user.id != owner_id:
        if update.message:
            await update.message.reply_text(
                "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª—å—Ü—É –±–æ—Ç–∞."
            )
        elif update.callback_query:
            await update.callback_query.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞", show_alert=True)
        return False
    return True


def calculate_price(
    order_type: str,
    days_left: int,
    page_multiplier: float = 1.0,
    upsells: Iterable[str] = (),
) -> int:
    price_info = store.prices.get(order_type) or DEFAULT_PRICES.get(order_type)
    if not price_info:
        logger.warning("Unknown order type for pricing: %s", order_type)
        return 0
    base_price = int(price_info.get("base", 0))
    subtotal = int(base_price * page_multiplier)
    mode = store.get_pricing_mode()
    if days_left <= 1:
        subtotal = int(subtotal * (1.8 if mode == "hard" else 1.65))
    elif days_left <= 2:
        subtotal = int(subtotal * (1.6 if mode == "hard" else 1.45))
    elif days_left <= 3:
        subtotal = int(subtotal * (1.35 if mode == "hard" else 1.25))
    elif days_left <= 5:
        subtotal = int(subtotal * (1.2 if mode == "hard" else 1.15))
    elif days_left <= 7:
        subtotal = int(subtotal * (1.15 if mode == "hard" else 1.1))
    elif days_left <= 14 and mode == "hard":
        subtotal = int(subtotal * 1.05)
    total = subtotal
    for upsell in upsells:
        option = UPSELL_OPTIONS.get(upsell)
        if option:
            total += option["price"]
    return total


def build_main_menu_keyboard() -> InlineKeyboardMarkup:
    contact_url = store.get_manager_contact()
    keyboard = [
        [InlineKeyboardButton("üìù –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data="main:order")],
        [
            InlineKeyboardButton("üí≤ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç", callback_data="main:prices"),
            InlineKeyboardButton("üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", callback_data="main:calculator"),
        ],
        [
            InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data="main:profile"),
            InlineKeyboardButton("‚ùì FAQ", callback_data="main:faq"),
        ],
        [InlineKeyboardButton("üìû –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", url=contact_url)],
    ]
    return InlineKeyboardMarkup(keyboard)


def order_type_name_from_key(type_key: Optional[str]) -> str:
    if type_key and type_key in ORDER_TYPES:
        return ORDER_TYPES[type_key]["name"]
    return str(type_key or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø")


def order_type_name_from_record(order: Dict[str, object]) -> str:
    type_key = order.get("type_key")
    if type_key in ORDER_TYPES:
        return ORDER_TYPES[type_key]["name"]
    legacy_name = order.get("type")
    if legacy_name:
        return str(legacy_name)
    return order_type_name_from_key(type_key if isinstance(type_key, str) else None)


def format_order_summary(
    draft: Dict[str, object], base_price: int, final_price: int, discount_value: int
) -> str:
    order_type = ORDER_TYPES.get(draft.get("type_key")) or {}
    upsells = draft.get("upsells", [])
    upsell_lines = []
    for upsell in upsells:
        info = UPSELL_OPTIONS.get(upsell)
        if info:
            upsell_lines.append(f"‚Ä¢ {info['title']} (+{info['price']} ‚ÇΩ)")
    upsell_text = "\n".join(upsell_lines) if upsell_lines else "‚Äî"
    deadline_days = int(draft.get("deadline_days", 0))
    deadline_date = (datetime.now() + timedelta(days=deadline_days)).strftime("%d.%m.%Y")
    page_label = draft.get("page_label") or get_page_option(str(draft.get("page_key"))).get("label")
    attachments = draft.get("attachments", [])
    attachments_text = (
        f"{len(attachments)} —Ñ–∞–π–ª(–æ–≤)" if attachments else "–º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –ø–æ–∑–∂–µ"
    )
    discount_line = (
        f"–°–∫–∏–¥–∫–∞ –Ω–æ–≤–∏—á–∫–∞: ‚àí{discount_value} ‚ÇΩ\n" if discount_value else ""
    )
    return (
        f"<b>–ü—Ä–æ–≤–µ—Ä–∏–º –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º:</b>\n\n"
        f"–¢–∏–ø: {order_type.get('icon', '')} {order_type.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
        f"–¢–µ–º–∞: {html.escape(str(draft.get('topic', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')))}\n"
        f"–°—Ä–æ–∫: {deadline_days} –¥–Ω. (–¥–æ {deadline_date})\n"
        f"–û–±—ä—ë–º: {page_label}\n"
        f"–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: {html.escape(str(draft.get('requirements', '–Ω–µ —É–∫–∞–∑–∞–Ω—ã')))}\n"
        f"–§–∞–π–ª—ã: {attachments_text}\n"
        f"–î–æ–ø. —É—Å–ª—É–≥–∏: {upsell_text}\n\n"
        f"–ë–∞–∑–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {base_price} ‚ÇΩ\n"
        f"{discount_line}–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: <b>{final_price} ‚ÇΩ</b>"
    )


async def get_bot_username(context: ContextTypes.DEFAULT_TYPE) -> str:
    username = context.application.bot_data.get("bot_username")
    if username:
        return username
    me = await context.bot.get_me()
    username = me.username or ""
    context.application.bot_data["bot_username"] = username
    return username


async def show_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, text: Optional[str] = None) -> int:
    markup = build_main_menu_keyboard()
    message_text = text or (
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª üëá\n"
        "–°—Ä–æ—á–Ω—ã–π –∑–∞–∫–∞–∑ –∑–∞ 24 —á–∞—Å–∞? –ü—Ä–æ—Å—Ç–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ ‚Äî –º—ã –≤–æ–∑—å–º—ë–º—Å—è —Å—Ä–∞–∑—É."
    )
    if update.callback_query:
        query = update.callback_query
        try:
            await query.edit_message_text(message_text, reply_markup=markup, parse_mode=ParseMode.HTML)
        except BadRequest as exc:
            if "message is not modified" not in str(exc):
                raise
    elif update.message:
        await update.message.reply_text(message_text, reply_markup=markup, parse_mode=ParseMode.HTML)
    return STATE_NAVIGATION

def get_order_draft(context: ContextTypes.DEFAULT_TYPE) -> Dict[str, object]:
    draft = context.user_data.setdefault("order_draft", {})
    draft.setdefault("upsells", set())
    return draft


def get_page_option(key: Optional[str]) -> Dict[str, object]:
    if key and key in PAGE_OPTIONS:
        return PAGE_OPTIONS[key]
    return PAGE_OPTIONS["20"]


def ensure_requirement_buckets(draft: Dict[str, object]) -> None:
    draft.setdefault("requirements_texts", [])
    draft.setdefault("attachments", [])


async def show_order_types(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    log_user_action(update, "open_order_types")
    keyboard = [
        [
            InlineKeyboardButton(
                f"{info['icon']} {info['name']}", callback_data=f"order:type:{key}"
            )
        ]
        for key, info in ORDER_TYPES.items()
    ]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main:root")])
    markup = InlineKeyboardMarkup(keyboard)
    text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã. –ú–æ–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–¥—Ä—è–¥ ‚Äî –±—É–¥–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å–∫–∏–¥–∫–∞!"
    query = update.callback_query
    try:
        await query.edit_message_text(text, reply_markup=markup)
    except BadRequest as exc:
        if "message is not modified" not in str(exc):
            raise
    return STATE_NAVIGATION


async def show_order_details(update: Update, key: str) -> int:
    query = update.callback_query
    info = ORDER_TYPES.get(key)
    if not info:
        await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–∞–±–æ—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return STATE_NAVIGATION
    examples = ", ".join(info.get("examples", []))
    text = (
        f"{info['icon']} <b>{info['name']}</b>\n\n"
        f"{info['description']}\n\n"
        f"<b>–ß—Ç–æ –≤–∫–ª—é—á–µ–Ω–æ:</b> {info['details']}\n"
        f"<b>–ü—Ä–∏–º–µ—Ä—ã:</b> {html.escape(examples)}"
    )
    keyboard = [
        [InlineKeyboardButton("‚úÖ –í—ã–±—Ä–∞—Ç—å", callback_data=f"order:new:{key}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="order:list")],
    ]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.HTML)
    return STATE_NAVIGATION


async def prompt_order_topic(update: Update, context: ContextTypes.DEFAULT_TYPE, key: str) -> int:
    draft = get_order_draft(context)
    draft.clear()
    draft.update({"type_key": key, "upsells": set()})
    query = update.callback_query
    await query.edit_message_text(
        "–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–º—É —Ä–∞–±–æ—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ–∑–∂–µ. –î–ª—è –æ—Ç–º–µ–Ω—ã /cancel",
        parse_mode=ParseMode.HTML,
    )
    return STATE_ORDER_TOPIC


async def receive_topic(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    draft = get_order_draft(context)
    topic = update.message.text.strip()
    if not topic:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–º—É —Ç–µ–∫—Å—Ç–æ–º.")
        return STATE_ORDER_TOPIC
    draft["topic"] = topic
    log_user_action(update, f"order_topic:{topic}")
    return await prompt_deadline(update, context)


async def prompt_deadline(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    text = (
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ —Å–¥–∞—á–∏. –°—Ä–æ—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã (–¥–æ 24 —á–∞—Å–æ–≤) –≤—ã–ø–æ–ª–Ω—è–µ–º —Å –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º ‚Äî "
        "—ç—Ç–æ –¥–æ—Ä–æ–∂–µ, –Ω–æ —ç–∫–æ–Ω–æ–º–∏—Ç –≤–∞–º –≤—Ä–µ–º—è."
    )
    today = datetime.now()
    keyboard: List[List[InlineKeyboardButton]] = []
    for days, label in DEADLINE_CHOICES:
        deadline = today + timedelta(days=days)
        keyboard.append(
            [
                InlineKeyboardButton(
                    f"{label} ¬∑ –¥–æ {deadline:%d.%m}",
                    callback_data=f"order:deadline:{days}",
                )
            ]
        )
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="order:cancel")])
    markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(text, reply_markup=markup)
    return STATE_NAVIGATION


async def handle_deadline(update: Update, context: ContextTypes.DEFAULT_TYPE, days: int) -> int:
    draft = get_order_draft(context)
    draft["deadline_days"] = days
    return await prompt_page_selection(update, context)


async def prompt_page_selection(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    draft = get_order_draft(context)
    query = update.callback_query
    text = (
        "–°–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–Ω–æ —Å—Ç—Ä–∞–Ω–∏—Ü –∏–ª–∏ —Å–ª–∞–π–¥–æ–≤ –Ω—É–∂–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å? –ß–µ–º –±–æ–ª—å—à–µ –æ–±—ä—ë–º, —Ç–µ–º —Ç—â–∞—Ç–µ–ª—å–Ω–µ–µ –ø–æ–¥–±–æ—Ä –∞–≤—Ç–æ—Ä–∞."
    )
    keyboard = [
        [InlineKeyboardButton(option["label"], callback_data=f"order:pages:{key}")]
        for key, option in PAGE_OPTIONS.items()
    ]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∞", callback_data="order:cancel")])
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    return STATE_ORDER_PAGES


async def prompt_requirements_input(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    draft = get_order_draft(context)
    ensure_requirement_buckets(draft)
    keyboard = InlineKeyboardMarkup(
        [
            [InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ, –¥–∞–ª—å—à–µ", callback_data="order:req_finish")],
            [InlineKeyboardButton("‚¨ÖÔ∏è –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="order:cancel")],
        ]
    )
    await update.callback_query.edit_message_text(
        (
            "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª—ã (Word, PDF, —Ñ–æ—Ç–æ, –∞—É–¥–∏–æ ‚Äî –≤—Å—ë –ø—Ä–∏–Ω–∏–º–∞–µ–º).\n"
            "–î–ª—è —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã—Ö —Ä–∞–±–æ—Ç –ø—Ä–∏–ª–æ–∂–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ, –¥–ª—è –∫—É—Ä—Å–æ–≤—ã—Ö/–í–ö–†/–º–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–∏—Ö ‚Äî –º–µ—Ç–æ–¥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.\n"
            "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /done."
        ),
        reply_markup=keyboard,
    )
    return STATE_ORDER_REQUIREMENTS


async def handle_page_selection(update: Update, context: ContextTypes.DEFAULT_TYPE, key: str) -> int:
    draft = get_order_draft(context)
    option = get_page_option(key)
    draft["page_key"] = key
    draft["page_label"] = option["label"]
    draft["page_multiplier"] = float(option.get("multiplier", 1.0))
    ensure_requirement_buckets(draft)
    return await prompt_requirements_input(update, context)


async def receive_requirements(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    draft = get_order_draft(context)
    ensure_requirement_buckets(draft)
    message_text = update.message.text.strip()
    if not message_text:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç.")
        return STATE_ORDER_REQUIREMENTS
    draft.setdefault("requirements_texts", []).append(message_text)
    draft["requirements"] = "\n\n".join(draft["requirements_texts"])
    log_user_action(update, "order_requirements_note")
    await update.message.reply_text(
        "–ü—Ä–∏–Ω—è–ª–∏. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –∏–ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å —Ñ–∞–π–ª—ã. –ö–æ–≥–¥–∞ –≤—Å—ë –≥–æ—Ç–æ–≤–æ ‚Äî /done."
    )
    return STATE_ORDER_REQUIREMENTS


async def skip_requirements(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    draft = get_order_draft(context)
    ensure_requirement_buckets(draft)
    draft["requirements_texts"] = []
    draft["requirements"] = "–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"
    return await finish_requirements(update, context)


def finalize_requirement_text(draft: Dict[str, object]) -> str:
    notes = [note.strip() for note in draft.get("requirements_texts", []) if note.strip()]
    if notes:
        combined = "\n\n".join(notes)
    else:
        combined = str(draft.get("requirements", "–ù–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π"))
    draft["requirements"] = combined
    return combined


async def finish_requirements(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    draft = get_order_draft(context)
    ensure_requirement_buckets(draft)
    finalize_requirement_text(draft)
    attachments = draft.get("attachments", [])
    log_user_action(update, f"order_requirements_done:{len(draft['requirements_texts'])}:{len(attachments)}")
    if update.message:
        return await show_upsell_menu(update, context)
    if update.callback_query:
        await update.callback_query.answer("–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã", show_alert=False)
    return await show_upsell_menu(update, context)


async def handle_requirement_attachment(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    draft = get_order_draft(context)
    ensure_requirement_buckets(draft)
    message = update.message
    attachment_entry: Dict[str, str]
    label = "–§–∞–π–ª"
    attachment_type = "attachment"
    if message.document:
        doc = message.document
        label = doc.file_name or (doc.mime_type or "–î–æ–∫—É–º–µ–Ω—Ç")
        attachment_entry = {
            "type": "document",
            "file_id": doc.file_id,
            "name": label,
        }
    elif message.photo:
        photo = message.photo[-1]
        label = message.caption or "–§–æ—Ç–æ –∑–∞–¥–∞–Ω–∏—è"
        attachment_entry = {
            "type": "photo",
            "file_id": photo.file_id,
            "name": label,
        }
    elif message.audio:
        audio = message.audio
        label = audio.title or audio.file_name or "–ê—É–¥–∏–æ—Ñ–∞–π–ª"
        attachment_entry = {
            "type": "audio",
            "file_id": audio.file_id,
            "name": label,
        }
    elif message.voice:
        label = "–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        attachment_entry = {
            "type": "voice",
            "file_id": message.voice.file_id,
            "name": label,
        }
    elif message.video:
        video = message.video
        label = video.file_name or "–í–∏–¥–µ–æ—Ñ–∞–π–ª"
        attachment_entry = {
            "type": "video",
            "file_id": video.file_id,
            "name": label,
        }
    elif message.video_note:
        label = "–ö—Ä—É–≥–ª–æ–µ –≤–∏–¥–µ–æ"
        attachment_entry = {
            "type": "video_note",
            "file_id": message.video_note.file_id,
            "name": label,
        }
    else:
        label = "–§–∞–π–ª"
        attachment_entry = {"type": attachment_type, "file_id": "", "name": label}
    attachments = draft.setdefault("attachments", [])
    if attachment_entry.get("file_id"):
        attachments.append(attachment_entry)
        attachment_type = attachment_entry.get("type", attachment_type)
    caption = message.caption
    if caption:
        draft.setdefault("requirements_texts", []).append(caption.strip())
        finalize_requirement_text(draft)
    log_user_action(update, f"order_attachment:{attachment_type}")
    for admin_chat_id in store.get_notification_chat_ids():
        try:
            await message.forward(admin_chat_id)
        except Exception as exc:  # pragma: no cover - –∑–∞–≤–∏—Å–∏—Ç –æ—Ç Telegram API
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ—Å–ª–∞—Ç—å –≤–ª–æ–∂–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É %s: %s", admin_chat_id, exc)
    await message.reply_text(
        f"–î–æ–±–∞–≤–∏–ª–∏: {label}. –ú–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –µ—â—ë –∏–ª–∏ –Ω–∞–∂–∞—Ç—å /done, –∫–æ–≥–¥–∞ –≤—Å—ë –≥–æ—Ç–æ–≤–æ.")
    return STATE_ORDER_REQUIREMENTS


def build_upsell_keyboard(selected: Iterable[str]) -> InlineKeyboardMarkup:
    keyboard: List[List[InlineKeyboardButton]] = []
    selected_set = set(selected)
    for key, info in UPSELL_OPTIONS.items():
        prefix = "‚úÖ" if key in selected_set else "‚ûï"
        keyboard.append(
            [InlineKeyboardButton(f"{prefix} {info['title']} (+{info['price']} ‚ÇΩ)", callback_data=f"order:upsell:{key}")]
        )
    keyboard.append([InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data="order:summary")])
    keyboard.append([InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="order:cancel")])
    return InlineKeyboardMarkup(keyboard)


async def show_upsell_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    draft = get_order_draft(context)
    raw_selected = draft.get("upsells", set())
    selected = raw_selected if isinstance(raw_selected, set) else set(raw_selected)
    draft["upsells"] = selected
    if update.message:
        await update.message.reply_text(
            "–î–æ–±–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏: –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é —Å —Ä–µ—á—å—é –∏–ª–∏ –ª–∏—á–Ω–æ–≥–æ –∫—É—Ä–∞—Ç–æ—Ä–∞ —Å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤—è–∑—å—é."
            " –ú–æ–∂–Ω–æ —Å—Ä–∞–∑—É –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é.",
            reply_markup=build_upsell_keyboard(selected),
        )
    else:
        query = update.callback_query
        await query.edit_message_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ –∏–ª–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é –∑–∞–∫–∞–∑–∞.",
            reply_markup=build_upsell_keyboard(selected),
        )
    return STATE_NAVIGATION


async def toggle_upsell(update: Update, context: ContextTypes.DEFAULT_TYPE, key: str) -> int:
    draft = get_order_draft(context)
    selected_raw = draft.get("upsells", set())
    selected = selected_raw if isinstance(selected_raw, set) else set(selected_raw)
    if key in selected:
        selected.remove(key)
    else:
        selected.add(key)
    draft["upsells"] = selected
    query = update.callback_query
    await query.edit_message_text(
        "–û—Ç–ª–∏—á–Ω–æ! –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∏–ª–∏ –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é.",
        reply_markup=build_upsell_keyboard(selected),
    )
    return STATE_NAVIGATION


async def show_order_summary_step(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    draft = get_order_draft(context)
    user = update.effective_user
    if "topic" not in draft or "deadline_days" not in draft:
        return await show_main_menu(update, context, "–ù–∞—á–Ω–∏—Ç–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –∑–∞–Ω–æ–≤–æ.")
    upsells = list(draft.get("upsells", set()))
    draft["upsells"] = upsells
    page_multiplier = float(draft.get("page_multiplier", get_page_option(str(draft.get("page_key"))).get("multiplier", 1.0)))
    base_price = calculate_price(
        draft["type_key"],
        int(draft["deadline_days"]),
        page_multiplier,
        upsells,
    )
    existing_orders = store.get_orders(user.id) if user else []
    discount_value = 0
    if user and not existing_orders:
        discount_value = min(int(base_price * FIRST_ORDER_DISCOUNT_RATE), FIRST_ORDER_DISCOUNT_CAP)
    final_price = max(base_price - discount_value, 0)
    draft["base_price"] = base_price
    draft["discount_value"] = discount_value
    draft["price"] = final_price
    text = format_order_summary(draft, base_price, final_price, discount_value)
    keyboard = [
        [InlineKeyboardButton("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="order:confirm")],
        [InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–æ–ø—ã", callback_data="order:upsell")],
        [InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="order:cancel")],
    ]
    query = update.callback_query
    await query.edit_message_text(text, parse_mode=ParseMode.HTML, reply_markup=InlineKeyboardMarkup(keyboard))
    return STATE_NAVIGATION


async def cancel_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data.pop("order_draft", None)
    if update.callback_query:
        await update.callback_query.edit_message_text("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –ú–æ–∂–Ω–æ –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ –∏–∑ –º–µ–Ω—é.")
        return await show_main_menu(update, context)
    if update.message:
        await update.message.reply_text("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    return await show_main_menu(update, context)


async def confirm_order(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    if not user:
        return STATE_NAVIGATION
    draft = get_order_draft(context)
    if not draft:
        return await show_main_menu(update, context, "–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ.")
    order_id = store.next_order_id(user.id)
    deadline_days = int(draft.get("deadline_days", 0))
    deadline_date = (datetime.now() + timedelta(days=deadline_days)).strftime("%d.%m.%Y")
    page_plan = draft.get("page_label") or get_page_option(str(draft.get("page_key"))).get("label")
    attachments = list(draft.get("attachments", []))
    base_price = int(draft.get("base_price", draft.get("price", 0)))
    discount_value = int(draft.get("discount_value", 0))
    final_price = int(draft.get("price", base_price))
    order = OrderRecord(
        order_id=order_id,
        type_key=str(draft.get("type_key")),
        topic=str(draft.get("topic", "")),
        deadline_days=deadline_days,
        deadline_date=deadline_date,
        page_plan=str(page_plan),
        requirements=str(draft.get("requirements", "")),
        attachments=attachments,
        upsells=list(draft.get("upsells", [])),
        status_key="new",
        base_price=base_price,
        discount=discount_value,
        price=final_price,
        status=ORDER_STATUS_TITLES.get("new", "–Ω–æ–≤—ã–π"),
        created_at=datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
    )
    store.add_order(user.id, order)
    log_user_action(update, f"order_confirmed:{order.order_id}")
    context.user_data.pop("order_draft", None)
    loyalty_bonus = int(final_price * LOYALTY_REWARD_RATE)
    if loyalty_bonus:
        store.add_bonus(user.id, loyalty_bonus, f"–ë–æ–Ω—É—Å –∑–∞ –∑–∞–∫–∞–∑ #{order.order_id}")
    bonus_info = store.get_bonus_info(user.id)
    bonus_balance = int(bonus_info.get("balance", 0))
    text = (
        f"–°–ø–∞—Å–∏–±–æ! –ó–∞–∫–∞–∑ #{order.order_id} –æ—Ñ–æ—Ä–º–ª–µ–Ω.\n"
        f"–ú–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è. –°—Ç–∞—Ç—É—Å –º–æ–∂–Ω–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤ –ø—Ä–æ—Ñ–∏–ª–µ.\n\n"
        f"–¢–µ–∫—É—â–∏–π –±–æ–Ω—É—Å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {bonus_balance} ‚ÇΩ."
    )
    if loyalty_bonus:
        text += f"\n–ù–∞—á–∏—Å–ª–∏–ª–∏ +{loyalty_bonus} ‚ÇΩ –∑–∞ –∑–∞–∫–∞–∑ ‚Äî –∏—Ö –º–æ–∂–Ω–æ —Ç—Ä–∞—Ç–∏—Ç—å –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ —Ä–∞–±–æ—Ç—ã."
    query = update.callback_query
    await query.edit_message_text(text)
    notification_ids = store.get_notification_chat_ids()
    if notification_ids:
        order_type = order_type_name_from_key(order.type_key)
        upsell_titles = [UPSELL_OPTIONS.get(u, {}).get("title", u) for u in order.upsells]
        admin_text = (
            f"–ù–æ–≤—ã–π –∑–∞–∫–∞–∑ #{order.order_id}\n"
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.id} ({user.username or user.full_name})\n"
            f"–¢–∏–ø: {order_type}\n"
            f"–¢–µ–º–∞: {order.topic}\n"
            f"–°—Ä–æ–∫: {order.deadline_days} –¥–Ω. (–¥–æ {order.deadline_date})\n"
            f"–û–±—ä—ë–º: {page_plan}\n"
            f"–û–ø—Ü–∏–∏: {', '.join(upsell_titles) if upsell_titles else '–Ω–µ—Ç'}\n"
            f"–ë–∞–∑–æ–≤–∞—è —Å—É–º–º–∞: {base_price} ‚ÇΩ\n"
            f"–°–∫–∏–¥–∫–∞: {discount_value} ‚ÇΩ\n"
            f"–ò—Ç–æ–≥–æ: {final_price} ‚ÇΩ\n"
            f"–§–∞–π–ª—ã: {len(attachments)} (–ø–µ—Ä–µ—Å–ª–∞–Ω—ã –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏)"
        )
        for admin_chat_id in notification_ids:
            try:
                await context.bot.send_message(admin_chat_id, admin_text)
            except Exception as exc:  # pragma: no cover - depends on Telegram API
                logger.error("Failed to notify admin %s: %s", admin_chat_id, exc)
    return await show_main_menu(update, context, "–•–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –µ—â–µ –æ–¥–Ω—É —Ä–∞–±–æ—Ç—É?")

async def show_price_list(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    log_user_action(update, "open_price_list")
    rows = []
    for key, info in ORDER_TYPES.items():
        price_info = store.prices.get(key, DEFAULT_PRICES[key])
        rows.append(f"{info['icon']} <b>{info['name']}</b> ‚Äî –æ—Ç {price_info['base']} ‚ÇΩ")
    text = (
        "üí∞ <b>–ü—Ä–∞–π—Å-–ª–∏—Å—Ç</b>\n"
        "6 –ª–µ—Ç –æ–ø—ã—Ç–∞ –∏ 4000+ —Ä–∞–±–æ—Ç –¥–ª—è {UNIVERSITIES_EXAMPLES}.\n"
        "–°—Ä–æ—á–Ω—ã–µ –∑–∞–∫–∞–∑—ã (–¥–æ 24 —á–∞—Å–æ–≤) –≤—ã–ø–æ–ª–Ω—è–µ–º —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–º ‚Äî —ç—Ç–æ –±—ã—Å—Ç—Ä–µ–µ –∏ –≤—ã–≥–æ–¥–Ω–µ–µ, —á–µ–º –ø–µ—Ä–µ–¥–µ–ª—ã–≤–∞—Ç—å –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å.\n\n"
    ).format(UNIVERSITIES_EXAMPLES=UNIVERSITIES_EXAMPLES) + "\n".join(rows)
    keyboard = [
        [
            InlineKeyboardButton(f"–ü–æ–¥—Ä–æ–±–Ω–µ–µ: {info['name']}", callback_data=f"prices:detail:{key}")
        ]
        for key, info in ORDER_TYPES.items()
    ]
    keyboard.append([InlineKeyboardButton("üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", callback_data="main:calculator")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main:root")])
    query = update.callback_query
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.HTML)
    return STATE_NAVIGATION


async def show_price_detail(update: Update, key: str) -> int:
    info = ORDER_TYPES.get(key)
    price_info = store.prices.get(key, DEFAULT_PRICES.get(key, {}))
    if not info:
        await update.callback_query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ä–∞–±–æ—Ç—ã.")
        return STATE_NAVIGATION
    text = (
        f"{info['icon']} <b>{info['name']}</b>\n\n"
        f"{info['description']}\n\n"
        f"<b>–î–∏–∞–ø–∞–∑–æ–Ω —Ü–µ–Ω:</b> {price_info.get('min', price_info.get('base', 0))}‚Äì{price_info.get('max', price_info.get('base', 0))} ‚ÇΩ\n"
        f"<b>–ß—Ç–æ –≤—Ö–æ–¥–∏—Ç:</b> {info['details']}\n"
        f"<b>–ü—Ä–∏–º–µ—Ä—ã:</b> {html.escape(', '.join(info.get('examples', [])))}\n"
        "<b>–°—Ä–æ—á–Ω–æ?</b> –°–¥–µ–ª–∞–µ–º –∑–∞ 24 —á–∞—Å–∞ —Å –Ω–∞–¥–±–∞–≤–∫–æ–π –∏ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –æ–±—Ä–∞—Ç–Ω–æ–π —Å–≤—è–∑—å—é.\n"
        "<b>–§–∞–π–ª—ã:</b> –ø—Ä–∏–∫—Ä–µ–ø–ª—è–π—Ç–µ –º–µ—Ç–æ–¥–∏—á–∫–∏, –∑–∞–¥–∞–Ω–∏—è –∏ –¥–∞–Ω–Ω—ã–µ –ø—Ä—è–º–æ —Å—é–¥–∞ ‚Äî –≤—Å—ë —Å—Ä–∞–∑—É —É–π–¥–µ—Ç –≤ —Ä–∞–±–æ—Ç—É."
    )
    keyboard = [
        [InlineKeyboardButton("üìù –û—Ñ–æ—Ä–º–∏—Ç—å", callback_data=f"order:type:{key}")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main:prices")],
    ]
    await update.callback_query.edit_message_text(text, parse_mode=ParseMode.HTML, reply_markup=InlineKeyboardMarkup(keyboard))
    return STATE_NAVIGATION


async def show_calculator(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    log_user_action(update, "open_calculator")
    keyboard = [
        [InlineKeyboardButton(f"{info['icon']} {info['name']}", callback_data=f"calc:type:{key}")]
        for key, info in ORDER_TYPES.items()
    ]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main:root")])
    await update.callback_query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏:",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )
    return STATE_NAVIGATION


async def calculator_select_deadline(update: Update, context: ContextTypes.DEFAULT_TYPE, key: str) -> int:
    context.user_data.setdefault("calculator", {})["type"] = key
    keyboard = []
    for days, label in DEADLINE_CHOICES:
        keyboard.append([InlineKeyboardButton(label, callback_data=f"calc:deadline:{days}")])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main:calculator")])
    await update.callback_query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:", reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return STATE_NAVIGATION


async def calculator_select_pages(update: Update, context: ContextTypes.DEFAULT_TYPE, days: int) -> int:
    context.user_data.setdefault("calculator", {})["deadline"] = days
    keyboard = [
        [InlineKeyboardButton(option["label"], callback_data=f"calc:pages:{key}")]
        for key, option in PAGE_OPTIONS.items()
    ]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main:calculator")])
    await update.callback_query.edit_message_text(
        "–û—Ü–µ–Ω–∏—Ç–µ –æ–±—ä—ë–º —Ä–∞–±–æ—Ç—ã:", reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return STATE_NAVIGATION


async def show_calculation_result(update: Update, context: ContextTypes.DEFAULT_TYPE, page_key: str) -> int:
    data = context.user_data.get("calculator", {})
    type_key = data.get("type")
    days = int(data.get("deadline", 14))
    if not type_key:
        return await show_calculator(update, context)
    page_option = get_page_option(page_key)
    data["page_key"] = page_key
    multiplier = float(page_option.get("multiplier", 1.0))
    price = calculate_price(type_key, days, multiplier)
    info = ORDER_TYPES.get(type_key, {})
    user = update.effective_user
    discount_value = 0
    if user and not store.get_orders(user.id):
        discount_value = min(int(price * FIRST_ORDER_DISCOUNT_RATE), FIRST_ORDER_DISCOUNT_CAP)
    final_price = max(price - discount_value, 0)
    text = (
        f"–†–∞—Å—á–µ—Ç –¥–ª—è {info.get('icon', '')} <b>{info.get('name', '—Ä–∞–±–æ—Ç—ã')}</b>\n"
        f"–°—Ä–æ–∫: {days} –¥–Ω–µ–π\n"
        f"–û–±—ä—ë–º: {page_option['label']}\n\n"
        f"–ü—Ä–∏–º–µ—Ä–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: <b>{price} ‚ÇΩ</b>\n"
    )
    if discount_value:
        text += f"–°–∫–∏–¥–∫–∞ –Ω–æ–≤–∏—á–∫–∞: ‚àí{discount_value} ‚ÇΩ\n–ò—Ç–æ–≥–æ: <b>{final_price} ‚ÇΩ</b>\n"
    text += "\n–•–æ—Ç–∏—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å?"
    keyboard = [
        [InlineKeyboardButton("üìù –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data=f"order:type:{type_key}")],
        [InlineKeyboardButton("üîÅ –ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å", callback_data="main:calculator")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main:root")],
    ]
    await update.callback_query.edit_message_text(
        text, parse_mode=ParseMode.HTML, reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return STATE_NAVIGATION


async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    if not user:
        return STATE_NAVIGATION
    log_user_action(update, "open_profile")
    orders = store.get_orders(user.id)
    total_orders = len(orders)
    total_spent = store.total_spent(user.id)
    referrals = store.get_referrals(user.id)
    bonus_info = store.get_bonus_info(user.id)
    bonus_balance = int(bonus_info.get("balance", 0))
    bot_username = await get_bot_username(context)
    ref_link = f"https://t.me/{bot_username}?start={user.id}" if bot_username else "‚Äî"
    last_order = orders[-1] if orders else None
    discount_status = (
        "–î–æ—Å—Ç—É–ø–Ω–∞ —Å–∫–∏–¥–∫–∞ 7% –Ω–∞ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ (–¥–æ 3000 ‚ÇΩ)"
        if total_orders == 0
        else "–°–∫–∏–¥–∫–∞ –Ω–æ–≤–∏—á–∫–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ ‚Äî —Ç–µ–ø–µ—Ä—å –∫–æ–ø–∏–º –±–æ–Ω—É—Å—ã"
    )
    profile_lines = [
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å {html.escape(user.first_name or user.full_name or '')}</b>",
        "",
        f"–°—Ç–∞—Ç—É—Å: {'–ù–æ–≤–∏—á–æ–∫' if total_orders == 0 else '–ü–æ—Å—Ç–æ—è–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç'}",
        f"–ó–∞–∫–∞–∑–æ–≤: {total_orders} –Ω–∞ {total_spent} ‚ÇΩ",
        f"–ë–æ–Ω—É—Å–Ω—ã–π —Å—á—ë—Ç: {bonus_balance} ‚ÇΩ",
        f"–†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {len(referrals)} (–ø–æ {REFERRAL_BONUS_AMOUNT} ‚ÇΩ –∑–∞ –∫–∞–∂–¥–æ–≥–æ)",
        discount_status,
    ]
    if last_order:
        profile_lines.extend(
            [
                "",
                f"–ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑ #{last_order.get('order_id')}: {order_type_name_from_record(last_order)}",
                f"–°—Ç–∞—Ç—É—Å: {last_order.get('status', '–≤ —Ä–∞–±–æ—Ç–µ')}",
                f"–°—Ä–æ–∫: {last_order.get('deadline_date', '‚Äî')}",
            ]
        )
    profile_lines.extend(
        [
            "",
            f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {ref_link}",
            "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –µ—é ‚Äî –±–æ–Ω—É—Å—ã –Ω–∞–∫–∞–ø–ª–∏–≤–∞—é—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
        ]
    )
    text = "\n".join(profile_lines)
    keyboard = [
        [InlineKeyboardButton("üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="profile:orders")],
        [InlineKeyboardButton("‚≠ê –û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data="profile:feedback")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main:root")],
    ]
    await update.callback_query.edit_message_text(
        text, parse_mode=ParseMode.HTML, reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return STATE_NAVIGATION


async def show_user_orders(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user = update.effective_user
    if not user:
        return STATE_NAVIGATION
    orders = store.get_orders(user.id)
    if not orders:
        text = "–ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤. –°–∞–º–æ–µ –≤—Ä–µ–º—è –æ—Ñ–æ—Ä–º–∏—Ç—å –ø–µ—Ä–≤—ã–π!"
    else:
        lines = []
        for order in orders[-10:]:
            name = order_type_name_from_record(order)
            attachments_count = len(order.get("attachments", []))
            discount_amount = int(order.get("discount", 0))
            lines.append(
                f"#{order.get('order_id')} ‚Äî {name}\n"
                f"–¢–µ–º–∞: {order.get('topic')}\n"
                f"–°—Ä–æ–∫: {order.get('deadline_date')}\n"
                f"–û–±—ä—ë–º: {order.get('page_plan', '‚Äî')}\n"
                f"–°—Ç–∞—Ç—É—Å: {order.get('status', '–≤ —Ä–∞–±–æ—Ç–µ')}\n"
                f"–°—É–º–º–∞: {order.get('price', 0)} ‚ÇΩ (—Å–∫–∏–¥–∫–∞ {discount_amount} ‚ÇΩ)\n"
                f"–§–∞–π–ª–æ–≤: {attachments_count}\n"
            )
        text = "\n".join(lines) + "\n–ï—Å–ª–∏ –ø–æ—è–≤–∏–ª–∏—Å—å –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã –∏–ª–∏ –≤–æ–ø—Ä–æ—Å—ã ‚Äî –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è."
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main:profile")]]
    await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    return STATE_NAVIGATION


async def request_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    await update.callback_query.edit_message_text(
        "–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è–º–∏ –æ –Ω–∞—à–µ–π —Ä–∞–±–æ—Ç–µ. –û—Ç–∑—ã–≤ —É–≤–∏–¥–∏—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –∏ –ø–æ–¥–∞—Ä–∏—Ç –±–æ–Ω—É—Å—ã!"
    )
    return STATE_FEEDBACK


async def receive_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    feedback = update.message.text.strip()
    user = update.effective_user
    if not feedback:
        await update.message.reply_text("–û—Ç–∑—ã–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
        return STATE_FEEDBACK
    store.add_feedback(user.id, feedback)
    log_user_action(update, "feedback_left")
    await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –ú—ã —Ü–µ–Ω–∏–º –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å ‚Äî –º–µ–Ω–µ–¥–∂–µ—Ä –æ—Ç–≤–µ—Ç–∏—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
    for admin_chat_id in store.get_notification_chat_ids():
        try:
            await context.bot.send_message(
                admin_chat_id,
                f"–ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç {user.id} ({user.username or user.full_name}):\n{feedback}",
            )
        except Exception as exc:  # pragma: no cover
            logger.error("Failed to send feedback to admin %s: %s", admin_chat_id, exc)
    return await show_main_menu(update, context)


async def show_faq(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    keyboard = [
        [InlineKeyboardButton(item["question"], callback_data=f"faq:item:{idx}")]
        for idx, item in enumerate(FAQ_ITEMS)
    ]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main:root")])
    await update.callback_query.edit_message_text(
        "–ß–∞—Å—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –ø—É–Ω–∫—Ç:",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )
    return STATE_NAVIGATION


async def show_faq_item(update: Update, idx: int) -> int:
    if idx < 0 or idx >= len(FAQ_ITEMS):
        await update.callback_query.edit_message_text("–í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return STATE_NAVIGATION
    item = FAQ_ITEMS[idx]
    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main:faq")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main:root")],
    ]
    await update.callback_query.edit_message_text(
        f"‚ùì <b>{item['question']}</b>\n\n{item['answer']}",
        parse_mode=ParseMode.HTML,
        reply_markup=InlineKeyboardMarkup(keyboard),
    )
    return STATE_NAVIGATION

async def show_admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not await ensure_owner_access(update, context):
        return STATE_NAVIGATION
    keyboard = [
        [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="admin:stats")],
        [InlineKeyboardButton("üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã", callback_data="admin:orders")],
        [InlineKeyboardButton("üí∞ –†–µ–∂–∏–º —Ü–µ–Ω–æ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è", callback_data="admin:pricing")],
        [InlineKeyboardButton("üéÅ –ë–æ–Ω—É—Å—ã –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã", callback_data="admin:bonuses")],
        [InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç –≤ Excel", callback_data="admin:export")],
        [InlineKeyboardButton("‚ôªÔ∏è –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="admin:status_list")],
        [InlineKeyboardButton("üóÇ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è", callback_data="admin:logs")],
        [InlineKeyboardButton("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞", callback_data="admin:restart")],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main:root")],
    ]
    text = "üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    if update.message:
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update.callback_query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    return STATE_NAVIGATION


async def restart_bot(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not await ensure_owner_access(update, context):
        return STATE_NAVIGATION
    user = update.effective_user
    source = "callback" if update.callback_query else "command"
    notify_text = "–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞. –û–Ω –≤–µ—Ä–Ω—ë—Ç—Å—è —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
    if update.callback_query:
        await update.callback_query.answer("–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞—é‚Ä¶")
        await context.bot.send_message(chat_id=user.id, text=notify_text)
    elif update.message:
        await update.message.reply_text(notify_text)
    logger.warning("Restart requested by admin %s via %s", user.id, source)
    schedule_restart()
    return STATE_NAVIGATION


async def admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    log_user_action(update, "admin_command")
    return await show_admin_menu(update, context)


async def admin_show_stats(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not await ensure_owner_access(update, context):
        return STATE_NAVIGATION
    stats = store.get_statistics()
    text = (
        "üìä <b>–°–≤–æ–¥–∫–∞ –ø–æ –∑–∞–∫–∞–∑–∞–º</b>\n\n"
        f"–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {stats['orders']}\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤: {stats['active']}\n"
        f"–í—ã—Ä—É—á–∫–∞: {stats['revenue']} ‚ÇΩ\n"
        f"–ö–ª–∏–µ–Ω—Ç–æ–≤: {stats['users']}\n"
        f"–†–µ—Ñ–µ—Ä–∞–ª–æ–≤: {stats['referrals']}\n"
        f"–ù–∞—á–∏—Å–ª–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤: {stats['bonuses']} ‚ÇΩ"
    )
    await update.callback_query.edit_message_text(text, parse_mode=ParseMode.HTML, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:menu")]]))
    return STATE_NAVIGATION


async def admin_show_orders(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not await ensure_owner_access(update, context):
        return STATE_NAVIGATION
    records = [order for orders in store.orders.values() for order in orders]
    records = sorted(records, key=lambda item: item.get("created_at", ""), reverse=True)[:10]
    if not records:
        text = "–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."
    else:
        lines = []
        for record in records:
            name = order_type_name_from_record(record)
            base_amount = int(record.get("base_price", record.get("price", 0)))
            discount_amount = int(record.get("discount", 0))
            final_amount = int(record.get("price", 0))
            attachments_count = len(record.get("attachments", []))
            upsell_titles = [
                UPSELL_OPTIONS.get(key, {}).get("title", key)
                for key in record.get("upsells", [])
            ]
            lines.append(
                f"#{record.get('order_id')} ‚Äî {name}\n"
                f"–¢–µ–º–∞: {record.get('topic')}\n"
                f"–û–±—ä—ë–º: {record.get('page_plan', '‚Äî')}\n"
                f"–û–ø—Ü–∏–∏: {', '.join(upsell_titles) if upsell_titles else '–Ω–µ—Ç'}\n"
                f"–°—Ç–∞—Ç—É—Å: {record.get('status', '–≤ —Ä–∞–±–æ—Ç–µ')}\n"
                f"–°—É–º–º–∞: {final_amount} ‚ÇΩ (–±–∞–∑–∞ {base_amount} ‚ÇΩ, —Å–∫–∏–¥–∫–∞ {discount_amount} ‚ÇΩ)\n"
                f"–§–∞–π–ª—ã: {attachments_count}\n"
            )
        text = "\n".join(lines)
    await update.callback_query.edit_message_text(
        text, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:menu")]])
    )
    return STATE_NAVIGATION


async def admin_request_pricing_mode(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not await ensure_owner_access(update, context):
        return STATE_NAVIGATION
    context.user_data["admin_state"] = "pricing_mode"
    await update.callback_query.edit_message_text(
        f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {store.get_pricing_mode()}. –í–≤–µ–¥–∏—Ç–µ hard –∏–ª–∏ light:",
    )
    return STATE_ADMIN


async def admin_export(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not await ensure_owner_access(update, context):
        return STATE_NAVIGATION
    path = store.export_orders()
    if not path:
        await update.callback_query.edit_message_text(
            "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:menu")]])
        )
        return STATE_NAVIGATION
    await update.callback_query.edit_message_text("–û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª —Å –∑–∞–∫–∞–∑–∞–º–∏‚Ä¶")
    try:
        owner_chat_id = store.get_owner_chat_id()
        if owner_chat_id:
            await context.bot.send_document(owner_chat_id, document=path.open("rb"))
    finally:
        path.unlink(missing_ok=True)
    await update.callback_query.edit_message_text(
        "–≠–∫—Å–ø–æ—Ä—Ç –∑–∞–∫–∞–∑–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω ‚úÖ",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:menu")]]),
    )
    return STATE_NAVIGATION


async def admin_show_bonuses(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not await ensure_owner_access(update, context):
        return STATE_NAVIGATION
    stats = store.list_referral_stats()
    if not stats:
        text = "–ë–æ–Ω—É—Å–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç. –î–µ–ª–∏—Ç–µ—Å—å —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –∫–ª–∏–µ–Ω—Ç–æ–≤."
    else:
        lines = [
            f"{entry['user_id']}: –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π {entry['count']}, –±–æ–Ω—É—Å–æ–≤ {entry['bonus']} ‚ÇΩ"
            for entry in stats[:10]
        ]
        text = "\n".join(lines)
        text += f"\n\n–ë–æ–Ω—É—Å –∑–∞ —Ä–µ—Ñ–µ—Ä–∞–ª–∞: {REFERRAL_BONUS_AMOUNT} ‚ÇΩ."
    await update.callback_query.edit_message_text(
        text,
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:menu")]]),
    )
    return STATE_NAVIGATION


async def admin_show_logs(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not await ensure_owner_access(update, context):
        return STATE_NAVIGATION
    last_logs = []
    for user_id, logs in store.user_logs.items():
        if logs:
            last_logs.append((user_id, logs[-1]))
    if not last_logs:
        text = "–õ–æ–≥–∏ –ø–æ–∫–∞ –ø—É—Å—Ç—ã."
    else:
        lines = [
            f"{user_id}: {entry['action']} ({entry['timestamp']})"
            for user_id, entry in last_logs[-10:]
        ]
        text = "\n".join(lines)
    await update.callback_query.edit_message_text(
        text, reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:menu")]])
    )
    return STATE_NAVIGATION


async def admin_list_status_targets(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not await ensure_owner_access(update, context):
        return STATE_NAVIGATION
    records = store.list_recent_orders(limit=12)
    if not records:
        await update.callback_query.edit_message_text(
            "–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:menu")]]),
        )
        return STATE_NAVIGATION
    keyboard: List[List[InlineKeyboardButton]] = []
    for record in records:
        order_id = int(record.get("order_id", 0))
        user_id = int(record.get("user_id", 0))
        name = order_type_name_from_record(record)
        status_key = str(record.get("status_key", "")) or "new"
        status_label = record.get("status") or ORDER_STATUS_TITLES.get(status_key, "‚Äî")
        label = f"#{order_id} ‚Äî {name} ({status_label})"
        if len(label) > 60:
            label = label[:57] + "‚Ä¶"
        callback = f"admin:status_select:{user_id}:{order_id}"
        keyboard.append([InlineKeyboardButton(label, callback_data=callback)])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:menu")])
    await update.callback_query.edit_message_text(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å:",
        reply_markup=InlineKeyboardMarkup(keyboard),
    )
    return STATE_NAVIGATION


async def admin_select_status(
    update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: int, order_id: int
) -> int:
    if not await ensure_owner_access(update, context):
        return STATE_NAVIGATION
    context.user_data["admin_status_target"] = {"user_id": user_id, "order_id": order_id}
    record = store.get_order(user_id, order_id)
    if record is None:
        # –ó–∞–ø—Ä–æ—Å–∏–ª–∏ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∑–∞–∫–∞–∑, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É.
        context.user_data.pop("admin_status_target", None)
        await update.callback_query.edit_message_text(
            "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω. –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω –±—ã–ª —É–¥–∞–ª–µ–Ω.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:status_list")]]),
        )
        return STATE_NAVIGATION
    original_status_key = str(record.get("status_key", "new") or "new")
    original_status_title = record.get("status") or ORDER_STATUS_TITLES.get(original_status_key, "‚Äî")
    order_name = order_type_name_from_record(record)
    keyboard = [
        [InlineKeyboardButton(title, callback_data=f"admin:status_apply:{key}")]
        for key, title in ORDER_STATUS_TITLES.items()
    ]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:status_list")])
    text = (
        f"–ó–∞–∫–∞–∑ #{order_id} ‚Äî {order_name}\n"
        f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {original_status_title}\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:"
    )
    await update.callback_query.edit_message_text(
        text, reply_markup=InlineKeyboardMarkup(keyboard)
    )
    return STATE_NAVIGATION


async def admin_apply_status(
    update: Update, context: ContextTypes.DEFAULT_TYPE, status_key: str
) -> int:
    if not await ensure_owner_access(update, context):
        return STATE_NAVIGATION
    target = context.user_data.get("admin_status_target")
    if not target:
        return await admin_list_status_targets(update, context)
    user_id = int(target.get("user_id", 0))
    order_id = int(target.get("order_id", 0))
    status_title = ORDER_STATUS_TITLES.get(status_key, status_key)
    record = store.update_order_status(user_id, order_id, status_key, status_title)
    if not record:
        await update.callback_query.edit_message_text(
            "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å (–∑–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω).",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="admin:status_list")]]),
        )
        return STATE_NAVIGATION
    log_user_action(update, f"admin_status:{order_id}:{status_key}")
    await update.callback_query.edit_message_text(
        f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ #{order_id} –æ–±–Ω–æ–≤–ª–µ–Ω: {status_title}",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –í –º–µ–Ω—é", callback_data="admin:menu")]]),
    )
    try:
        await context.bot.send_message(
            user_id,
            (
                f"–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ #{order_id}: {status_title}.\n"
                f"–ï—Å–ª–∏ –Ω—É–∂–Ω–æ –æ–±—Å—É–¥–∏—Ç—å –¥–µ—Ç–∞–ª–∏ ‚Äî –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –ø–∏—à–∏—Ç–µ {MANAGER_CONTACT_LINK}."
            ),
        )
    except Exception as exc:  # pragma: no cover - –∑–∞–≤–∏—Å–∏—Ç –æ—Ç Telegram API
        logger.warning("Could not notify user %s about status change: %s", user_id, exc)
    context.user_data.pop("admin_status_target", None)
    return STATE_NAVIGATION


async def handle_admin_text(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    if not await ensure_owner_access(update, context):
        return STATE_NAVIGATION
    state = context.user_data.pop("admin_state", None)
    if state == "pricing_mode":
        choice = update.message.text.strip().lower()
        if choice not in {"hard", "light"}:
            context.user_data["admin_state"] = "pricing_mode"
            await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ hard –∏–ª–∏ light.")
            return STATE_ADMIN
        store.set_pricing_mode(choice)
        await update.message.reply_text(f"–†–µ–∂–∏–º —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {choice}")
        return await show_admin_menu(update, context)
    await update.message.reply_text("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é.")
    return STATE_ADMIN

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    query = update.callback_query
    await query.answer()
    data = query.data
    log_user_action(update, f"callback:{data}")
    if data == "main:root":
        return await show_main_menu(update, context)
    if data == "main:order" or data == "order:list":
        return await show_order_types(update, context)
    if data.startswith("order:type:"):
        key = data.split(":", maxsplit=2)[2]
        return await show_order_details(update, key)
    if data.startswith("order:new:"):
        key = data.split(":", maxsplit=2)[2]
        return await prompt_order_topic(update, context, key)
    if data.startswith("order:deadline:"):
        days = int(data.split(":", maxsplit=2)[2])
        return await handle_deadline(update, context, days)
    if data.startswith("order:pages:"):
        key = data.split(":", maxsplit=2)[2]
        return await handle_page_selection(update, context, key)
    if data.startswith("order:upsell:"):
        key = data.split(":", maxsplit=2)[2]
        if key:
            return await toggle_upsell(update, context, key)
    if data == "order:upsell":
        return await show_upsell_menu(update, context)
    if data == "order:summary":
        return await show_order_summary_step(update, context)
    if data == "order:req_finish":
        return await finish_requirements(update, context)
    if data == "order:confirm":
        return await confirm_order(update, context)
    if data == "order:cancel":
        return await cancel_order(update, context)
    if data == "main:prices":
        return await show_price_list(update, context)
    if data.startswith("prices:detail:"):
        key = data.split(":", maxsplit=2)[2]
        return await show_price_detail(update, key)
    if data == "main:calculator":
        return await show_calculator(update, context)
    if data.startswith("calc:type:"):
        key = data.split(":", maxsplit=2)[2]
        return await calculator_select_deadline(update, context, key)
    if data.startswith("calc:deadline:"):
        days = int(data.split(":", maxsplit=2)[2])
        return await calculator_select_pages(update, context, days)
    if data.startswith("calc:pages:"):
        key = data.split(":", maxsplit=2)[2]
        return await show_calculation_result(update, context, key)
    if data == "main:profile" or data == "profile:back":
        return await show_profile(update, context)
    if data == "profile:orders":
        return await show_user_orders(update, context)
    if data == "profile:feedback":
        return await request_feedback(update, context)
    if data == "main:faq":
        return await show_faq(update, context)
    if data.startswith("faq:item:"):
        idx = int(data.split(":", maxsplit=2)[2])
        return await show_faq_item(update, idx)
    if data == "admin:menu":
        return await show_admin_menu(update, context)
    if data == "admin:stats":
        return await admin_show_stats(update, context)
    if data == "admin:orders":
        return await admin_show_orders(update, context)
    if data == "admin:pricing":
        return await admin_request_pricing_mode(update, context)
    if data == "admin:export":
        return await admin_export(update, context)
    if data == "admin:bonuses":
        return await admin_show_bonuses(update, context)
    if data == "admin:logs":
        return await admin_show_logs(update, context)
    if data == "admin:restart":
        return await restart_bot(update, context)
    if data == "admin:status_list":
        return await admin_list_status_targets(update, context)
    if data.startswith("admin:status_select:"):
        try:
            _, _, user_str, order_str = data.split(":", maxsplit=3)
            return await admin_select_status(update, context, int(user_str), int(order_str))
        except (ValueError, IndexError):
            await update.callback_query.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∑–∞–∫–∞–∑", show_alert=True)
            return STATE_NAVIGATION
    if data.startswith("admin:status_apply:"):
        status_key = data.split(":", maxsplit=2)[2]
        return await admin_apply_status(update, context, status_key)
    await query.edit_message_text("–ö–æ–º–∞–Ω–¥–∞ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –º–µ–Ω—é.")
    return await show_main_menu(update, context)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    log_user_action(update, "start")
    user = update.effective_user
    context.user_data.pop("order_draft", None)
    promoted_text = ""
    owner_chat_id = store.get_owner_chat_id()
    if user and owner_chat_id == 0:
        store.set_owner_chat_id(user.id, user.username or user.full_name or "")
        owner_chat_id = user.id
        promoted_text = (
            "\n\n–í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –±–æ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞–º–∏."
        )
    if context.args:
        payload = context.args[0]
        if payload.isdigit():
            referrer_id = int(payload)
            if referrer_id != user.id and store.add_referral(referrer_id, user.id):
                for admin_id in store.get_notification_chat_ids():
                    try:
                        await context.bot.send_message(
                            admin_id,
                            f"–ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª: {user.id} (–ø—Ä–∏–≥–ª–∞—Å–∏–ª {referrer_id})",
                        )
                    except Exception as exc:  # pragma: no cover
                        logger.error(
                            "Failed to notify admin %s about referral: %s",
                            admin_id,
                            exc,
                        )
                try:
                    bonus_info = store.get_bonus_info(referrer_id)
                    await context.bot.send_message(
                        referrer_id,
                        (
                            f"üî• –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ —Å—Ä–∞–±–æ—Ç–∞–ª–∞! +{REFERRAL_BONUS_AMOUNT} ‚ÇΩ –Ω–∞ –±–æ–Ω—É—Å–Ω—ã–π —Å—á—ë—Ç.\n"
                            f"–ë–∞–ª–∞–Ω—Å: {bonus_info.get('balance', 0)} ‚ÇΩ."
                        ),
                    )
                except Exception as exc:  # pragma: no cover
                    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ %s: %s", referrer_id, exc)
    greeting = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {html.escape(user.first_name or user.full_name or '–¥—Ä—É–≥')}!\n\n"
        "–Ø –ø–æ–º–æ–≥—É –æ—Ñ–æ—Ä–º–∏—Ç—å –ª—é–±—É—é —É—á–µ–±–Ω—É—é —Ä–∞–±–æ—Ç—É: –æ—Ç —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ–π –¥–æ –º–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–æ–π."
    )
    if WELCOME_MESSAGE:
        greeting += f"\n{WELCOME_MESSAGE}"
    existing_orders = store.get_orders(user.id)
    if not existing_orders:
        greeting += "\nüéÅ –ù–∞ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ –¥–µ–π—Å—Ç–≤—É–µ—Ç —Å–∫–∏–¥–∫–∞ 7% (–¥–æ 3000 ‚ÇΩ)."
    if promoted_text:
        greeting += promoted_text
    if update.message:
        await update.message.reply_text(greeting)
    return await show_main_menu(update, context, "–ì–æ—Ç–æ–≤—ã —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑?")


async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    text = (
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –≥–ª–∞–≤–Ω–æ–º—É –º–µ–Ω—é.\n"
        "–ö–Ω–æ–ø–∫–∞ 'üìù –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑' –∑–∞–ø—É—Å—Ç–∏—Ç –ø–æ—à–∞–≥–æ–≤–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å —Ñ–∞–π–ª—ã.\n"
        "–ö–æ–º–∞–Ω–¥—ã /done –∏ /skip –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞ —ç—Ç–∞–ø–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π.\n"
        "–ö–æ–º–∞–Ω–¥–∞ /cancel –∑–∞–≤–µ—Ä—à–∏—Ç —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å."
    )
    await update.message.reply_text(text)


async def cancel_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    return await cancel_order(update, context)


async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    logger.exception("Unhandled error: %s", context.error)
    for admin_chat_id in store.get_notification_chat_ids():
        try:
            await context.bot.send_message(admin_chat_id, f"–û—à–∏–±–∫–∞ –≤ –±–æ—Ç–µ: {context.error}")
        except Exception:  # pragma: no cover
            pass


def build_application():
    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            STATE_NAVIGATION: [CallbackQueryHandler(handle_callback)],
            STATE_ORDER_TOPIC: [
                CallbackQueryHandler(handle_callback),
                MessageHandler(filters.TEXT & ~filters.COMMAND, receive_topic),
            ],
            STATE_ORDER_PAGES: [CallbackQueryHandler(handle_callback)],
            STATE_ORDER_REQUIREMENTS: [
                CallbackQueryHandler(handle_callback),
                MessageHandler(filters.TEXT & ~filters.COMMAND, receive_requirements),
                 MessageHandler(filters.ATTACHMENT, handle_requirement_attachment),
                CommandHandler("skip", skip_requirements),
                CommandHandler("done", finish_requirements),
            ],
            STATE_FEEDBACK: [
                CallbackQueryHandler(handle_callback),
                MessageHandler(filters.TEXT & ~filters.COMMAND, receive_feedback),
            ],
            STATE_ADMIN: [
                CallbackQueryHandler(handle_callback),
                MessageHandler(filters.TEXT & ~filters.COMMAND, handle_admin_text),
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel_command), CommandHandler("start", start)],
        allow_reentry=True,
    )
    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("admin", admin_command))
    application.add_handler(CommandHandler("restart_bot", restart_bot))
    application.add_error_handler(error_handler)
    return application


def main() -> None:
    application = build_application()
    application.run_polling(drop_pending_updates=True)


if __name__ == "__main__":
    main()
