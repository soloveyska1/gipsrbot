import os
import logging
import json
import html
import re
import csv
from typing import Optional
from datetime import datetime, timedelta
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, ContextTypes,
    CallbackQueryHandler, MessageHandler, filters, ConversationHandler
)
from telegram.constants import ParseMode
from telegram.error import TelegramError
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ADMIN_CHAT_ID = int(os.getenv('ADMIN_CHAT_ID', 0))

# –î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
BASE_DIR = os.path.join(os.getcwd(), 'clients')
DATA_DIR = os.path.join(os.getcwd(), 'data')
LOGS_DIR = os.path.join(os.getcwd(), 'logs')
for directory in [BASE_DIR, DATA_DIR, LOGS_DIR]:
    os.makedirs(directory, exist_ok=True)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)
file_handler = logging.FileHandler(os.path.join(LOGS_DIR, 'bot.log'))
file_handler.setFormatter(logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s'))
logger.addHandler(file_handler)

# –§–∞–π–ª—ã –¥–∞–Ω–Ω—ã—Ö
PRICES_FILE = os.path.join(DATA_DIR, 'prices.json')
REFERRALS_FILE = os.path.join(DATA_DIR, 'referrals.json')
ORDERS_FILE = os.path.join(DATA_DIR, 'orders.json')
FEEDBACKS_FILE = os.path.join(DATA_DIR, 'feedbacks.json')
BONUSES_FILE = os.path.join(DATA_DIR, 'bonuses.json')
USER_LOGS_FILE = os.path.join(DATA_DIR, 'user_logs.json')
USERS_FILE = os.path.join(DATA_DIR, 'users.json')

# –§—É–Ω–∫—Ü–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
def load_json(file_path, default=None):
    try:
        if os.path.exists(file_path):
            with open(file_path, 'r', encoding='utf-8') as f:
                return json.load(f)
        return default or {}
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ {file_path}: {e}")
        return default or {}

def save_json(file_path, data):
    try:
        with open(file_path, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=4)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {file_path}: {e}")

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É—é—Ç—Å—è –ø–æ–∑–∂–µ —á–µ—Ä–µ–∑ initialize_storage)
PRICES = {}
REFERALS = {}
ORDERS = {}
FEEDBACKS = {}
BONUSES = {}
USER_LOGS = {}
USERS = {}

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
DEFAULT_PRICES = {
    'samostoyatelnye': {'base': 2500, 'min': 2500},
    'kursovaya_teoreticheskaya': {'base': 8000, 'min': 8000},
    'kursovaya_s_empirikov': {'base': 12000, 'min': 12000},
    'diplomnaya': {'base': 35000, 'min': 35000},
    'magisterskaya': {'base': 40000, 'min': 40000},
    'normcontrol': {'base': 5000, 'min': 5000},
}

LEGACY_PRICE_KEYS = {
    'self': 'samostoyatelnye',
    'course_theory': 'kursovaya_teoreticheskaya',
    'course_empirical': 'kursovaya_s_empirikov',
    'vkr': 'diplomnaya',
    'master': 'magisterskaya',
}


def normalize_prices(raw_prices):
    normalized = {key: value.copy() for key, value in DEFAULT_PRICES.items()}
    if not isinstance(raw_prices, dict):
        return normalized

    for raw_key, raw_value in raw_prices.items():
        target_key = LEGACY_PRICE_KEYS.get(raw_key, raw_key)
        if not isinstance(raw_value, dict):
            continue
        base = float(raw_value.get('base', 0) or 0)
        minimum = float(raw_value.get('min', 0) or 0)
        default_entry = DEFAULT_PRICES.get(target_key, {'base': 0, 'min': 0})
        default_base = default_entry.get('base', 0)
        default_min = default_entry.get('min', default_base)
        if base <= 0:
            base = default_base
        base = max(base, default_base)
        if minimum <= 0:
            minimum = max(base, default_min)
        minimum = max(minimum, base, default_min)
        normalized[target_key] = {
            'base': int(base),
            'min': int(minimum),
        }
    return normalized


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π

ORDER_TYPES = {
    'samostoyatelnye': {
        'name': '–°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã–µ, –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ, —ç—Å—Å–µ',
        'icon': 'üìù',
        'description': (
            '–ë—ã—Å—Ç—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ ‚Äî —ç—Å—Å–µ, –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ, —Ä–µ—Ñ–µ—Ä–∞—Ç—ã. –£–∂–µ 5000+ —Ä–∞–±–æ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–æ –∏–¥–µ–∞–ª—å–Ω–æ üî•\n\n'
            '–ü–æ–¥—Ö–æ–¥–∏—Ç, –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—É—é –±–µ–∑ —Å—Ç—Ä–µ—Å—Å–∞ –∏ –∑–∞–¥–µ—Ä–∂–µ–∫.'
        ),
        'details': (
            '‚Ä¢ –û–±—ä—ë–º: –æ—Ç 1 —Å—Ç—Ä–∞–Ω–∏—Ü—ã –¥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã—Ö —Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω—ã—Ö —Å–≤—ã—à–µ 20 —Å—Ç—Ä–∞–Ω–∏—Ü.\n'
            '‚Ä¢ –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: –ø—Å–∏—Ö–æ–ª–æ–≥–∏—è, —Å–æ—Ü–∏–∞–ª—å–Ω–∞—è —Ä–∞–±–æ—Ç–∞, –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–ª–æ–≥–∏—è –∏ —Å–º–µ–∂–Ω—ã–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—ã.\n'
            '‚Ä¢ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø–æ —Å—Ä–æ–∫–∞–º, —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ –æ–±—ä—ë–º—É ‚Äî –ø–æ–¥–±–∏—Ä–∞–µ–º —Ä–µ—à–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–≥–æ–¥–Ω–æ –∏ –Ω–∞–¥—ë–∂–Ω–æ.'
        ),
        'examples': ['–≠—Å—Å–µ –ø–æ –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ –ª–∏—á–Ω–æ—Å—Ç–∏', '–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è –ø–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–ª–æ–≥–∏–∏', '–†–µ—Ñ–µ—Ä–∞—Ç –ø–æ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ']
    },
    'kursovaya_teoreticheskaya': {
        'name': '–ö—É—Ä—Å–æ–≤–∞—è —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è',
        'icon': 'üìò',
        'description': '–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã. –ü–æ–ª—É—á–∏—Ç–µ –æ—Ç–ª–∏—á–Ω—É—é –æ—Ü–µ–Ω–∫—É –±–µ–∑ —Å—Ç—Ä–µ—Å—Å–∞! üìà',
        'details': '–¢–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∞—è –æ—Å–Ω–æ–≤–∞, –∞–Ω–∞–ª–∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤, —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ –ì–û–°–¢.',
        'examples': ['–¢–µ–æ—Ä–∏—è –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–∞', '–û–±–∑–æ—Ä –ø—Å–∏—Ö–æ–ª–æ–≥–∏–∏ —Ä–∞–∑–≤–∏—Ç–∏—è']
    },
    'kursovaya_s_empirikov': {
        'name': '–ö—É—Ä—Å–æ–≤–∞—è —Å —ç–º–ø–∏—Ä–∏–∫–æ–π',
        'icon': 'üìä',
        'description': (
            '–¢–µ–æ—Ä–∏—è + –¥–∞–Ω–Ω—ã–µ –∏ –≥–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑.\n'
            '–ö–ª–∏–µ–Ω—Ç—ã –≥–æ–≤–æ—Ä—è—Ç: "–õ—É—á—à–∞—è –ø–æ–º–æ—â—å!" ‚≠êÔ∏è'
        ),
        'details': (
            '‚Ä¢ –†–∞–±–æ—Ç–∞–µ–º —Å —Å–æ–±—Ä–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∏–ª–∏ –≤–º–µ—Å—Ç–µ —Å –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º –æ—Ä–≥–∞–Ω–∏–∑—É–µ–º —Å–±–æ—Ä –ø–æ–¥ –≤–∞—à—É —Ç–µ–º—É.\n'
            '‚Ä¢ –ü—Ä–æ–≤–æ–¥–∏–º –æ–ø—Ä–æ—Å—ã, —Ä–∞—Å—á—ë—Ç—ã –∏ –º–∞—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.\n'
            '‚Ä¢ –û—Ñ–æ—Ä–º–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã, –≥—Ä–∞—Ñ–∏–∫–∏, –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –≤—É–∑–∞.\n\n'
            '–ü—Ä–∏–º–µ—Ä—ã: –ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞, –ê–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π\n\n'
            '–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: 12000 ‚ÇΩ –ø—Ä–∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–æ–∫–∞—Ö.\n\n'
            '–ì–æ—Ç–æ–≤—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?'
        ),
        'examples': ['–ò—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ —Ä—ã–Ω–∫–∞', '–ê–Ω–∞–ª–∏–∑ –ø–æ–≤–µ–¥–µ–Ω–∏—è –ø–æ—Ç—Ä–µ–±–∏—Ç–µ–ª–µ–π']
    },
    'diplomnaya': {
        'name': '–î–∏–ø–ª–æ–º–Ω–∞—è —Ä–∞–±–æ—Ç–∞',
        'icon': 'üéì',
        'description': '–ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π –∑–∞—â–∏—Ç—ã. –°–∫–∏–¥–∫–∞ 10% –Ω–∞ –ø–µ—Ä–≤—ã–π –¥–∏–ø–ª–æ–º! üíº',
        'details': '–ì–ª—É–±–æ–∫–∏–π –∞–Ω–∞–ª–∏–∑, —ç–º–ø–∏—Ä–∏–∫–∞ –∏ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ –¥–æ –∑–∞—â–∏—Ç—ã.',
        'examples': ['–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –∞–¥–∞–ø—Ç–∞—Ü–∏—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤', '–°—Ç—Ä–∞—Ç–µ–≥–∏–∏ —É—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –≤ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏']
    },
    'magisterskaya': {
        'name': '–ú–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–∞—è –¥–∏—Å—Å–µ—Ä—Ç–∞—Ü–∏—è',
        'icon': 'üîç',
        'description': '–ò–Ω–Ω–æ–≤–∞—Ü–∏–æ–Ω–Ω–æ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ. –í—ã—Å–æ–∫–∞—è –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏ –≥–ª—É–±–∏–Ω–∞ –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∏. üåü',
        'details': '–ù–∞—É—á–Ω–∞—è –Ω–æ–≤–∏–∑–Ω–∞, –ø—Ä–æ–¥—É–º–∞–Ω–Ω–∞—è –º–µ—Ç–æ–¥–æ–ª–æ–≥–∏—è, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—É–±–ª–∏–∫–∞—Ü–∏—è–º.',
        'examples': ['–†–∞–∑–≤–∏—Ç–∏–µ —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π', '–°–æ—Ü–∏–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ —Å–µ–º–µ–π –≤ –∫—Ä–∏–∑–∏—Å–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö']
    },
    'normcontrol': {
        'name': '–ù–æ—Ä–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—å',
        'icon': 'üìê',
        'description': '–ü—Ä–æ–≤–µ—Ä–∏–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ –ì–û–°–¢ –∏ –º–µ—Ç–æ–¥–∏—á–∫–∞–º –±–µ–∑ —Å—Ç—Ä–µ—Å—Å–∞. –ë—ã—Å—Ç—Ä—ã–π —Ä–∞–∑–±–æ—Ä –∑–∞–º–µ—á–∞–Ω–∏–π.',
        'details': '–ü—Ä–∏–≤–µ–¥–µ–º —Ç–µ–∫—Å—Ç –≤ –∏–¥–µ–∞–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: —Å—Ç—Ä—É–∫—Ç—É—Ä–∞, —Å—Å—ã–ª–∫–∏, —Å–ø–∏—Å–∫–∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã. –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å ‚Äî 5000 ‚ÇΩ, –¥–∞–ª–µ–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç –æ–±—ä–µ–º–∞ –∏ —Å—Ä–æ—á–Ω–æ—Å—Ç–∏.',
        'examples': ['–ù–æ—Ä–º–æ–∫–æ–Ω—Ç—Ä–æ–ª—å –¥–∏–ø–ª–æ–º–∞', '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—É—Ä—Å–æ–≤–æ–π –ø–µ—Ä–µ–¥ —Å–¥–∞—á–µ–π']
    }
}

UPSELL_LABELS = {
    'prez': '–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è',
    'speech': '–†–µ—á—å'
}

UPSELL_PRICES = {
    'prez': 2000,
    'speech': 1000,
}

EXPORT_FIELD_ORDER = [
    'user_id',
    'order_id',
    'type',
    'topic',
    'status',
    'status_code',
    'created_at',
    'updated_at',
    'deadline_key',
    'deadline_label',
    'deadline_days',
    'price',
    'bonus_used',
    'referrer_id',
    'referral_rewarded',
    'loyalty_rewarded',
    'upsells',
    'contact',
    'contact_link',
    'requirements',
    'files',
    'status_history',
]

FEEDBACK_BONUS_AMOUNT = 200

LOYALTY_BONUS_RATE = 0.1
LOYALTY_BONUS_MIN = 300
REFERRAL_BONUS_RATE = 0.05
REFERRAL_BONUS_MIN = 200
BONUS_EXPIRATION_DAYS = 30
BONUS_USAGE_LIMIT = 0.5

ORDER_STATUS_CHOICES = [
    {'code': 'new', 'label': 'üÜï –ù–æ–≤—ã–π'},
    {'code': 'confirmed', 'label': '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω'},
    {'code': 'in_progress', 'label': '‚öôÔ∏è –í —Ä–∞–±–æ—Ç–µ'},
    {'code': 'waiting_payment', 'label': 'üí≥ –ñ–¥—ë—Ç –æ–ø–ª–∞—Ç—É'},
    {'code': 'paid', 'label': 'üí∞ –û–ø–ª–∞—á–µ–Ω'},
    {'code': 'ready', 'label': 'üì¶ –ì–æ—Ç–æ–≤'},
    {'code': 'delivered', 'label': 'üèÅ –ó–∞–≤–µ—Ä—à—ë–Ω'},
    {'code': 'paused', 'label': '‚è∏ –ù–∞ –ø–∞—É–∑–µ'},
    {'code': 'cancelled', 'label': '‚ùå –û—Ç–º–µ–Ω—ë–Ω'},
]

ORDER_STATUS_BY_CODE = {item['code']: item for item in ORDER_STATUS_CHOICES}
ORDER_STATUS_BY_LABEL = {item['label']: item for item in ORDER_STATUS_CHOICES}
DEFAULT_ORDER_STATUS = 'new'

BONUS_CREDIT_TYPES = {
    'credit',
    'manual_credit',
    'loyalty',
    'referral',
    'referral_bonus',
    'feedback',
    'feedback_bonus',
}
BONUS_DEBIT_TYPES = {
    'debit',
    'manual_debit',
    'order_payment',
    'expire',
}

DEADLINE_PRESETS = [
    {
        'key': '24h',
        'label': '‚è± 24 —á–∞—Å–∞ –∏–ª–∏ –º–µ–Ω—å—à–µ',
        'days': 1,
        'multiplier': 1.8,
        'badge': '–≠–∫—Å—Ç—Ä–µ–Ω–Ω–æ: –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏ –±–æ–Ω—É—Å –∑–∞ —Å–º–µ–ª–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞',
    },
    {
        'key': '3d',
        'label': 'üöÄ 3 –¥–Ω—è',
        'days': 3,
        'multiplier': 1.45,
        'badge': '–£—Å–∫–æ—Ä–µ–Ω–Ω—ã–π —Å—Ä–æ–∫ —Å –±–æ–Ω—É—Å–æ–º –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑',
    },
    {
        'key': '5d',
        'label': '‚ö°Ô∏è 5 –¥–Ω–µ–π',
        'days': 5,
        'multiplier': 1.3,
        'badge': '–°—Ä–æ—á–Ω–æ, –Ω–æ –∫–æ–º—Ñ–æ—Ä—Ç–Ω–æ: –ø—Ä–æ–≥—Ä–µ—Å—Å-–æ—Ç—á—ë—Ç—ã –∏ –±–æ–Ω—É—Å –∑–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ',
    },
    {
        'key': '7d',
        'label': 'üìÖ –ù–µ–¥–µ–ª—è',
        'days': 7,
        'multiplier': 1.15,
        'badge': '–û–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏ –Ω–∞–∫–æ–ø–∏—Ç–µ–ª—å–Ω—ã–º –±–æ–Ω—É—Å–æ–º',
    },
    {
        'key': '14d',
        'label': '‚úÖ 2 –Ω–µ–¥–µ–ª–∏',
        'days': 14,
        'multiplier': 1.0,
        'badge': '–ë–∞–∑–æ–≤—ã–π —Ç–∞—Ä–∏—Ñ –∏ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –±–æ–Ω—É—Å –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞',
    },
    {
        'key': '21d',
        'label': 'üåø 3 –Ω–µ–¥–µ–ª–∏',
        'days': 21,
        'multiplier': 0.95,
        'badge': '–°–ø–æ–∫–æ–π–Ω—ã–π —Ç–µ–º–ø: –±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∏ –±–æ–Ω—É—Å –ª–æ—è–ª—å–Ω–æ—Å—Ç–∏',
    },
    {
        'key': '30d',
        'label': 'üßò –ú–µ—Å—è—Ü',
        'days': 30,
        'multiplier': 0.9,
        'badge': '–ë–µ–∑ —Å–ø–µ—à–∫–∏: —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≥–∞—Ä–∞–Ω—Ç–∏—è –∏ –±–æ–Ω—É—Å –∑–∞ –¥–æ–≤–µ—Ä–∏–µ',
    },
    {
        'key': '45d',
        'label': 'üõ° –ë–æ–ª—å—à–µ –º–µ—Å—è—Ü–∞',
        'days': 45,
        'multiplier': 0.85,
        'badge': '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≤—ã–≥–æ–¥–∞: –ª—É—á—à–∏–µ —É—Å–ª–æ–≤–∏—è –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å',
    },
]

DEADLINE_LOOKUP = {item['key']: item for item in DEADLINE_PRESETS}
DEFAULT_DEADLINE_KEY = '14d'


def get_deadline_preset(key):
    return DEADLINE_LOOKUP.get(key) or DEADLINE_LOOKUP[DEFAULT_DEADLINE_KEY]


def round_price(amount: float) -> int:
    return int(max(0, (float(amount) + 25) // 50 * 50))


def get_status_entry_by_code(code: str) -> dict:
    return ORDER_STATUS_BY_CODE.get(code, ORDER_STATUS_BY_CODE[DEFAULT_ORDER_STATUS])


def get_status_label(code: str) -> str:
    return get_status_entry_by_code(code).get('label', '–°—Ç–∞—Ç—É—Å')


def resolve_status_code(value: Optional[str]) -> str:
    if not value:
        return DEFAULT_ORDER_STATUS
    if value in ORDER_STATUS_BY_CODE:
        return value
    if value in ORDER_STATUS_BY_LABEL:
        return ORDER_STATUS_BY_LABEL[value]['code']
    cleaned = str(value).strip().lower()
    for item in ORDER_STATUS_CHOICES:
        label = item.get('label', '')
        if cleaned == label.lower() or cleaned == label.split(' ', 1)[-1].lower():
            return item['code']
    return DEFAULT_ORDER_STATUS


def normalize_referrals_structure(raw):
    structure = {'referrers': {}, 'links': {}}
    if not isinstance(raw, dict):
        return structure
    if 'referrers' in raw or 'links' in raw:
        referrers_raw = raw.get('referrers', {})
        links_raw = raw.get('links', {})
    else:
        referrers_raw = raw
        links_raw = {}
    for ref_id, entries in referrers_raw.items():
        if not isinstance(entries, list):
            continue
        normalized_entries = []
        for entry in entries:
            if isinstance(entry, dict):
                user_id = entry.get('user_id') or entry.get('id') or entry.get('uid')
                username = entry.get('username')
                full_name = entry.get('full_name') or entry.get('name')
                joined_at = entry.get('joined_at') or entry.get('timestamp')
                status = entry.get('status') or entry.get('state') or '–ø—Ä–∏–≥–ª–∞—à—ë–Ω'
                orders = entry.get('orders') if isinstance(entry.get('orders'), list) else []
                awarded_orders = entry.get('awarded_orders') if isinstance(entry.get('awarded_orders'), list) else []
                bonus_total = entry.get('bonus_total') if isinstance(entry.get('bonus_total'), (int, float)) else 0
            else:
                user_id = entry
                username = None
                full_name = None
                joined_at = None
                status = '–ø—Ä–∏–≥–ª–∞—à—ë–Ω'
                orders = []
                awarded_orders = []
                bonus_total = 0
            if not user_id:
                continue
            try:
                normalized_user_id = int(user_id)
            except (TypeError, ValueError):
                normalized_user_id = str(user_id)
            record = {
                'user_id': normalized_user_id,
                'username': username,
                'full_name': full_name,
                'joined_at': joined_at,
                'status': status,
                'orders': orders,
                'awarded_orders': awarded_orders,
                'bonus_total': int(bonus_total) if isinstance(bonus_total, (int, float)) else 0,
            }
            normalized_entries.append(record)
            structure['links'][str(normalized_user_id)] = str(ref_id)
        if normalized_entries:
            structure['referrers'][str(ref_id)] = normalized_entries
    if isinstance(links_raw, dict):
        for uid, rid in links_raw.items():
            structure['links'].setdefault(str(uid), str(rid))
    return structure


def get_referrer_for_user(user_id: int) -> Optional[str]:
    return str(REFERALS.get('links', {}).get(str(user_id))) if isinstance(REFERALS, dict) else None


def update_referral_entry(referrer_id: str, user_id: int, **kwargs):
    referrer_list = REFERALS.setdefault('referrers', {}).setdefault(str(referrer_id), [])
    for entry in referrer_list:
        if str(entry.get('user_id')) == str(user_id):
            if 'add_order' in kwargs and kwargs['add_order'] is not None:
                orders = entry.setdefault('orders', [])
                if kwargs['add_order'] not in orders:
                    orders.append(kwargs['add_order'])
            if 'add_awarded' in kwargs and kwargs['add_awarded'] is not None:
                awarded = entry.setdefault('awarded_orders', [])
                if kwargs['add_awarded'] not in awarded:
                    awarded.append(kwargs['add_awarded'])
            if 'bonus_increment' in kwargs and kwargs['bonus_increment']:
                entry['bonus_total'] = int(entry.get('bonus_total', 0) + kwargs['bonus_increment'])
            update_payload = {
                k: v for k, v in kwargs.items()
                if k not in {'add_order', 'add_awarded', 'bonus_increment'} and v is not None
            }
            if update_payload:
                entry.update(update_payload)
            return entry
    record = {
        'user_id': user_id,
        'username': kwargs.get('username'),
        'full_name': kwargs.get('full_name'),
        'joined_at': kwargs.get('joined_at'),
        'status': kwargs.get('status', '–ø—Ä–∏–≥–ª–∞—à—ë–Ω'),
        'orders': [],
        'awarded_orders': [],
        'bonus_total': int(kwargs.get('bonus_total', 0) or 0),
    }
    if kwargs.get('add_order') is not None:
        record['orders'].append(kwargs['add_order'])
    elif isinstance(kwargs.get('orders'), list):
        record['orders'].extend(kwargs['orders'])
    if kwargs.get('add_awarded') is not None:
        record['awarded_orders'].append(kwargs['add_awarded'])
    elif isinstance(kwargs.get('awarded_orders'), list):
        record['awarded_orders'].extend(kwargs['awarded_orders'])
    referrer_list.append(record)
    return record


def register_referral(referrer_id: int, user) -> None:
    if not referrer_id or not user:
        return
    if int(referrer_id) == int(user.id):
        return
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    REFERALS.setdefault('links', {})[str(user.id)] = str(referrer_id)
    update_referral_entry(
        str(referrer_id),
        user.id,
        username=user.username,
        full_name=user.full_name,
        joined_at=timestamp,
        status='–ø–µ—Ä–µ—à—ë–ª –ø–æ —Å—Å—ã–ª–∫–µ',
    )
    save_json(REFERRALS_FILE, REFERALS)


def get_referrals_for_referrer(referrer_id: int) -> list:
    entries = REFERALS.get('referrers', {}).get(str(referrer_id), [])
    if isinstance(entries, list):
        return entries
    return []


def normalize_order_record(order: dict, owner_id: Optional[str] = None) -> dict:
    if not isinstance(order, dict):
        return {}
    created_at = order.get('created_at') or order.get('date')
    if not created_at:
        created_at = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    order['created_at'] = created_at
    order.setdefault('updated_at', created_at)
    status_code = resolve_status_code(order.get('status_code') or order.get('status'))
    order['status_code'] = status_code
    order['status'] = get_status_label(status_code)
    if not isinstance(order.get('status_history'), list):
        order['status_history'] = []
    normalized_history = []
    for item in order.get('status_history', []):
        if not isinstance(item, dict):
            continue
        hist_code = resolve_status_code(item.get('code') or item.get('status'))
        timestamp = item.get('timestamp') or created_at
        note = item.get('note')
        normalized_history.append({
            'code': hist_code,
            'status': get_status_label(hist_code),
            'timestamp': timestamp,
            'note': note,
        })
    if not normalized_history:
        normalized_history.append({
            'code': status_code,
            'status': get_status_label(status_code),
            'timestamp': created_at,
            'note': '–°–æ–∑–¥–∞–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏',
        })
    order['status_history'] = normalized_history
    try:
        order['price'] = int(order.get('price', 0))
    except (TypeError, ValueError):
        order['price'] = 0
    try:
        bonus_used = int(order.get('bonus_used', 0) or 0)
    except (TypeError, ValueError):
        bonus_used = 0
    order['bonus_used'] = max(0, bonus_used)
    order['referral_rewarded'] = bool(order.get('referral_rewarded', False))
    order['loyalty_rewarded'] = bool(order.get('loyalty_rewarded', False))
    if owner_id is not None and not order.get('referrer_id'):
        referrer_id = get_referrer_for_user(int(owner_id))
        if referrer_id:
            order['referrer_id'] = referrer_id
    return order


def normalize_orders_storage() -> None:
    changed = False
    normalized_orders = {}
    for user_id, orders in ORDERS.items():
        user_key = str(user_id)
        if not isinstance(orders, list):
            continue
        normalized_list = []
        for order in orders:
            if not isinstance(order, dict):
                continue
            normalized_list.append(normalize_order_record(order, user_key))
        normalized_orders[user_key] = normalized_list
    if normalized_orders != ORDERS:
        ORDERS.clear()
        ORDERS.update(normalized_orders)
        changed = True
    if changed:
        save_json(ORDERS_FILE, ORDERS)


def initialize_storage() -> None:
    global PRICES, REFERALS, ORDERS, FEEDBACKS, BONUSES, USER_LOGS, USERS

    PRICES = normalize_prices(load_json(PRICES_FILE, {}))

    REFERALS = load_json(REFERRALS_FILE)
    if not isinstance(REFERALS, dict):
        REFERALS = {}
    REFERALS = normalize_referrals_structure(REFERALS)

    ORDERS = load_json(ORDERS_FILE)
    if not isinstance(ORDERS, dict):
        ORDERS = {}

    FEEDBACKS = load_json(FEEDBACKS_FILE)
    if not isinstance(FEEDBACKS, dict):
        FEEDBACKS = {}

    BONUSES = load_json(BONUSES_FILE)
    if not isinstance(BONUSES, dict):
        BONUSES = {}

    USER_LOGS = load_json(USER_LOGS_FILE)
    if not isinstance(USER_LOGS, dict):
        USER_LOGS = {}

    USERS = load_json(USERS_FILE)
    if not isinstance(USERS, dict):
        USERS = {}

    normalize_orders_storage()


initialize_storage()

FAQ_ITEMS = [
    {'question': '–ö–∞–∫ —Å–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑?', 'answer': '–í—ã–±–µ—Ä–∏—Ç–µ "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑" –∏ —Å–ª–µ–¥—É–π—Ç–µ —à–∞–≥–∞–º. –ú–æ–∂–Ω–æ –∑–∞–∫–∞–∑–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ä–∞–±–æ—Ç —Å—Ä–∞–∑—É!'},
    {'question': '–ö–∞–∫ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è —Å—Ç–æ–∏–º–æ—Å—Ç—å?', 'answer': '–ó–∞–≤–∏—Å–∏—Ç –æ—Ç —Ç–∏–ø–∞, —Å—Ä–æ—á–Ω–æ—Å—Ç–∏ –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –¥–ª—è —Ç–æ—á–Ω–æ–π —Ü–µ–Ω—ã!'},
    {'question': '–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞?', 'answer': '–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π ‚Äî –ø–æ–ª—É—á–∏—Ç–µ 5% –æ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥—Ä—É–∑–µ–π –∫–∞–∫ –±–æ–Ω—É—Å.'},
    {'question': '–ì–∞—Ä–∞–Ω—Ç–∏–∏ –∫–∞—á–µ—Å—Ç–≤–∞?', 'answer': '–ê–Ω—Ç–∏–ø–ª–∞–≥–∏–∞—Ç, –ø—Ä–∞–≤–∫–∏ –±–µ—Å–ø–ª–∞—Ç–Ω–æ 14 –¥–Ω–µ–π, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –¥–æ –∑–∞—â–∏—Ç—ã.'},
    {'question': '–°–∫–∏–¥–∫–∏?', 'answer': '5-15% –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö, 10% –Ω–∞ –ø–µ—Ä–≤—ã–π, —Ä–µ—Ñ–µ—Ä–∞–ª—ã.'},
    {'question': '–û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞?', 'answer': '–í –ø—Ä–æ—Ñ–∏–ª–µ —Å—Ç–∞—Ç—É—Å—ã, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞.'}
]

current_pricing_mode = 'light'

# –°–æ—Å—Ç–æ—è–Ω–∏—è
(
    SELECT_MAIN_MENU,
    SELECT_ORDER_TYPE,
    VIEW_ORDER_DETAILS,
    INPUT_TOPIC,
    SELECT_DEADLINE,
    INPUT_REQUIREMENTS,
    INPUT_CONTACT,
    UPLOAD_FILES,
    ADD_UPSSELL,
    ADD_ANOTHER_ORDER,
    CONFIRM_CART,
    ADMIN_MENU,
    PROFILE_MENU,
    SHOW_PRICE_LIST,
    PRICE_CALCULATOR,
    SELECT_CALC_DEADLINE,
    SELECT_CALC_COMPLEXITY,
    SHOW_FAQ,
    FAQ_DETAILS,
    PROFILE_ORDERS,
    PROFILE_ORDER_DETAIL,
    PROFILE_FEEDBACKS,
    PROFILE_FEEDBACK_INPUT,
    PROFILE_REFERRALS,
    PROFILE_BONUSES,
) = range(25)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def log_user_action(user_id, username, action, full_name=None):
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    log_entry = {'timestamp': timestamp, 'action': action}
    if username:
        log_entry['username'] = username
    if full_name:
        log_entry['full_name'] = full_name
    USER_LOGS.setdefault(str(user_id), []).append(log_entry)
    save_json(USER_LOGS_FILE, USER_LOGS)
    profile = USERS.setdefault(str(user_id), {})
    profile.setdefault('first_seen', timestamp)
    profile['last_seen'] = timestamp
    profile['last_action'] = action
    if username:
        profile['username'] = username
    if full_name:
        profile['full_name'] = full_name
    save_json(USERS_FILE, USERS)
    display_name = username or full_name or str(user_id)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ({display_name}): {action}")

async def answer_callback_query(query, context):
    if not query:
        return
    last_answered_id = context.user_data.get('_last_answered_query')
    if last_answered_id == query.id:
        return
    await query.answer()
    context.user_data['_last_answered_query'] = query.id


def parse_datetime(value) -> datetime:
    if isinstance(value, datetime):
        return value
    if isinstance(value, (int, float)):
        try:
            return datetime.fromtimestamp(value)
        except (OverflowError, OSError, ValueError):
            return datetime.now()
    if isinstance(value, str):
        for pattern in (
            '%Y-%m-%d %H:%M:%S',
            '%Y-%m-%dT%H:%M:%S',
            '%d.%m.%Y %H:%M',
            '%Y-%m-%d',
        ):
            try:
                return datetime.strptime(value, pattern)
            except ValueError:
                continue
    return datetime.now()


def recalculate_bonus_entry(entry: dict) -> bool:
    history = entry.get('history', [])
    if not isinstance(history, list):
        history = []
        entry['history'] = history
    total_credit = 0
    total_debit = 0
    for item in history:
        if not isinstance(item, dict):
            continue
        try:
            amount = int(item.get('amount', 0) or 0)
        except (TypeError, ValueError):
            amount = 0
        if amount <= 0:
            continue
        entry_type = item.get('type') or item.get('operation')
        if entry_type in BONUS_CREDIT_TYPES:
            total_credit += amount
        elif entry_type in BONUS_DEBIT_TYPES:
            total_debit += amount
    balance = max(0, total_credit - total_debit)
    changed = False
    if entry.get('credited') != total_credit:
        entry['credited'] = total_credit
        changed = True
    if entry.get('redeemed') != total_debit:
        entry['redeemed'] = total_debit
        changed = True
    if entry.get('balance') != balance:
        entry['balance'] = balance
        changed = True
    return changed


def expire_outdated_bonuses(entry: dict) -> bool:
    history = entry.setdefault('history', [])
    if not history:
        return False
    ledger = []
    for item in sorted(history, key=lambda i: parse_datetime((i or {}).get('timestamp'))):
        if not isinstance(item, dict):
            continue
        try:
            amount = int(item.get('amount', 0) or 0)
        except (TypeError, ValueError):
            amount = 0
        if amount <= 0:
            continue
        entry_type = item.get('type') or item.get('operation')
        timestamp = parse_datetime(item.get('timestamp'))
        if entry_type in BONUS_CREDIT_TYPES:
            ledger.append({'amount': amount, 'remaining': amount, 'timestamp': timestamp})
        elif entry_type in BONUS_DEBIT_TYPES:
            to_remove = amount
            for credit in ledger:
                if to_remove <= 0:
                    break
                available = credit.get('remaining', 0)
                if available <= 0:
                    continue
                consume = min(available, to_remove)
                credit['remaining'] = available - consume
                to_remove -= consume
    now = datetime.now()
    expired_total = 0
    for credit in ledger:
        remaining = credit.get('remaining', 0)
        if remaining <= 0:
            continue
        if now - credit['timestamp'] >= timedelta(days=BONUS_EXPIRATION_DAYS):
            expired_total += remaining
            credit['remaining'] = 0
            history.append({
                'type': 'expire',
                'amount': remaining,
                'reason': '–ë–æ–Ω—É—Å—ã —Å–≥–æ—Ä–µ–ª–∏ (30 –¥–Ω–µ–π –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)',
                'timestamp': now.strftime('%Y-%m-%d %H:%M:%S'),
            })
    if expired_total:
        entry['redeemed'] = int(entry.get('redeemed', 0)) + expired_total
        entry['balance'] = max(0, int(entry.get('balance', 0)) - expired_total)
        return True
    return False


def ensure_bonus_account(user_id: str):
    user_key = str(user_id)
    entry = BONUSES.setdefault(user_key, {})
    changed = False
    if expire_outdated_bonuses(entry):
        changed = True
    if recalculate_bonus_entry(entry):
        changed = True
    if changed:
        save_json(BONUSES_FILE, BONUSES)
    return entry


def get_bonus_summary(user_id: str):
    entry = ensure_bonus_account(user_id)
    return (
        entry.get('credited', 0),
        entry.get('redeemed', 0),
        entry.get('balance', 0),
        entry.get('history', []),
    )


def add_bonus_operation(user_id: str, amount: int, operation_type: str, reason: str):
    try:
        amount = int(amount)
    except (TypeError, ValueError):
        amount = 0
    if amount <= 0:
        return ensure_bonus_account(user_id)
    entry = ensure_bonus_account(user_id)
    available_balance = int(entry.get('balance', 0))
    if operation_type in BONUS_DEBIT_TYPES:
        amount = min(amount, available_balance)
        if amount <= 0:
            return entry
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    entry.setdefault('history', []).append({
        'type': operation_type,
        'amount': amount,
        'reason': reason,
        'timestamp': timestamp,
    })
    recalculate_bonus_entry(entry)
    save_json(BONUSES_FILE, BONUSES)
    return entry


def get_user_profile(user_id: int) -> dict:
    return USERS.get(str(user_id), {})


def format_username(username: Optional[str]) -> Optional[str]:
    if not username:
        return None
    return username if username.startswith('@') else f"@{username}"


def format_user_display_name(user_id: int) -> str:
    profile = get_user_profile(user_id)
    username = format_username(profile.get('username'))
    full_name = profile.get('full_name')
    if username:
        return username
    if full_name:
        return full_name
    return str(user_id)


def build_user_contact_link(user_id: int) -> str:
    profile = get_user_profile(user_id)
    username = profile.get('username')
    if username:
        return f"https://t.me/{username}"
    return f"tg://user?id={user_id}"


def get_recent_user_profiles(limit: Optional[int] = None):
    records = []
    for user_id, profile in USERS.items():
        last_seen = parse_datetime(profile.get('last_seen')) if profile.get('last_seen') else datetime.min
        records.append((last_seen, user_id, profile))
    records.sort(key=lambda item: item[0], reverse=True)
    if limit is not None:
        records = records[:limit]
    return records


async def safe_send_message(bot, chat_id: int, text: str, **kwargs):
    try:
        await bot.send_message(chat_id, text, **kwargs)
    except TelegramError as exc:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {chat_id}: {exc}")


def get_feedback_entries(user_id: str):
    items = FEEDBACKS.get(str(user_id), [])
    normalized = []
    for entry in items:
        if isinstance(entry, dict):
            text = entry.get('text', '')
            created_at = entry.get('created_at')
        else:
            text = str(entry)
            created_at = None
        normalized.append({'text': text, 'created_at': created_at})
    return normalized


def save_feedback_entries(user_id: str, entries):
    FEEDBACKS[str(user_id)] = entries
    save_json(FEEDBACKS_FILE, FEEDBACKS)


def truncate_for_button(text: str, limit: int = 32) -> str:
    clean = text.replace('\n', ' ').strip()
    if len(clean) <= limit:
        return clean
    return clean[: limit - 1] + '‚Ä¶'


def is_order_paused(order: dict) -> bool:
    status = str(order.get('status', '')).lower()
    return bool(order.get('client_paused')) or status.startswith('–Ω–∞ –ø–∞—É–∑–µ')


def build_order_status(order: dict) -> str:
    status = order.get('status') or '–±–µ–∑ —Å—Ç–∞—Ç—É—Å–∞'
    if is_order_paused(order):
        return f"{status} ¬∑ –Ω–∞ –ø–∞—É–∑–µ"
    return status


def build_order_detail_text(order: dict) -> str:
    order_name = ORDER_TYPES.get(order.get('type'), {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø')
    topic = order.get('topic', '–ë–µ–∑ —Ç–µ–º—ã')
    deadline_display = order.get('deadline_label') or f"{order.get('deadline_days', '‚Äî')} –¥–Ω–µ–π"
    upsell_titles = [UPSELL_LABELS.get(u, u) for u in order.get('upsells', [])]
    upsell_text = ', '.join(upsell_titles) if upsell_titles else '–Ω–µ—Ç'
    contact_display = html.escape(order.get('contact', '–ù–µ —É–∫–∞–∑–∞–Ω'))
    contact_link = order.get('contact_link')
    if contact_link:
        contact_html = f"<a href=\"{html.escape(contact_link, quote=True)}\">{contact_display}</a>"
    else:
        contact_html = contact_display
    requirements = html.escape(order.get('requirements', '–ù–µ—Ç'))
    files_count = len(order.get('files', [])) if order.get('files') else 0
    lines = [
        f"<b>{html.escape(order_name)}</b>",
        f"–¢–µ–º–∞: {html.escape(topic)}",
        f"–°—Ç–∞—Ç—É—Å: {html.escape(build_order_status(order))}",
        f"–°—Ä–æ–∫: {html.escape(deadline_display)}",
        f"–ö–æ–Ω—Ç–∞–∫—Ç: {contact_html}",
        f"–î–æ–ø—ã: {html.escape(upsell_text)}",
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {order.get('price', 0)} ‚ÇΩ",
        f"–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: {requirements}",
    ]
    if files_count:
        lines.append(f"–§–∞–π–ª—ã: {files_count} —à—Ç.")
    return "\n".join(lines)


def find_user_order(user_id: str, order_id: str):
    user_orders = ORDERS.get(str(user_id), [])
    for order in user_orders:
        if str(order.get('order_id')) == str(order_id):
            return order, user_orders
    return None, user_orders


async def edit_or_send(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str, keyboard=None, parse_mode=ParseMode.HTML):
    reply_markup = InlineKeyboardMarkup(keyboard) if keyboard else None
    if update.callback_query:
        query = update.callback_query
        await query.edit_message_text(
            text,
            reply_markup=reply_markup,
            parse_mode=parse_mode,
            disable_web_page_preview=True,
        )
    elif update.message:
        await update.message.reply_text(
            text,
            reply_markup=reply_markup,
            parse_mode=parse_mode,
            disable_web_page_preview=True,
        )
    else:
        chat_id = update.effective_chat.id
        await context.bot.send_message(
            chat_id,
            text,
            reply_markup=reply_markup,
            parse_mode=parse_mode,
            disable_web_page_preview=True,
        )

def build_contact_link(contact_text):
    if not contact_text:
        return None
    contact = contact_text.strip()
    if not contact:
        return None
    lowered = contact.lower()
    if lowered.startswith(('http://', 'https://', 'tg://', 'mailto:')):
        return contact
    if lowered.startswith(('t.me/', 'telegram.me/')):
        return f"https://{contact}" if lowered.startswith('t.me/') else f"https://{contact.split('://', 1)[-1]}"
    if lowered.startswith('vk.com/'):
        return f"https://{contact}"
    if contact.startswith('@') and re.fullmatch(r'@[A-Za-z0-9_]{4,}', contact):
        return f"https://t.me/{contact[1:]}"
    if re.fullmatch(r'[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}', contact):
        return f"mailto:{contact}"
    if lowered.startswith(('vk.com', 't.me')):
        return f"https://{contact}"
    return None


def build_deadline_keyboard(callback_prefix: str, include_back: bool = False, back_callback: Optional[str] = None):
    rows = []
    for i in range(0, len(DEADLINE_PRESETS), 2):
        chunk = DEADLINE_PRESETS[i:i + 2]
        row = [
            InlineKeyboardButton(item['label'], callback_data=f"{callback_prefix}{item['key']}")
            for item in chunk
        ]
        rows.append(row)
    if include_back and back_callback:
        rows.append([InlineKeyboardButton('‚¨ÖÔ∏è –ù–∞–∑–∞–¥', callback_data=back_callback)])
    return InlineKeyboardMarkup(rows)


REQUIREMENTS_PROMPT_TEXT = (
    "üìö *–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –ø—Ä–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è.*\n"
    "‚Ä¢ –ß—Ç–æ —É–∫–∞–∑–∞–Ω–æ –≤ –º–µ—Ç–æ–¥–∏—á–∫–µ –∏–ª–∏ –∑–∞–¥–∞–Ω–∏–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.\n"
    "‚Ä¢ –û–±—ä—ë–º, —Ñ–æ—Ä–º–∞—Ç –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è, —Å–ø–∏—Å–æ–∫ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã, –ø—Ä–∏–º–µ—Ä—ã –∂–µ–ª–∞–µ–º–æ–≥–æ —É—Ä–æ–≤–Ω—è.\n"
    "–ú–æ–∂–Ω–æ –Ω–∞–ø–∏—Å–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–º —Å–µ–π—á–∞—Å –∏–ª–∏ –ø—Ä–∏–ª–æ–∂–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª—ã —á—É—Ç—å –ø–æ–∑–∂–µ –Ω–∞ —à–∞–≥–µ —Å —Ñ–∞–π–ª–∞–º–∏.\n\n"
    "–ï—Å–ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —É–∫–∞–∑–∞–Ω–∏–π –Ω–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /skip."
)

REQUIREMENTS_EXAMPLE_TEXT = (
    "–ü—Ä–∏–º–µ—Ä: ¬´–ú–µ—Ç–æ–¥–∏—á–∫–∞ ‚Ññ3, —Ç–µ–º–∞ 2, –æ–±—ä—ë–º 8 —Å—Ç—Ä–∞–Ω–∏—Ü, Times New Roman 14, –∏–Ω—Ç–µ—Ä–≤–∞–ª 1,5; –Ω—É–∂–Ω–æ 3 –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è.¬ª"
)


def build_requirements_keyboard():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton('üí° –ü–æ–¥—Å–∫–∞–∑–∞—Ç—å, —á—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç—å', callback_data='requirements_hint')],
        [InlineKeyboardButton('‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data='requirements_skip')],
    ])


def get_user_link(user):
    if user.username:
        return f"https://t.me/{user.username}"
    return f"tg://user?id={user.id}"

# –†–∞—Å—á–µ—Ç —Ü–µ–Ω—ã
def calculate_price(order_type_key: str, deadline_key: str, complexity_factor: float = 1.0) -> int:
    if order_type_key not in PRICES:
        logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø: {order_type_key}")
        return 0
    pricing = PRICES[order_type_key]
    base = pricing.get('base', pricing.get('min', 0))
    min_price = pricing.get('min', base)
    preset = get_deadline_preset(deadline_key)
    deadline_multiplier = preset.get('multiplier', 1.0)
    mode_multiplier = 1.1 if current_pricing_mode == 'hard' else 1.0
    raw_price = base * deadline_multiplier * complexity_factor * mode_multiplier
    price = max(raw_price, min_price)
    return round_price(price)


def save_prices():
    save_json(PRICES_FILE, PRICES)


def adjust_price_value(order_type_key: str, field: str, delta: int) -> dict:
    entry = PRICES.setdefault(
        order_type_key,
        dict(DEFAULT_PRICES.get(order_type_key, {'base': 0, 'min': 0}))
    )
    if field not in {'base', 'min'}:
        return entry
    try:
        current_value = int(entry.get(field, 0))
    except (TypeError, ValueError):
        current_value = 0
    new_value = max(0, current_value + delta)
    entry[field] = new_value
    base = int(entry.get('base', 0))
    minimum = int(entry.get('min', base))
    if field == 'base' and minimum < new_value:
        entry['min'] = new_value
    elif field == 'min' and new_value < base:
        entry['min'] = base
    save_prices()
    return entry


def set_price_value(order_type_key: str, base: Optional[int] = None, minimum: Optional[int] = None) -> dict:
    entry = PRICES.setdefault(
        order_type_key,
        dict(DEFAULT_PRICES.get(order_type_key, {'base': 0, 'min': 0}))
    )
    if base is not None:
        try:
            base_val = max(0, int(base))
        except (TypeError, ValueError):
            base_val = entry.get('base', 0)
        entry['base'] = base_val
    if minimum is not None:
        try:
            min_val = max(0, int(minimum))
        except (TypeError, ValueError):
            min_val = entry.get('min', entry.get('base', 0))
        entry['min'] = min_val
    base_val = int(entry.get('base', 0))
    min_val = int(entry.get('min', base_val))
    if min_val < base_val:
        entry['min'] = base_val
    save_prices()
    return entry

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫
async def error_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.error(f"–û—à–∏–±–∫–∞: {context.error}")
    if ADMIN_CHAT_ID:
        await context.bot.send_message(ADMIN_CHAT_ID, f"–û—à–∏–±–∫–∞: {context.error}")

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    log_user_action(user.id, user.username, "/start", user.full_name)
    args = update.message.text.split()
    bot_username = (await context.bot.get_me()).username
    ref_link = f"https://t.me/{bot_username}?start={user.id}"
    context.user_data['ref_link'] = ref_link
    if len(args) > 1 and args[1].lstrip('-').isdigit():
        referrer_id = int(args[1])
        if referrer_id != user.id:
            register_referral(referrer_id, user)
            context.user_data['referrer_id'] = referrer_id
            try:
                await context.bot.send_message(referrer_id, f"üéâ –ù–æ–≤—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª: {user.first_name}")
            except TelegramError as exc:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–≤–µ–¥–æ–º–∏—Ç—å —Ä–µ—Ñ–µ—Ä–µ—Ä–∞ {referrer_id}: {exc}")
    welcome = (
        f"üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}! –†–∞–±–æ—Ç–∞–µ–º —Å–æ –≤—Å–µ–º–∏ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω–∞–º–∏, –∫—Ä–æ–º–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö (—á–µ—Ä—Ç–µ–∂–∏)."
        f" –£–∂–µ 5000+ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏ 10% —Å–∫–∏–¥–∫–∞ –Ω–∞ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ üî•\n–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π –¥–ª—è –±–æ–Ω—É—Å–æ–≤: {ref_link}"
    )
    return await main_menu(update, context, welcome)

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
async def main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE, message=None):
    user = update.effective_user
    log_user_action(user.id, user.username, "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", user.full_name)
    text = message or "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
    keyboard = [
        [InlineKeyboardButton("üìù –°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data='make_order')],
        [InlineKeyboardButton("üí≤ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç", callback_data='price_list'), InlineKeyboardButton("üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", callback_data='price_calculator')],
        [InlineKeyboardButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å", callback_data='profile'), InlineKeyboardButton("‚ùì FAQ", callback_data='faq')],
        [InlineKeyboardButton("üìû –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä", url='https://t.me/Thisissaymoon')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.callback_query:
        query = update.callback_query
        await answer_callback_query(query, context)
        try:
            await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
        except TelegramError as e:
            if "message is not modified" in str(e).lower():
                pass
            else:
                logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
    else:
        await update.message.reply_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
    return SELECT_MAIN_MENU

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
async def main_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await answer_callback_query(query, context)
    data = query.data
    user = update.effective_user
    log_user_action(user.id, user.username, f"–í—ã–±–æ—Ä –≤ –º–µ–Ω—é: {data}", user.full_name)
    if data == 'make_order':
        return await select_order_type(update, context)
    elif data == 'price_list':
        return await show_price_list(update, context)
    elif data == 'price_calculator':
        return await price_calculator(update, context)
    elif data == 'profile':
        return await show_profile(update, context)
    elif data == 'faq':
        return await show_faq(update, context)
    await query.edit_message_text("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.")
    return await main_menu(update, context)
    return SELECT_MAIN_MENU

# –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞–∫–∞–∑–∞
async def select_order_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await answer_callback_query(query, context)
    data = query.data if query else None
    user = update.effective_user
    log_user_action(user.id, user.username, "–í—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞–∫–∞–∑–∞", user.full_name)
    if data and data.startswith('type_'):
        return await view_order_details(update, context)
    if data == 'back_to_main':
        return await main_menu(update, context)
    text = "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã (–¥–æ–±–∞–≤—å—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤ –∫–æ—Ä–∑–∏–Ω—É –¥–ª—è —Å–∫–∏–¥–∫–∏!):"
    keyboard = [[InlineKeyboardButton(f"{val['icon']} {val['name']}", callback_data=f'type_{key}')] for key, val in ORDER_TYPES.items()]
    navigation_row = [InlineKeyboardButton("‚¨ÖÔ∏è –ú–µ–Ω—é", callback_data='back_to_main')]
    current_type = context.user_data.get('current_order_type')
    if current_type in ORDER_TYPES:
        navigation_row.append(InlineKeyboardButton("üîô –ö –æ–ø–∏—Å–∞–Ω–∏—é", callback_data=f'type_{current_type}'))
    keyboard.append(navigation_row)
    reply_markup = InlineKeyboardMarkup(keyboard)
    try:
        await query.edit_message_text(text, reply_markup=reply_markup)
    except TelegramError as e:
        if "message is not modified" in str(e).lower():
            pass
        else:
            raise
    return SELECT_ORDER_TYPE

# –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ —Ç–∏–ø–µ –∑–∞–∫–∞–∑–∞
async def view_order_details(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await answer_callback_query(query, context)
    data = query.data
    if data.startswith('order_'):
        key = data[6:]
        context.user_data['current_order_type'] = key
        prompt_lines = [
            "‚úçÔ∏è *–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∑–∞–¥–∞–Ω–∏—è.*",
            "–û–ø–∏—à–∏—Ç–µ –¥–∏—Å—Ü–∏–ø–ª–∏–Ω—É, —Ñ–æ—Ä–º–∞—Ç –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∞–∫—Ü–µ–Ω—Ç—ã, —á—Ç–æ–±—ã –º—ã —Å—Ä–∞–∑—É –ø–µ—Ä–µ–¥–∞–ª–∏ –∑–∞–¥–∞—á—É –ø—Ä–æ—Ñ–∏–ª—å–Ω–æ–º—É —ç–∫—Å–ø–µ—Ä—Ç—É.",
            "–ï—Å–ª–∏ —Ç–æ—á–Ω–æ–π —Ç–µ–º—ã –µ—â—ë –Ω–µ—Ç ‚Äî —Ç–∞–∫ –∏ –Ω–∞–ø–∏—à–∏—Ç–µ, –∏ –º—ã –ø–æ–º–æ–∂–µ–º —Å—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –ª—É—á—à–∏–π –≤–∞—Ä–∏–∞–Ω—Ç.",
        ]
        if key == 'samostoyatelnye':
            prompt_lines.append(
                "–ù–∞–ø—Ä–∏–º–µ—Ä: ¬´–≠—Å—Å–µ –ø–æ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–ª–æ–≥–∏–∏ –æ —Å—Ç—Ä–∞—Ç–µ–≥–∏—è—Ö –º–µ–¥–∏–∞—Ü–∏–∏¬ª –∏–ª–∏ ¬´–†–µ—Ñ–µ—Ä–∞—Ç –ø–æ —Å–æ—Ü–∏–∞–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç–µ –æ –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏–∫–µ –≤—ã–≥–æ—Ä–∞–Ω–∏—è¬ª."
            )
        await query.edit_message_text(
            "\n\n".join(prompt_lines),
            parse_mode=ParseMode.MARKDOWN,
        )
        return INPUT_TOPIC
    elif data == 'select_order_type':
        return await select_order_type(update, context)
    elif data.startswith('type_'):
        key = data[5:]
        if key not in ORDER_TYPES:
            await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø.")
            return SELECT_ORDER_TYPE
        val = ORDER_TYPES[key]
        prices = PRICES.get(key, {})
        min_price = prices.get('min') or prices.get('base')
        price_line = f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {min_price} ‚ÇΩ –ø—Ä–∏ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã—Ö —Å—Ä–æ–∫–∞—Ö." if min_price else ""
        text = (
            f"{val['icon']} *{val['name']}*\n\n{val['description']}\n{val['details']}\n"
            f"–ü—Ä–∏–º–µ—Ä—ã: {', '.join(val['examples'])}"
        )
        if price_line:
            text += f"\n\n{price_line}"
        text += "\n\n–ì–æ—Ç–æ–≤—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑?"
        keyboard = [
            [InlineKeyboardButton("‚úÖ –ó–∞–∫–∞–∑–∞—Ç—å", callback_data=f'order_{key}')],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='select_order_type')]
        ]
        await query.edit_message_text(text, parse_mode=ParseMode.MARKDOWN, reply_markup=InlineKeyboardMarkup(keyboard))
        return VIEW_ORDER_DETAILS

# –í–≤–æ–¥ —Ç–µ–º—ã
async def input_topic(update: Update, context: ContextTypes.DEFAULT_TYPE):
    topic_text = (update.message.text or '').strip()
    context.user_data['topic'] = topic_text
    user = update.effective_user
    log_user_action(user.id, user.username, f"–¢–µ–º–∞: {update.message.text}", user.full_name)
    descriptions = [
        "‚è∞ *–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ —Å–¥–∞—á–∏ ‚Äî —á–µ–º —Å–ø–æ–∫–æ–π–Ω–µ–µ, —Ç–µ–º –≤—ã–≥–æ–¥–Ω–µ–µ.*",
        "_–ú—ã –∑–∞–∫—Ä–µ–ø–ª—è–µ–º –±–æ–Ω—É—Å—ã –∑–∞ —Ä–∞–Ω–Ω–∏–π –∑–∞–∫–∞–∑ ‚Äî –≤—ã–±–∏—Ä–∞–π—Ç–µ –∫–æ–º—Ñ–æ—Ä—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç:_",
        "",
    ]
    for preset in DEADLINE_PRESETS:
        descriptions.append(f"{preset['label']} ‚Äî {preset['badge']}")
    text = "\n".join(descriptions)
    back_target = context.user_data.get('current_order_type')
    reply_markup = build_deadline_keyboard(
        'deadline_',
        include_back=True,
        back_callback=f'type_{back_target}' if back_target else 'select_order_type'
    )
    await update.message.reply_text(
        text,
        reply_markup=reply_markup,
        parse_mode=ParseMode.MARKDOWN,
        disable_web_page_preview=True,
    )
    return SELECT_DEADLINE

# –í—ã–±–æ—Ä —Å—Ä–æ–∫–∞
async def select_deadline(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await answer_callback_query(query, context)
    data = query.data
    if data.startswith('deadline_'):
        key = data[9:]
        preset = get_deadline_preset(key)
        context.user_data['deadline_key'] = key
        context.user_data['deadline_days'] = preset['days']
        context.user_data['deadline_label'] = preset['label']
        await query.edit_message_text(
            REQUIREMENTS_PROMPT_TEXT,
            reply_markup=build_requirements_keyboard(),
            parse_mode=ParseMode.MARKDOWN,
            disable_web_page_preview=True,
        )
        return INPUT_REQUIREMENTS
    elif data.startswith('type_'):
        return await view_order_details(update, context)
    return SELECT_DEADLINE

# –í–≤–æ–¥ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏–π
async def input_requirements(update: Update, context: ContextTypes.DEFAULT_TYPE):
    requirements_text = (update.message.text or '').strip()
    context.user_data['requirements'] = requirements_text or '–ù–µ—Ç'
    return await ask_contact(update, context)

async def skip_requirements(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['requirements'] = '–ù–µ—Ç'
    return await ask_contact(update, context)


async def requirements_button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await answer_callback_query(query, context)
    data = query.data
    if data == 'requirements_hint':
        await query.message.reply_text(REQUIREMENTS_EXAMPLE_TEXT)
        return INPUT_REQUIREMENTS
    if data == 'requirements_skip':
        context.user_data['requirements'] = '–ù–µ—Ç'
        await query.edit_message_text('‚úÖ –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –º–æ–∂–Ω–æ –±—É–¥–µ—Ç —É—Ç–æ—á–Ω–∏—Ç—å –ø–æ–∑–∂–µ.')
        return await ask_contact(update, context)
    return INPUT_REQUIREMENTS

async def ask_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üì¨ *–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç, –∫—É–¥–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É –Ω–∞–ø–∏—Å–∞—Ç—å.*\n"
        "–ü—Ä–∏—à–ª–∏—Ç–µ –∞–∫—Ç–∏–≤–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ Telegram, VK –∏–ª–∏ —Ä–∞–±–æ—á—É—é –ø–æ—á—Ç—É ‚Äî —Ç–∞–∫ –º–µ–Ω–µ–¥–∂–µ—Ä –±—ã—Å—Ç—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.\n"
        "–ü—Ä–∏–º–µ—Ä: https://t.me/username, @username, https://vk.com/id123 –∏–ª–∏ name@example.com.\n"
        "_–ë–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç–∞ –º—ã –Ω–µ —Å–º–æ–∂–µ–º –ø—Ä–∏–Ω—è—Ç—å –∑–∞–∫–∞–∑._"
    )
    if update.message:
        target = update.message
    else:
        target = update.callback_query.message
    await target.reply_text(
        text,
        parse_mode=ParseMode.MARKDOWN,
        disable_web_page_preview=True,
    )
    return INPUT_CONTACT

async def input_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    contact_text = update.message.text.strip()
    link = build_contact_link(contact_text)
    if not link:
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Ä–∞–±–æ—á—É—é —Å—Å—ã–ª–∫—É –∏–ª–∏ e-mail, —á—Ç–æ–±—ã –º—ã —Å–º–æ–≥–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –≤–∞–º.\n"
            "–ü—Ä–∏–º–µ—Ä—ã: https://t.me/username, @username, https://vk.com/id123, name@example.com",
            disable_web_page_preview=True,
        )
        return INPUT_CONTACT
    context.user_data['contact'] = contact_text
    context.user_data['contact_link'] = link
    context.user_data['pending_files'] = []
    return await prompt_file_upload(update, context)

async def prompt_file_upload(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "üìé –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –∑–∞–¥–∞–Ω–∏—è (–µ—Å–ª–∏ –µ—Å—Ç—å).\n\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –ø–æ –æ–¥–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é ‚Äî –ø—Ä–∏–Ω–∏–º–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã, —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ.\n"
        "‚Ä¢ –ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /done.\n"
        "‚Ä¢ –ï—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç, –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /skip."
    )
    keyboard = InlineKeyboardMarkup([
        [InlineKeyboardButton("‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data='files_done')],
        [InlineKeyboardButton("‚è≠ –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å", callback_data='files_skip')]
    ])
    await update.message.reply_text(text, reply_markup=keyboard)
    return UPLOAD_FILES

async def handle_file_upload(update: Update, context: ContextTypes.DEFAULT_TYPE):
    files_list = context.user_data.setdefault('pending_files', [])
    message = update.message
    acknowledgement = None
    if message.document:
        document = message.document
        files_list.append({
            'type': 'document',
            'file_id': document.file_id,
            'file_name': document.file_name,
        })
        acknowledgement = f"üìÑ –§–∞–π–ª {document.file_name or '–∑–∞–≥—Ä—É–∂–µ–Ω'} —Å–æ—Ö—Ä–∞–Ω–µ–Ω."
    elif message.photo:
        photo = message.photo[-1]
        files_list.append({
            'type': 'photo',
            'file_id': photo.file_id,
        })
        acknowledgement = "üñº –§–æ—Ç–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ."
    elif message.audio:
        audio = message.audio
        files_list.append({
            'type': 'audio',
            'file_id': audio.file_id,
            'file_name': audio.file_name or audio.title,
        })
        acknowledgement = "üéß –ê—É–¥–∏–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ."
    elif message.voice:
        voice = message.voice
        files_list.append({
            'type': 'voice',
            'file_id': voice.file_id,
        })
        acknowledgement = "üéô –ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ."
    elif message.video:
        video = message.video
        files_list.append({
            'type': 'video',
            'file_id': video.file_id,
            'file_name': video.file_name,
        })
        acknowledgement = "üé¨ –í–∏–¥–µ–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ."
    elif message.video_note:
        video_note = message.video_note
        files_list.append({
            'type': 'video_note',
            'file_id': video_note.file_id,
        })
        acknowledgement = "üìπ –í–∏–¥–µ–æ-–∑–∞–º–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞."
    elif message.animation:
        animation = message.animation
        files_list.append({
            'type': 'animation',
            'file_id': animation.file_id,
            'file_name': animation.file_name,
        })
        acknowledgement = "üåÄ GIF —Å–æ—Ö—Ä–∞–Ω–µ–Ω."
    elif message.sticker:
        sticker = message.sticker
        files_list.append({
            'type': 'sticker',
            'file_id': sticker.file_id,
            'file_emoji': sticker.emoji,
        })
        acknowledgement = "üîñ –°—Ç–∏–∫–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω."
    if acknowledgement:
        await message.reply_text(f"{acknowledgement} –ú–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –µ—â–µ –∏–ª–∏ –Ω–∞–∂–∞—Ç—å ¬´–ì–æ—Ç–æ–≤–æ¬ª.")
    else:
        await message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ñ–∞–π–ª. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª.")
    return UPLOAD_FILES

async def skip_file_upload(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.setdefault('pending_files', [])
    return await add_upsell(update, context)


async def file_upload_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await answer_callback_query(query, context)
    data = query.data
    if data == 'files_skip':
        context.user_data['pending_files'] = []
    elif not context.user_data.get('pending_files'):
        context.user_data['pending_files'] = []
    return await add_upsell(update, context)

async def remind_file_upload(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª, –∫–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ (–º–æ–∂–Ω–æ —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å /done).")
    return UPLOAD_FILES

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–æ–ø—É—Å–ª—É–≥
async def add_upsell(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        '–î–æ–±–∞–≤–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã? –ö–ª–∏–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–±–∏—Ä–∞—é—Ç –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –∏–ª–∏ —Ä–µ—á—å, '
        '–ø–æ–ª—É—á–∞—é—Ç +5% —Å–∫–∏–¥–∫—É –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑ –∏ –≥–æ—Ç–æ–≤—ã–π –∫–æ–º–ø–ª–µ–∫—Ç.'
    )
    keyboard = [
        [InlineKeyboardButton("–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è (+2000‚ÇΩ)", callback_data='add_prez')],
        [InlineKeyboardButton("–†–µ—á—å (+1000‚ÇΩ)", callback_data='add_speech')],
        [InlineKeyboardButton("–ë–µ–∑ –¥–æ–ø–æ–≤", callback_data='no_upsell')]
    ]
    if update.message:
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        query = update.callback_query
        await answer_callback_query(query, context)
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    return ADD_UPSSELL

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–ø—É—Å–ª—É–≥
async def upsell_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await answer_callback_query(query, context)
    data = query.data
    upsells = context.user_data.setdefault('upsells', set())
    added = False
    if data == 'add_prez':
        if 'prez' not in upsells:
            upsells.add('prez')
            added = True
    elif data == 'add_speech':
        if 'speech' not in upsells:
            upsells.add('speech')
            added = True
    elif data == 'no_upsell':
        return await process_order(update, context)
    selected = [UPSELL_LABELS.get(u, u) for u in upsells]
    if added:
        text = '–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–ø—Ü–∏–∏? –ü–æ–ª–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Ç —Ñ–∏–∫—Å–∏—Ä—É–µ—Ç +5% —Å–∫–∏–¥–∫—É –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑.'
    elif upsells:
        text = (
            f"–í—ã —É–∂–µ –≤—ã–±—Ä–∞–ª–∏: {', '.join(selected)}.\n"
            '–°–∫–∏–¥–∫–∞ +5% –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∞ ‚Äî –¥–æ–±–∞–≤–∏—Ç—å —á—Ç–æ-—Ç–æ –µ—â—ë?'
        )
    else:
        text = (
            '–í—ã–±–µ—Ä–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã ‚Äî –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—é –∏–ª–∏ —Ä–µ—á—å. '
            '–¢–∞–∫ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ +5% —Å–∫–∏–¥–∫—É –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π –∑–∞–∫–∞–∑ –∏ –ø–æ–ª–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Ç –¥–ª—è –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è.'
        )
    keyboard = [
        [InlineKeyboardButton(f"{'‚úÖ ' if 'prez' in upsells else ''}–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è (+2000‚ÇΩ)", callback_data='add_prez')],
        [InlineKeyboardButton(f"{'‚úÖ ' if 'speech' in upsells else ''}–†–µ—á—å (+1000‚ÇΩ)", callback_data='add_speech')],
        [InlineKeyboardButton("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data='no_upsell')]
    ]
    try:
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    except TelegramError as e:
        if "message is not modified" in str(e).lower():
            pass
    return ADD_UPSSELL

async def process_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    type_key = context.user_data.get('current_order_type')
    if not type_key or type_key not in ORDER_TYPES:
        await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –∑–∞–∫–∞–∑–∞.")
        return ConversationHandler.END
    topic = context.user_data.get('topic', '–ë–µ–∑ —Ç–µ–º—ã')
    deadline_key = context.user_data.get('deadline_key', DEFAULT_DEADLINE_KEY)
    preset = get_deadline_preset(deadline_key)
    deadline_days = preset['days']
    deadline_label = context.user_data.get('deadline_label', preset['label'])
    requirements = context.user_data.get('requirements', '–ù–µ—Ç')
    contact = context.user_data.get('contact', '')
    contact_link = context.user_data.get('contact_link')
    files = list(context.user_data.get('pending_files', []))
    upsells = list(context.user_data.get('upsells', set()))
    price = calculate_price(type_key, deadline_key)
    extra = sum(UPSELL_PRICES.get(u, 0) for u in upsells)
    price += extra
    order = {
        'type': type_key,
        'topic': topic,
        'deadline_key': deadline_key,
        'deadline_days': deadline_days,
        'deadline_label': deadline_label,
        'requirements': requirements,
        'upsells': upsells,
        'price': price,
        'status': '–Ω–æ–≤—ã–π',
        'contact': contact,
        'contact_link': contact_link,
        'files': files,
    }
    context.user_data.setdefault('cart', []).append(order)
    context.user_data.pop('upsells', None)
    context.user_data.pop('requirements', None)
    context.user_data.pop('deadline_key', None)
    context.user_data.pop('deadline_days', None)
    context.user_data.pop('deadline_label', None)
    context.user_data.pop('topic', None)
    context.user_data.pop('current_order_type', None)
    context.user_data.pop('contact', None)
    context.user_data.pop('contact_link', None)
    context.user_data.pop('pending_files', None)
    return await add_another_order(update, context)

# –î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∑–∞–∫–∞–∑
async def add_another_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    text = "–î–æ–±–∞–≤–∏—Ç—å –µ—â–µ –∑–∞–∫–∞–∑? (–ù–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤ = 10% —Å–∫–∏–¥–∫–∞!)"
    keyboard = [
        [InlineKeyboardButton("–î–∞", callback_data='add_another_yes')],
        [InlineKeyboardButton("–ù–µ—Ç, –æ—Ñ–æ—Ä–º–∏—Ç—å", callback_data='confirm_cart')]
    ]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    return ADD_ANOTHER_ORDER

async def add_another_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await answer_callback_query(query, context)
    data = query.data
    if data == 'add_another_yes':
        return await select_order_type(update, context)
    elif data == 'confirm_cart':
        return await confirm_cart(update, context)
    return ADD_ANOTHER_ORDER

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–æ—Ä–∑–∏–Ω—ã
async def confirm_cart(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    cart = context.user_data.get('cart', [])
    if not cart:
        await query.edit_message_text("–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.")
        return await main_menu(update, context)
    text_lines = ["<b>–í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞. –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ ‚Äî –∑–∞—Ñ–∏–∫—Å–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –±–æ–Ω—É—Å:</b>"]
    total = 0
    for i, order in enumerate(cart, 1):
        order_name = ORDER_TYPES.get(order['type'], {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        contact_display = order.get('contact', '–ù–µ —É–∫–∞–∑–∞–Ω')
        deadline_display = order.get('deadline_label') or f"{order.get('deadline_days', 0)} –¥–Ω–µ–π"
        contact_link = order.get('contact_link')
        if contact_link:
            contact_html = f"<a href=\"{html.escape(contact_link, quote=True)}\">{html.escape(contact_display)}</a>"
        else:
            contact_html = html.escape(contact_display)
        upsell_titles = [UPSELL_LABELS.get(u, u) for u in order.get('upsells', [])]
        if upsell_titles:
            upsell_html = html.escape(', '.join(upsell_titles))
        else:
            upsell_html = '–Ω–µ—Ç'
        text_lines.extend([
            f"{i}. <b>{html.escape(order_name)}</b> ‚Äî {html.escape(order.get('topic', '–ë–µ–∑ —Ç–µ–º—ã'))} ‚Äî {order['price']} ‚ÇΩ",
            f"‚Ä¢ –°—Ä–æ–∫: {html.escape(deadline_display)}",
            f"‚Ä¢ –ö–æ–Ω—Ç–∞–∫—Ç: {contact_html}",
            f"‚Ä¢ –î–æ–ø—ã: {upsell_html}",
        ])
        if order.get('files'):
            text_lines.append(f"‚Ä¢ –§–∞–π–ª—ã: {len(order['files'])} —à—Ç.")
        total += order['price']
    if len(cart) > 1:
        discount = round_price(total * 0.1)
        total -= discount
        text_lines.append(f"–°–∫–∏–¥–∫–∞ –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤: -{discount} ‚ÇΩ")
    text_lines.append(f"<b>–ò—Ç–æ–≥–æ: {total} ‚ÇΩ</b> ‚Äî —Å—É–º–º–∞ —Å —É—á—ë—Ç–æ–º –¥–æ–ø–æ–≤ –∏ —Å–∫–∏–¥–æ–∫.")
    text_lines.append(
        '–ü–æ—Å–ª–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ –¥–ª—è —Ñ–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è '
        '–∏ –æ—Ç–≤–µ—Ç–∏—Ç –Ω–∞ –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã.'
    )
    text_lines.append("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ?")
    text = "\n".join(text_lines)
    keyboard = [
        [InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data='place_order')],
        [InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data='cancel_cart')]
    ]
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard), parse_mode=ParseMode.HTML, disable_web_page_preview=True)
    return CONFIRM_CART

async def confirm_cart_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await answer_callback_query(query, context)
    data = query.data
    if data == 'place_order':
        user = update.effective_user
        user_id = str(user.id)
        user_orders = ORDERS.setdefault(user_id, [])
        existing_ids = [order.get('order_id', 0) for order in user_orders]
        order_id = max(existing_ids, default=0) + 1
        created_at = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        new_orders = []
        for raw_order in context.user_data['cart']:
            order_data = dict(raw_order)
            order_data['order_id'] = order_id
            order_data['user_id'] = int(user_id)
            order_data['created_at'] = created_at
            order_data['updated_at'] = created_at
            status_code = DEFAULT_ORDER_STATUS
            order_data['status_code'] = status_code
            order_data['status'] = get_status_label(status_code)
            order_data['status_history'] = [{
                'code': status_code,
                'status': get_status_label(status_code),
                'timestamp': created_at,
                'note': '–ó–∞–∫–∞–∑ —Å–æ–∑–¥–∞–Ω –∫–ª–∏–µ–Ω—Ç–æ–º',
            }]
            order_data['bonus_used'] = 0
            order_data['referral_rewarded'] = False
            order_data['loyalty_rewarded'] = False
            referrer_id = get_referrer_for_user(int(user_id))
            if referrer_id:
                order_data['referrer_id'] = referrer_id
                update_referral_entry(
                    referrer_id,
                    int(user_id),
                    add_order=order_id,
                    status='–æ—Ñ–æ—Ä–º–∏–ª –∑–∞–∫–∞–∑',
                )
                save_json(REFERRALS_FILE, REFERALS)
            user_orders.append(order_data)
            new_orders.append(order_data)
            order_id += 1
        save_json(ORDERS_FILE, ORDERS)
        text = (
            "‚úÖ –ó–∞–∫–∞–∑ –æ—Ñ–æ—Ä–º–ª–µ–Ω! –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏.\n"
            "[–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä](https://t.me/Thisissaymoon) —É–∂–µ –ø–æ–ª—É—á–∏–ª –≤—Å–µ –¥–µ—Ç–∞–ª–∏ –∏ —Ñ–∞–π–ª—ã."
        )
        await query.edit_message_text(text, parse_mode=ParseMode.MARKDOWN)
        if ADMIN_CHAT_ID:
            await notify_admin_about_order(update, context, new_orders)
        context.user_data.pop('cart', None)
        return await main_menu(
            update,
            context,
            "–°–ø–∞—Å–∏–±–æ! –•–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å –µ—â—ë? –ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —É–∂–µ –Ω–∞ —Å–≤—è–∑–∏ ‚Äî [–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä](https://t.me/Thisissaymoon).",
        )
    elif data == 'cancel_cart':
        context.user_data.pop('cart', None)
        return await main_menu(update, context, "–ö–æ—Ä–∑–∏–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞. –ü–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –µ—â–µ?")
    return CONFIRM_CART

async def notify_admin_about_order(update: Update, context: ContextTypes.DEFAULT_TYPE, orders):
    if not ADMIN_CHAT_ID:
        return
    user = update.effective_user
    user_id = str(user.id)
    user_link = get_user_link(user)
    user_name = html.escape(user.full_name or user.first_name or str(user.id))
    header = f"üÜï –ù–æ–≤—ã–π –∑–∞–∫–∞–∑ –æ—Ç <a href=\"{html.escape(user_link, quote=True)}\">{user_name}</a> (ID: {user_id})"
    blocks = []
    for order in orders:
        order_name = ORDER_TYPES.get(order.get('type'), {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        contact_display = order.get('contact', '–ù–µ —É–∫–∞–∑–∞–Ω')
        contact_link = order.get('contact_link')
        if contact_link:
            contact_html = f"<a href=\"{html.escape(contact_link, quote=True)}\">{html.escape(contact_display)}</a>"
        else:
            contact_html = html.escape(contact_display)
        upsell_titles = [UPSELL_LABELS.get(u, u) for u in order.get('upsells', [])]
        upsell_text = ', '.join(upsell_titles) if upsell_titles else '–Ω–µ—Ç'
        deadline_display = order.get('deadline_label') or f"{order.get('deadline_days', 0)} –¥–Ω–µ–π"
        block = (
            f"#{order.get('order_id', 'N/A')} ‚Äî {html.escape(order_name)}\n"
            f"–¢–µ–º–∞: {html.escape(order.get('topic', '–ë–µ–∑ —Ç–µ–º—ã'))}\n"
            f"–°—Ä–æ–∫: {html.escape(deadline_display)}\n"
            f"–ö–æ–Ω—Ç–∞–∫—Ç –∫–ª–∏–µ–Ω—Ç–∞: {contact_html}\n"
            f"–î–æ–ø—ã: {html.escape(upsell_text)}\n"
            f"–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: {html.escape(order.get('requirements', '–ù–µ—Ç'))}\n"
            f"–°—É–º–º–∞: {order.get('price', 0)} ‚ÇΩ"
        )
        if order.get('files'):
            block += f"\n–§–∞–π–ª—ã: {len(order['files'])} —à—Ç."
        blocks.append(block)
    message = header + "\n\n" + "\n\n".join(blocks)
    await context.bot.send_message(ADMIN_CHAT_ID, message, parse_mode=ParseMode.HTML)
    for order in orders:
        order_name = ORDER_TYPES.get(order.get('type'), {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        caption_base = f"–§–∞–π–ª—ã –¥–ª—è –∑–∞–∫–∞–∑–∞ #{order.get('order_id', 'N/A')} ‚Äî {order_name}"
        for file_info in order.get('files', []):
            file_type = file_info.get('type')
            file_id = file_info.get('file_id')
            if not file_id:
                continue
            if file_type == 'document':
                caption = caption_base
                if file_info.get('file_name'):
                    caption += f"\n{file_info['file_name']}"
                await context.bot.send_document(ADMIN_CHAT_ID, file_id, caption=caption)
            elif file_type == 'photo':
                await context.bot.send_photo(ADMIN_CHAT_ID, file_id, caption=caption_base)
            elif file_type == 'audio':
                caption = caption_base
                if file_info.get('file_name'):
                    caption += f"\n{file_info['file_name']}"
                await context.bot.send_audio(ADMIN_CHAT_ID, file_id, caption=caption)
            elif file_type == 'voice':
                await context.bot.send_voice(ADMIN_CHAT_ID, file_id, caption=caption_base)
            elif file_type == 'video':
                caption = caption_base
                if file_info.get('file_name'):
                    caption += f"\n{file_info['file_name']}"
                await context.bot.send_video(ADMIN_CHAT_ID, file_id, caption=caption)
            elif file_type == 'video_note':
                await context.bot.send_video_note(ADMIN_CHAT_ID, file_id)
                await context.bot.send_message(ADMIN_CHAT_ID, caption_base)
            elif file_type == 'animation':
                caption = caption_base
                if file_info.get('file_name'):
                    caption += f"\n{file_info['file_name']}"
                await context.bot.send_animation(ADMIN_CHAT_ID, file_id, caption=caption)
            elif file_type == 'sticker':
                await context.bot.send_sticker(ADMIN_CHAT_ID, file_id)
                await context.bot.send_message(ADMIN_CHAT_ID, caption_base)


async def notify_admin_order_event(context: ContextTypes.DEFAULT_TYPE, user, order: dict, action: str, extra_note: Optional[str] = None):
    if not ADMIN_CHAT_ID:
        return
    user_link = get_user_link(user)
    user_name = html.escape(user.full_name or user.first_name or str(user.id))
    order_id = html.escape(str(order.get('order_id', 'N/A')))
    order_name = html.escape(ORDER_TYPES.get(order.get('type'), {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø'))
    status_html = html.escape(build_order_status(order))
    deadline_display = order.get('deadline_label') or f"{order.get('deadline_days', '‚Äî')} –¥–Ω–µ–π"
    contact_display = order.get('contact', '–ù–µ —É–∫–∞–∑–∞–Ω')
    contact_link = order.get('contact_link')
    if contact_link:
        contact_html = f"<a href=\"{html.escape(contact_link, quote=True)}\">{html.escape(contact_display)}</a>"
    else:
        contact_html = html.escape(contact_display)
    lines = [
        f"‚ÑπÔ∏è –ö–ª–∏–µ–Ω—Ç <a href=\"{html.escape(user_link, quote=True)}\">{user_name}</a> {html.escape(action)} –∑–∞–∫–∞–∑ #{order_id} ‚Äî {order_name}.",
        f"–°—Ç–∞—Ç—É—Å: {status_html}.",
        f"–°—Ä–æ–∫: {html.escape(deadline_display)}",
        f"–ö–æ–Ω—Ç–∞–∫—Ç –∫–ª–∏–µ–Ω—Ç–∞: {contact_html}",
    ]
    if extra_note:
        lines.append(html.escape(extra_note))
    await context.bot.send_message(ADMIN_CHAT_ID, "\n".join(lines), parse_mode=ParseMode.HTML, disable_web_page_preview=True)


# –ü–æ–∫–∞–∑ –ø—Ä–∞–π—Å-–ª–∏—Å—Ç–∞
async def show_price_list(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await answer_callback_query(query, context)
    data = query.data
    if data.startswith('price_detail_'):
        key = data[13:]
        val = ORDER_TYPES.get(key, {})
        if not val:
            await query.edit_message_text("–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø.")
            return SHOW_PRICE_LIST
        prices = PRICES.get(key, {})
        min_price = prices.get('min') or prices.get('base')
        rush_price = calculate_price(key, '24h') if prices else None
        text_lines = [
            f"{val.get('icon', '')} *{val.get('name', '')}*",
            "",
            val.get('description', ''),
            val.get('details', ''),
            f"–ü—Ä–∏–º–µ—Ä—ã: {', '.join(val.get('examples', []))}",
        ]
        if min_price:
            text_lines.append(f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {min_price} ‚ÇΩ")
        if rush_price and rush_price != min_price:
            text_lines.append(f"–°—Ä–æ—á–Ω—ã–π –∑–∞–∫–∞–∑ (24 —á–∞—Å–∞ –∏–ª–∏ –º–µ–Ω—å—à–µ): {rush_price} ‚ÇΩ")
        text_lines.append("\n–ó–∞–∫–∞–∂–∏—Ç–µ —Å–æ —Å–∫–∏–¥–∫–æ–π!")
        text = "\n".join(filter(None, text_lines))
        keyboard = [
            [InlineKeyboardButton("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å", callback_data='price_calculator')],
            [InlineKeyboardButton("–ó–∞–∫–∞–∑–∞—Ç—å", callback_data=f'type_{key}')],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='price_list')]
        ]
        await query.edit_message_text(text, parse_mode=ParseMode.MARKDOWN, reply_markup=InlineKeyboardMarkup(keyboard))
        return SHOW_PRICE_LIST
    elif data.startswith('type_'):
        return await view_order_details(update, context)
    elif data == 'price_calculator':
        return await price_calculator(update, context)
    elif data == 'back_to_main':
        return await main_menu(update, context)
    user = update.effective_user
    log_user_action(user.id, user.username, "–ü—Ä–∞–π—Å-–ª–∏—Å—Ç", user.full_name)
    text = "üí≤ –ü—Ä–∞–π—Å-–ª–∏—Å—Ç (10% —Å–∫–∏–¥–∫–∞ —Å–µ–≥–æ–¥–Ω—è! üî•):\n\n"
    for key, val in ORDER_TYPES.items():
        prices = PRICES.get(key, {})
        min_price = prices.get('min') or prices.get('base', 0)
        text += f"{val['icon']} *{val['name']}* ‚Äî –æ—Ç {min_price} ‚ÇΩ\n"
    keyboard = [[InlineKeyboardButton(f"–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ {val['name']}", callback_data=f'price_detail_{key}')] for key, val in ORDER_TYPES.items()]
    keyboard.append([InlineKeyboardButton("üßÆ –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Ü–µ–Ω—É", callback_data='price_calculator')])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ú–µ–Ω—é", callback_data='back_to_main')])
    await query.edit_message_text(text, parse_mode=ParseMode.MARKDOWN, reply_markup=InlineKeyboardMarkup(keyboard))
    return SHOW_PRICE_LIST

# –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ü–µ–Ω
async def price_calculator(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await answer_callback_query(query, context)
    data = query.data
    if data.startswith('type_'):
        return await view_order_details(update, context)
    if data.startswith('calc_type_'):
        key = data[10:]
        context.user_data['calc_type'] = key
        descriptions = [
            f"–¢–∏–ø: {ORDER_TYPES.get(key, {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}",
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—Ä–æ–∫ ‚Äî —Å–ø–æ–∫–æ–π–Ω—ã–µ —Å—Ä–æ–∫–∏ –¥–∞—é—Ç –±–æ–Ω—É—Å—ã:",
            "",
        ]
        for preset in DEADLINE_PRESETS:
            descriptions.append(f"{preset['label']} ‚Äî {preset['badge']}")
        reply_markup = build_deadline_keyboard('calc_dead_', include_back=True, back_callback='price_calculator')
        await query.edit_message_text("\n".join(descriptions), reply_markup=reply_markup)
        return SELECT_CALC_DEADLINE
    elif data == 'back_to_main':
        return await main_menu(update, context)
    user = update.effective_user
    log_user_action(user.id, user.username, "–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä", user.full_name)
    text = "üßÆ –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø:"
    keyboard = [[InlineKeyboardButton(f"{v['icon']} {v['name']}", callback_data=f'calc_type_{k}')] for k, v in ORDER_TYPES.items()]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ú–µ–Ω—é", callback_data='back_to_main')])
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    return PRICE_CALCULATOR

async def calc_select_deadline(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await answer_callback_query(query, context)
    data = query.data
    if data.startswith('calc_dead_'):
        key = data[10:]
        preset = get_deadline_preset(key)
        context.user_data['calc_deadline_key'] = key
        text = f"–°—Ä–æ–∫: {preset['label']}\n{preset['badge']}\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å:"
        calc_type = context.user_data.get('calc_type')
        back_target = f'calc_type_{calc_type}' if calc_type else 'price_calculator'
        keyboard = [
            [InlineKeyboardButton("–ü—Ä–æ—Å—Ç–∞—è (–±–∞–∑–æ–≤–∞—è)", callback_data='calc_comp_1.0')],
            [InlineKeyboardButton("–°—Ä–µ–¥–Ω—è—è (+10%)", callback_data='calc_comp_1.1'), InlineKeyboardButton("–°–ª–æ–∂–Ω–∞—è (+30%)", callback_data='calc_comp_1.3')],
            [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=back_target)]
        ]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
        return SELECT_CALC_COMPLEXITY
    return SELECT_CALC_DEADLINE

async def calc_select_complexity(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await answer_callback_query(query, context)
    data = query.data
    if data.startswith('calc_comp_'):
        comp_key = data[10:]
        comp = float(comp_key)
        key = context.user_data.get('calc_type')
        if not key:
            return await price_calculator(update, context)
        deadline_key = context.user_data.get('calc_deadline_key', DEFAULT_DEADLINE_KEY)
        preset = get_deadline_preset(deadline_key)
        price = calculate_price(key, deadline_key, comp)
        name = ORDER_TYPES.get(key, {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')
        complexity_labels = {
            '1.0': '–ü—Ä–æ—Å—Ç–∞—è (–±–∞–∑–æ–≤–∞—è)',
            '1.1': '–°—Ä–µ–¥–Ω—è—è (+10%)',
            '1.3': '–°–ª–æ–∂–Ω–∞—è (+30%)',
        }
        complexity_text = complexity_labels.get(comp_key, f"{int((comp - 1) * 100)}%")
        text = (
            f"–†–∞—Å—á–µ—Ç: {name}\n"
            f"–°—Ä–æ–∫: {preset['label']}\n"
            f"–°–ª–æ–∂–Ω–æ—Å—Ç—å: {complexity_text}\n"
            f"–¶–µ–Ω–∞: {price} ‚ÇΩ (–°–∫–∏–¥–∫–∞ —Å–µ–≥–æ–¥–Ω—è!)\n\n–ó–∞–∫–∞–∑–∞—Ç—å?"
        )
        keyboard = [
            [InlineKeyboardButton("üìù –ó–∞–∫–∞–∑–∞—Ç—å", callback_data=f'type_{key}')],
            [InlineKeyboardButton("–ü–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å", callback_data='price_calculator'), InlineKeyboardButton("–ú–µ–Ω—é", callback_data='back_to_main')]
        ]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
        return PRICE_CALCULATOR
    return SELECT_CALC_COMPLEXITY

# –ü–æ–∫–∞–∑ –ø—Ä–æ—Ñ–∏–ª—è
async def show_profile(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data if query else None
    if query:
        await answer_callback_query(query, context)
    user = update.effective_user
    if data in (None, 'profile', 'profile_main', 'profile_home'):
        if data == 'profile':
            log_user_action(user.id, user.username, "–ü—Ä–æ—Ñ–∏–ª—å", user.full_name)
        return await render_profile_main(update, context)
    if data == 'profile_back' or data == 'back_to_main':
        return await main_menu(update, context)
    if data == 'profile_orders':
        return await profile_show_orders(update, context)
    if data and data.startswith('profile_order_pause_'):
        order_id = data.rsplit('_', 1)[-1]
        return await profile_toggle_order_pause(update, context, order_id)
    if data and data.startswith('profile_order_delete_'):
        order_id = data.rsplit('_', 1)[-1]
        return await profile_delete_order(update, context, order_id)
    if data and data.startswith('profile_order_remind_'):
        order_id = data.rsplit('_', 1)[-1]
        return await profile_remind_order(update, context, order_id)
    if data and data.startswith('profile_order_'):
        order_id = data.rsplit('_', 1)[-1]
        return await profile_show_order_detail(update, context, order_id)
    if data == 'profile_feedbacks':
        return await profile_show_feedbacks(update, context)
    if data == 'profile_feedback_add':
        return await profile_prompt_feedback(update, context)
    if data and data.startswith('profile_feedback_delete_'):
        index_key = data.rsplit('_', 1)[-1]
        return await profile_delete_feedback(update, context, index_key)
    if data == 'profile_referrals':
        return await profile_show_referrals(update, context)
    if data == 'profile_bonuses':
        return await profile_show_bonuses(update, context)
    return await render_profile_main(update, context)

# –ü–æ–∫–∞–∑ –∑–∞–∫–∞–∑–æ–≤


async def render_profile_main(update: Update, context: ContextTypes.DEFAULT_TYPE, notice: Optional[str] = None):
    user = update.effective_user
    user_id = str(user.id)
    orders = ORDERS.get(user_id, [])
    feedbacks = get_feedback_entries(user_id)
    try:
        referrals = get_referrals_for_referrer(int(user_id))
    except (TypeError, ValueError):
        referrals = []
    credited, redeemed, balance, _ = get_bonus_summary(user_id)
    ref_link = context.user_data.get('ref_link')
    if not ref_link:
        bot_username = (await context.bot.get_me()).username
        ref_link = f"https://t.me/{bot_username}?start={user_id}"
        context.user_data['ref_link'] = ref_link
    lines = [f"üë§ <b>{html.escape(user.full_name or user.first_name or '–ü—Ä–æ—Ñ–∏–ª—å')}</b>"]
    if notice:
        lines.append(f"<i>{html.escape(notice)}</i>")
    lines.extend([
        f"\nüì¶ –ó–∞–∫–∞–∑—ã: {len(orders)}",
        f"‚≠ê –û—Ç–∑—ã–≤—ã: {len(feedbacks)}",
        f"üë• –†–µ—Ñ–µ—Ä–∞–ª—ã: {len(referrals)}",
        f"üéÅ –ë–æ–Ω—É—Å—ã: {balance} ‚ÇΩ (–Ω–∞—á–∏—Å–ª–µ–Ω–æ {credited} ‚ÇΩ / —Å–ø–∏—Å–∞–Ω–æ {redeemed} ‚ÇΩ)",
        "",
        "–ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –∏ –∫–æ–ø–∏—Ç–µ –±–æ–Ω—É—Å—ã –∑–∞ –∏—Ö –∑–∞–∫–∞–∑—ã!",
        f"–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: <a href=\"{html.escape(ref_link, quote=True)}\">{html.escape(ref_link)}</a>",
    ])
    keyboard = [
        [InlineKeyboardButton("üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data='profile_orders')],
        [InlineKeyboardButton("‚≠ê –û—Ç–∑—ã–≤—ã", callback_data='profile_feedbacks')],
        [InlineKeyboardButton("üë• –†–µ—Ñ–µ—Ä–∞–ª—ã", callback_data='profile_referrals'), InlineKeyboardButton("üéÅ –ë–æ–Ω—É—Å—ã", callback_data='profile_bonuses')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ú–µ–Ω—é", callback_data='back_to_main')],
    ]
    await edit_or_send(update, context, "\n".join(lines), keyboard)
    return PROFILE_MENU


async def profile_show_orders(update: Update, context: ContextTypes.DEFAULT_TYPE, notice: Optional[str] = None):
    user = update.effective_user
    user_id = str(user.id)
    log_user_action(user.id, user.username, "–ü—Ä–æ—Ñ–∏–ª—å: —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤", user.full_name)
    orders = sorted(ORDERS.get(user_id, []), key=lambda o: o.get('order_id', 0))
    lines = ["üì¶ <b>–í–∞—à–∏ –∑–∞–∫–∞–∑—ã</b>"]
    if notice:
        lines.append(f"<i>{html.escape(notice)}</i>")
    if not orders:
        lines.append("–ü–æ–∫–∞ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç. –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª ¬´–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑¬ª.")
    else:
        for order in orders:
            order_id = order.get('order_id', '‚Äî')
            order_name = ORDER_TYPES.get(order.get('type'), {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø')
            status = build_order_status(order)
            lines.append(
                f"‚Ä¢ #{html.escape(str(order_id))} ‚Äî {html.escape(order_name)} ({html.escape(status)})"
            )
    keyboard = []
    for order in orders:
        order_id = order.get('order_id')
        if order_id is None:
            continue
        order_name = ORDER_TYPES.get(order.get('type'), {}).get('name', '–ó–∞–∫–∞–∑')
        prefix = '‚è∏ ' if is_order_paused(order) else ''
        label = f"{prefix}#{order_id} ¬∑ {truncate_for_button(order_name)}"
        keyboard.append([InlineKeyboardButton(label, callback_data=f'profile_order_{order_id}')])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–æ—Ñ–∏–ª—å", callback_data='profile')])
    await edit_or_send(update, context, "\n".join(lines), keyboard)
    return PROFILE_ORDERS


async def profile_show_order_detail(update: Update, context: ContextTypes.DEFAULT_TYPE, order_id: str, notice: Optional[str] = None):
    user = update.effective_user
    order, _ = find_user_order(user.id, order_id)
    if not order:
        return await profile_show_orders(update, context, notice="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ —É–¥–∞–ª—ë–Ω.")
    log_user_action(user.id, user.username, f"–ü—Ä–æ—Ñ–∏–ª—å: –∑–∞–∫–∞–∑ #{order_id}", user.full_name)
    order_number = html.escape(str(order.get('order_id', order_id)))
    header = f"üì¶ <b>–ó–∞–∫–∞–∑ #{order_number}</b>"
    details = build_order_detail_text(order)
    parts = [header]
    if notice:
        parts.append(f"<i>{html.escape(notice)}</i>")
    parts.append(details)
    pause_label = "‚ñ∂Ô∏è –í–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å" if is_order_paused(order) else "‚è∏ –ü–∞—É–∑–∞"
    keyboard = [
        [InlineKeyboardButton(pause_label, callback_data=f'profile_order_pause_{order_id}')],
        [InlineKeyboardButton("üîî –ù–∞–ø–æ–º–Ω–∏—Ç—å –º–µ–Ω–µ–¥–∂–µ—Ä—É", callback_data=f'profile_order_remind_{order_id}')],
        [InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f'profile_order_delete_{order_id}')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ö –∑–∞–∫–∞–∑–∞–º", callback_data='profile_orders')],
        [InlineKeyboardButton("üè† –ü—Ä–æ—Ñ–∏–ª—å", callback_data='profile')],
    ]
    await edit_or_send(update, context, "\n\n".join(parts), keyboard)
    return PROFILE_ORDER_DETAIL


async def profile_toggle_order_pause(update: Update, context: ContextTypes.DEFAULT_TYPE, order_id: str):
    user = update.effective_user
    order, _ = find_user_order(user.id, order_id)
    if not order:
        return await profile_show_orders(update, context, notice="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    if is_order_paused(order):
        previous = order.get('status_before_pause', '–≤ —Ä–∞–±–æ—Ç–µ')
        order['status'] = previous
        order['client_paused'] = False
        order.pop('status_before_pause', None)
        notice = "–ó–∞–∫–∞–∑ –≤–æ–∑–æ–±–Ω–æ–≤–ª—ë–Ω. –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ–ª—É—á–∏–ª —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ."
        action = "–≤–æ–∑–æ–±–Ω–æ–≤–∏–ª"
    else:
        order['status_before_pause'] = order.get('status', '–Ω–æ–≤—ã–π')
        order['status'] = '–Ω–∞ –ø–∞—É–∑–µ (–∫–ª–∏–µ–Ω—Ç)'
        order['client_paused'] = True
        notice = "–ó–∞–∫–∞–∑ –ø–æ—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –ø–∞—É–∑—É. –ú—ã –ø–æ–¥–æ–∂–¥—ë–º –≤–∞—à–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞."
        action = "–ø–æ—Å—Ç–∞–≤–∏–ª –Ω–∞ –ø–∞—É–∑—É"
    save_json(ORDERS_FILE, ORDERS)
    log_user_action(user.id, user.username, f"–ü—Ä–æ—Ñ–∏–ª—å: {action} –∑–∞–∫–∞–∑ #{order_id}", user.full_name)
    if ADMIN_CHAT_ID:
        await notify_admin_order_event(context, user, order, action)
    return await profile_show_order_detail(update, context, order_id, notice=notice)


async def profile_delete_order(update: Update, context: ContextTypes.DEFAULT_TYPE, order_id: str):
    user = update.effective_user
    order, user_orders = find_user_order(user.id, order_id)
    if not order:
        return await profile_show_orders(update, context, notice="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    user_orders[:] = [o for o in user_orders if str(o.get('order_id')) != str(order_id)]
    if not user_orders:
        ORDERS.pop(str(user.id), None)
    save_json(ORDERS_FILE, ORDERS)
    log_user_action(user.id, user.username, f"–ü—Ä–æ—Ñ–∏–ª—å: —É–¥–∞–ª–∏–ª –∑–∞–∫–∞–∑ #{order_id}", user.full_name)
    if ADMIN_CHAT_ID:
        await notify_admin_order_event(context, user, order, '—É–¥–∞–ª–∏–ª', extra_note='–ö–ª–∏–µ–Ω—Ç –∑–∞–ø—Ä–æ—Å–∏–ª –æ—Ç–º–µ–Ω—É –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ—Ñ–∏–ª—å.')
    return await profile_show_orders(update, context, notice='–ó–∞–∫–∞–∑ —É–¥–∞–ª—ë–Ω. –ï—Å–ª–∏ –ø–ª–∞–Ω—ã –∏–∑–º–µ–Ω—è—Ç—Å—è ‚Äî —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑.')


async def profile_remind_order(update: Update, context: ContextTypes.DEFAULT_TYPE, order_id: str):
    user = update.effective_user
    order, _ = find_user_order(user.id, order_id)
    if not order:
        return await profile_show_orders(update, context, notice="–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
    log_user_action(user.id, user.username, f"–ü—Ä–æ—Ñ–∏–ª—å: –Ω–∞–ø–æ–º–Ω–∏–ª –æ –∑–∞–∫–∞–∑–µ #{order_id}", user.full_name)
    if ADMIN_CHAT_ID:
        deadline = order.get('deadline_label') or f"{order.get('deadline_days', '‚Äî')} –¥–Ω–µ–π"
        extra = f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç –∫–ª–∏–µ–Ω—Ç–∞. –°—Ä–æ–∫: {deadline}."
        await notify_admin_order_event(context, user, order, '–Ω–∞–ø–æ–º–Ω–∏–ª –æ', extra_note=extra)
    notice = "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É. –ú—ã —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ–º—Å—è!"
    return await profile_show_order_detail(update, context, order_id, notice=notice)


async def profile_show_feedbacks(update: Update, context: ContextTypes.DEFAULT_TYPE, notice: Optional[str] = None):
    user = update.effective_user
    entries = get_feedback_entries(user.id)
    log_user_action(user.id, user.username, "–ü—Ä–æ—Ñ–∏–ª—å: –æ—Ç–∑—ã–≤—ã", user.full_name)
    lines = ["‚≠ê <b>–í–∞—à–∏ –æ—Ç–∑—ã–≤—ã</b>"]
    if notice:
        lines.append(f"<i>{html.escape(notice)}</i>")
    if not entries:
        lines.append("–í—ã –µ—â—ë –Ω–µ –æ—Å—Ç–∞–≤–ª—è–ª–∏ –æ—Ç–∑—ã–≤. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏–µ–º –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å—ã!")
    else:
        for idx, entry in enumerate(entries, 1):
            text = html.escape(entry.get('text', '')) or '‚Äî'
            created = entry.get('created_at')
            if created:
                lines.append(f"{idx}. {text}\n<small>{html.escape(str(created))}</small>")
            else:
                lines.append(f"{idx}. {text}")
    keyboard = [[InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤", callback_data='profile_feedback_add')]]
    if entries:
        row = []
        for idx in range(len(entries)):
            row.append(InlineKeyboardButton(f"üóë ‚Ññ{idx + 1}", callback_data=f'profile_feedback_delete_{idx}'))
            if len(row) == 3:
                keyboard.append(row)
                row = []
        if row:
            keyboard.append(row)
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–æ—Ñ–∏–ª—å", callback_data='profile')])
    await edit_or_send(update, context, "\n".join(lines), keyboard)
    return PROFILE_FEEDBACKS


async def profile_prompt_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = (
        "‚≠ê <b>–û—Å—Ç–∞–≤—å—Ç–µ –æ—Ç–∑—ã–≤</b>\n\n"
        f"–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º, —á—Ç–æ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å –∏–ª–∏ —á—Ç–æ –º–æ–∂–Ω–æ —É–ª—É—á—à–∏—Ç—å. –ó–∞ –æ—Ç–∑—ã–≤ –Ω–∞—á–∏—Å–ª–∏–º {FEEDBACK_BONUS_AMOUNT} ‚ÇΩ –Ω–∞ –±–æ–Ω—É—Å–Ω—ã–π —Å—á—ë—Ç.\n\n"
        "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –Ω–∞–∂–º–∏—Ç–µ ¬´‚¨ÖÔ∏è –ü—Ä–æ—Ñ–∏–ª—å¬ª –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel."
    )
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–æ—Ñ–∏–ª—å", callback_data='profile_feedbacks')]]
    await edit_or_send(update, context, text, keyboard)
    return PROFILE_FEEDBACK_INPUT


async def input_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = str(user.id)
    text = (update.message.text or '').strip()
    if not text:
        await update.message.reply_text("–û—Ç–∑—ã–≤ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /cancel.")
        return PROFILE_FEEDBACK_INPUT
    if text.lower() in {'/cancel', '–æ—Ç–º–µ–Ω–∞'}:
        await update.message.reply_text("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–∑—ã–≤–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return await profile_show_feedbacks(update, context, notice='–û—Ç–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ—Ç–∑—ã–≤–∞.')
    entries = get_feedback_entries(user_id)
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    entries.append({'text': text, 'created_at': timestamp})
    save_feedback_entries(user_id, entries)
    add_bonus_operation(user_id, FEEDBACK_BONUS_AMOUNT, 'credit', '–û—Ç–∑—ã–≤ –∫–ª–∏–µ–Ω—Ç–∞')
    await update.message.reply_text(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–∑—ã–≤! –ù–∞ –±–æ–Ω—É—Å–Ω—ã–π —Å—á—ë—Ç –Ω–∞—á–∏—Å–ª–µ–Ω–æ {FEEDBACK_BONUS_AMOUNT} ‚ÇΩ.")
    if ADMIN_CHAT_ID:
        user_link = get_user_link(user)
        admin_text = (
            f"‚≠ê –ù–æ–≤—ã–π –æ—Ç–∑—ã–≤ –æ—Ç <a href=\"{html.escape(user_link, quote=True)}\">{html.escape(user.full_name or user.first_name or user_id)}</a>\n"
            f"–¢–µ–∫—Å—Ç: {html.escape(text)}"
        )
        await context.bot.send_message(ADMIN_CHAT_ID, admin_text, parse_mode=ParseMode.HTML, disable_web_page_preview=True)
    return await profile_show_feedbacks(update, context, notice='–û—Ç–∑—ã–≤ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –∏ –ø–µ—Ä–µ–¥–∞–Ω –º–µ–Ω–µ–¥–∂–µ—Ä—É.')


async def profile_delete_feedback(update: Update, context: ContextTypes.DEFAULT_TYPE, index_key: str):
    user = update.effective_user
    user_id = str(user.id)
    entries = get_feedback_entries(user_id)
    try:
        idx = int(index_key)
    except (TypeError, ValueError):
        return await profile_show_feedbacks(update, context, notice='–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Ç–∑—ã–≤.')
    if idx < 0 or idx >= len(entries):
        return await profile_show_feedbacks(update, context, notice='–û—Ç–∑—ã–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω.')
    removed = entries.pop(idx)
    save_feedback_entries(user_id, entries)
    log_user_action(user.id, user.username, f"–ü—Ä–æ—Ñ–∏–ª—å: —É–¥–∞–ª–∏–ª –æ—Ç–∑—ã–≤ ‚Ññ{idx + 1}", user.full_name)
    if ADMIN_CHAT_ID:
        user_link = get_user_link(user)
        removed_text = removed.get('text', '')
        admin_text = (
            f"üóë –ö–ª–∏–µ–Ω—Ç <a href=\"{html.escape(user_link, quote=True)}\">{html.escape(user.full_name or user.first_name or user_id)}</a> —É–¥–∞–ª–∏–ª –æ—Ç–∑—ã–≤.\n"
            f"–¢–µ–∫—Å—Ç: {html.escape(removed_text)}"
        )
        await context.bot.send_message(ADMIN_CHAT_ID, admin_text, parse_mode=ParseMode.HTML, disable_web_page_preview=True)
    return await profile_show_feedbacks(update, context, notice='–û—Ç–∑—ã–≤ —É–¥–∞–ª—ë–Ω.')


async def profile_show_referrals(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = str(user.id)
    try:
        referrals = get_referrals_for_referrer(int(user_id))
    except (TypeError, ValueError):
        referrals = []
    log_user_action(user.id, user.username, "–ü—Ä–æ—Ñ–∏–ª—å: —Ä–µ—Ñ–µ—Ä–∞–ª—ã", user.full_name)
    lines = ["üë• <b>–†–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞</b>"]
    if not referrals:
        lines.append("–ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã—Ö –¥—Ä—É–∑–µ–π. –ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π –∏ –ø–æ–ª—É—á–∞–π—Ç–µ –±–æ–Ω—É—Å—ã —Å –∏—Ö –∑–∞–∫–∞–∑–æ–≤!")
    else:
        for idx, ref in enumerate(referrals, 1):
            ref_user_id = ref.get('user_id')
            display_name = ref.get('full_name') or ref.get('username') or ref_user_id or f"–†–µ—Ñ–µ—Ä–∞–ª ‚Ññ{idx}"
            status = html.escape(str(ref.get('status', '–≤ –ø—Ä–æ—Ü–µ—Å—Å–µ')))
            bonus_total = ref.get('bonus_total', 0)
            if ref_user_id:
                try:
                    link = build_user_contact_link(int(ref_user_id))
                    name_html = f"<a href=\"{html.escape(link, quote=True)}\">{html.escape(str(display_name))}</a>"
                except (TypeError, ValueError):
                    name_html = html.escape(str(display_name))
            else:
                name_html = html.escape(str(display_name))
            lines.append(f"{idx}. {name_html} ‚Äî {status} (–Ω–∞—á–∏—Å–ª–µ–Ω–æ –±–æ–Ω—É—Å–æ–≤ {bonus_total} ‚ÇΩ)")
    ref_link = context.user_data.get('ref_link')
    if not ref_link:
        bot_username = (await context.bot.get_me()).username
        ref_link = f"https://t.me/{bot_username}?start={user_id}"
        context.user_data['ref_link'] = ref_link
    lines.extend([
        "",
        f"–í–∞—à–∞ —Å—Å—ã–ª–∫–∞: <a href=\"{html.escape(ref_link, quote=True)}\">{html.escape(ref_link)}</a>",
    ])
    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–æ—Ñ–∏–ª—å", callback_data='profile')],
    ]
    await edit_or_send(update, context, "\n".join(lines), keyboard)
    return PROFILE_REFERRALS


async def profile_show_bonuses(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = str(user.id)
    credited, redeemed, balance, history = get_bonus_summary(user_id)
    log_user_action(user.id, user.username, "–ü—Ä–æ—Ñ–∏–ª—å: –±–æ–Ω—É—Å—ã", user.full_name)
    lines = [
        "üéÅ <b>–ë–æ–Ω—É—Å–Ω—ã–π —Å—á—ë—Ç</b>",
        f"–ù–∞—á–∏—Å–ª–µ–Ω–æ: {credited} ‚ÇΩ",
        f"–°–ø–∏—Å–∞–Ω–æ: {redeemed} ‚ÇΩ",
        f"–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å: {balance} ‚ÇΩ",
    ]
    if history:
        lines.append("\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:")
        for item in reversed(history[-5:]):
            if isinstance(item, dict):
                amount = item.get('amount', 0)
                op_type = item.get('type')
                sign = '+' if op_type == 'credit' else '-'
                reason = item.get('reason', '')
                timestamp = item.get('timestamp', '')
                line = f"{timestamp} {sign}{amount} ‚ÇΩ ‚Äî {reason}".strip()
                lines.append(html.escape(line))
            else:
                lines.append(html.escape(str(item)))
    else:
        lines.append("\n–ò—Å—Ç–æ—Ä–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π –ø–æ—è–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–π.")
    lines.append("\n–ë–æ–Ω—É—Å–∞–º–∏ –º–æ–∂–Ω–æ –æ–ø–ª–∞—Ç–∏—Ç—å –¥–æ 50% —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞. –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∏—Ö –≤ —Ç–µ—á–µ–Ω–∏–µ 30 –¥–Ω–µ–π ‚Äî –∏–Ω–∞—á–µ –æ–Ω–∏ —Å–≥–æ—Ä–∞—é—Ç.")
    keyboard = [
        [InlineKeyboardButton("‚¨ÖÔ∏è –ü—Ä–æ—Ñ–∏–ª—å", callback_data='profile')],
    ]
    await edit_or_send(update, context, "\n".join(lines), keyboard)
    return PROFILE_BONUSES

# –ü–æ–∫–∞–∑ FAQ
async def show_faq(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await answer_callback_query(query, context)
    data = query.data
    if data.startswith('faq_'):
        idx = int(data[4:])
        item = FAQ_ITEMS[idx]
        text = f"‚ùì {item['question']}\n\n{item['answer']}"
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥ –∫ FAQ", callback_data='faq')],
                    [InlineKeyboardButton("–ú–µ–Ω—é", callback_data='back_to_main')]]
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
        return FAQ_DETAILS
    elif data == 'back_to_main':
        return await main_menu(update, context)
    user = update.effective_user
    log_user_action(user.id, user.username, "FAQ", user.full_name)
    text = "‚ùì FAQ: –í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å"
    keyboard = [[InlineKeyboardButton(item['question'], callback_data=f'faq_{i}')] for i, item in enumerate(FAQ_ITEMS)]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ú–µ–Ω—é", callback_data='back_to_main')])
    await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    return SHOW_FAQ

# –ü–æ–∫–∞–∑ –∞–¥–º–∏–Ω –º–µ–Ω—é
async def show_admin_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("üì¶ –í—Å–µ –∑–∞–∫–∞–∑—ã", callback_data='admin_orders'), InlineKeyboardButton("üî• –ü–æ—Å–ª–µ–¥–Ω–∏–µ", callback_data='admin_recent_orders')],
        [InlineKeyboardButton("üë• –õ–∏–¥—ã", callback_data='admin_leads'), InlineKeyboardButton("üéÅ –ë–æ–Ω—É—Å—ã", callback_data='admin_bonuses')],
        [InlineKeyboardButton("üí≤ –¶–µ–Ω—ã", callback_data='admin_prices'), InlineKeyboardButton("üì§ –≠–∫—Å–ø–æ—Ä—Ç", callback_data='admin_export')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –í—ã—Ö–æ–¥", callback_data='back_to_main')]
    ]
    text = "üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:"
    if update.callback_query:
        query = update.callback_query
        await answer_callback_query(query, context)
        await query.edit_message_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    else:
        await update.message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))
    return ADMIN_MENU

def find_order_for_admin(user_id, order_id):
    user_key = str(user_id)
    user_orders = ORDERS.get(user_key, [])
    for order in user_orders:
        if str(order.get('order_id')) == str(order_id):
            normalize_order_record(order, user_key)
            return order, user_orders
    return None, user_orders


def set_order_status(order: dict, status_code: str, note: Optional[str] = None) -> bool:
    target_code = resolve_status_code(status_code)
    current_code = resolve_status_code(order.get('status_code') or order.get('status'))
    if target_code == current_code:
        return False
    label = get_status_label(target_code)
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    order['status_code'] = target_code
    order['status'] = label
    order['updated_at'] = timestamp
    history = order.setdefault('status_history', [])
    history.append({
        'code': target_code,
        'status': label,
        'timestamp': timestamp,
        'note': note,
    })
    return True


def calculate_loyalty_bonus(amount: int) -> int:
    raw_bonus = amount * LOYALTY_BONUS_RATE
    return max(LOYALTY_BONUS_MIN, round_price(raw_bonus))


def calculate_referral_bonus(amount: int) -> int:
    raw_bonus = amount * REFERRAL_BONUS_RATE
    return max(REFERRAL_BONUS_MIN, round_price(raw_bonus))


async def award_loyalty_bonus(context: ContextTypes.DEFAULT_TYPE, user_id: int, order: dict):
    if order.get('loyalty_rewarded'):
        return
    price = int(order.get('price', 0) or 0)
    if price <= 0:
        return
    bonus_amount = calculate_loyalty_bonus(price)
    add_bonus_operation(str(user_id), bonus_amount, 'loyalty', f'–ë–æ–Ω—É—Å –∑–∞ –æ–ø–ª–∞—Ç—É –∑–∞–∫–∞–∑–∞ #{order.get("order_id")}')
    order['loyalty_rewarded'] = True
    await safe_send_message(
        context.bot,
        user_id,
        f"üéÅ –ó–∞ –∑–∞–∫–∞–∑ #{order.get('order_id')} –Ω–∞—á–∏—Å–ª–µ–Ω–æ {bonus_amount} ‚ÇΩ –±–æ–Ω—É—Å–∞–º–∏. –°–ø–∞—Å–∏–±–æ –∑–∞ –¥–æ–≤–µ—Ä–∏–µ!",
    )


async def award_referral_bonus(context: ContextTypes.DEFAULT_TYPE, user_id: int, order: dict):
    if order.get('referral_rewarded'):
        return
    referrer_id = order.get('referrer_id') or get_referrer_for_user(user_id)
    if not referrer_id:
        return
    try:
        referrer_int = int(referrer_id)
    except (TypeError, ValueError):
        referrer_int = None
    price = int(order.get('price', 0) or 0)
    if price <= 0:
        return
    bonus_amount = calculate_referral_bonus(price)
    add_bonus_operation(str(referrer_id), bonus_amount, 'referral', f'–ë–æ–Ω—É—Å –∑–∞ –∑–∞–∫–∞–∑ #{order.get("order_id")} –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    order['referral_rewarded'] = True
    update_referral_entry(
        str(referrer_id),
        user_id,
        add_awarded=order.get('order_id'),
        status='—Ä–µ—Ñ–µ—Ä–∞–ª –æ–ø–ª–∞—Ç–∏–ª –∑–∞–∫–∞–∑',
        bonus_increment=bonus_amount,
    )
    save_json(REFERRALS_FILE, REFERALS)
    if referrer_int:
        await safe_send_message(
            context.bot,
            referrer_int,
            f"üéâ –í–∞—à –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–π –∫–ª–∏–µ–Ω—Ç –æ–ø–ª–∞—Ç–∏–ª –∑–∞–∫–∞–∑ #{order.get('order_id')}! –ù–∞—á–∏—Å–ª–µ–Ω–æ {bonus_amount} ‚ÇΩ.",
        )


async def process_paid_order(context: ContextTypes.DEFAULT_TYPE, user_id: int, order: dict):
    await award_loyalty_bonus(context, user_id, order)
    await award_referral_bonus(context, user_id, order)


def available_bonus_for_order(order: dict) -> int:
    try:
        price = int(order.get('price', 0) or 0)
    except (TypeError, ValueError):
        price = 0
    try:
        used = int(order.get('bonus_used', 0) or 0)
    except (TypeError, ValueError):
        used = 0
    limit = int(price * BONUS_USAGE_LIMIT)
    return max(0, limit - used)


def collect_all_orders() -> list:
    collected = []
    for user_id, orders in ORDERS.items():
        if not isinstance(orders, list):
            continue
        for order in orders:
            if not isinstance(order, dict):
                continue
            normalize_order_record(order, user_id)
            created = parse_datetime(order.get('created_at'))
            updated = parse_datetime(order.get('updated_at'))
            try:
                owner_id = int(user_id)
            except (TypeError, ValueError):
                owner_id = user_id
            collected.append({
                'user_id': owner_id,
                'order': order,
                'created': created,
                'updated': updated,
            })
    collected.sort(key=lambda item: item['created'], reverse=True)
    return collected


async def debit_bonuses_for_order(
    context: ContextTypes.DEFAULT_TYPE,
    user_id: int,
    order: dict,
    requested_amount: int,
):
    entry = ensure_bonus_account(str(user_id))
    balance = int(entry.get('balance', 0))
    limit = available_bonus_for_order(order)
    amount = min(requested_amount, balance, limit)
    if amount <= 0:
        return 0
    add_bonus_operation(str(user_id), amount, 'order_payment', f'–°–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–∫–∞–∑ #{order.get("order_id")}')
    order['bonus_used'] = order.get('bonus_used', 0) + amount
    updated_entry = ensure_bonus_account(user_id)
    new_balance = updated_entry.get('balance', 0)
    await safe_send_message(
        context.bot,
        user_id,
        f"‚úÖ –°–ø–∏—Å–∞–Ω–æ {amount} ‚ÇΩ –±–æ–Ω—É—Å–∞–º–∏ –∑–∞ –∑–∞–∫–∞–∑ #{order.get('order_id')} (–æ—Å—Ç–∞–ª–æ—Å—å {new_balance} ‚ÇΩ).",
    )
    return amount

def chunk_buttons(buttons, size=2):
    return [buttons[i:i + size] for i in range(0, len(buttons), size) if buttons[i:i + size]]


def build_admin_order_view(user_id, order: dict, notice: Optional[str] = None):
    owner_id = int(user_id)
    order_name = ORDER_TYPES.get(order.get('type'), {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø')
    contact_link = order.get('contact_link') or build_user_contact_link(owner_id)
    contact_display = order.get('contact') or format_user_display_name(owner_id)
    contact_html = f"<a href=\"{html.escape(contact_link, quote=True)}\">{html.escape(contact_display)}</a>"
    upsell_titles = [UPSELL_LABELS.get(u, u) for u in order.get('upsells', [])]
    upsell_text = ', '.join(upsell_titles) if upsell_titles else '–Ω–µ—Ç'
    history_lines = []
    for item in order.get('status_history', [])[-5:]:
        if isinstance(item, dict):
            stamp = item.get('timestamp') or '‚Äî'
            status_text = item.get('status') or item.get('code') or '‚Äî'
            note = item.get('note')
            suffix = f" ¬∑ {note}" if note else ''
            history_lines.append(f"{html.escape(str(stamp))} ‚Äî {html.escape(str(status_text))}{html.escape(suffix)}")
    bonus_used = order.get('bonus_used', 0)
    referrer_id = order.get('referrer_id')
    ref_info = ''
    if referrer_id:
        try:
            ref_display = format_user_display_name(int(referrer_id))
            ref_link = build_user_contact_link(int(referrer_id))
            ref_info = f"<a href=\"{html.escape(ref_link, quote=True)}\">{html.escape(ref_display)}</a>"
        except (TypeError, ValueError):
            ref_info = html.escape(str(referrer_id))
    lines = [f"üì¶ <b>–ó–∞–∫–∞–∑ #{html.escape(str(order.get('order_id', '‚Äî')))}</b>"]
    if notice:
        lines.append(f"<i>{html.escape(notice)}</i>")
    lines.extend([
        f"–¢–∏–ø: {html.escape(order_name)}",
        f"–ö–ª–∏–µ–Ω—Ç: {contact_html}",
        f"–¢–µ–ª–µ–≥—Ä–∞–º: <a href=\"{html.escape(build_user_contact_link(owner_id), quote=True)}\">{html.escape(format_user_display_name(owner_id))}</a>",
        f"–°—Ç–∞—Ç—É—Å: {html.escape(order.get('status', '‚Äî'))}",
        f"–°–æ–∑–¥–∞–Ω: {html.escape(str(order.get('created_at', '‚Äî')))}",
        f"–û–±–Ω–æ–≤–ª—ë–Ω: {html.escape(str(order.get('updated_at', '‚Äî')))}",
        f"–¶–µ–Ω–∞: {order.get('price', 0)} ‚ÇΩ (–±–æ–Ω—É—Å–∞–º–∏ –æ–ø–ª–∞—á–µ–Ω–æ {bonus_used} ‚ÇΩ)",
    ])
    if order.get('deadline_label') or order.get('deadline_days'):
        deadline_display = order.get('deadline_label') or f"{order.get('deadline_days', '‚Äî')} –¥–Ω–µ–π"
        lines.append(f"–°—Ä–æ–∫: {html.escape(deadline_display)}")
    if order.get('topic'):
        lines.append(f"–¢–µ–º–∞: {html.escape(order.get('topic', ''))}")
    if order.get('requirements'):
        lines.append(f"–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: {html.escape(order.get('requirements', ''))}")
    lines.append(f"–ö–æ–Ω—Ç–∞–∫—Ç –∫–ª–∏–µ–Ω—Ç–∞: {contact_html}")
    lines.append(f"–î–æ–ø—ã: {html.escape(upsell_text)}")
    if ref_info:
        lines.append(f"–†–µ—Ñ–µ—Ä–µ—Ä: {ref_info}")
    lines.append(f"–§–∞–π–ª—ã: {len(order.get('files', []) or [])}")
    if history_lines:
        lines.append("\n–ò—Å—Ç–æ—Ä–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤:")
        lines.extend(history_lines)
    keyboard_buttons = []
    status_buttons = []
    current_code = resolve_status_code(order.get('status_code') or order.get('status'))
    for status in ORDER_STATUS_CHOICES:
        prefix = '‚úÖ' if status['code'] == current_code else '‚Ä¢'
        status_buttons.append(
            InlineKeyboardButton(
                f"{prefix} {status['label']}",
                callback_data=f"admin_status_{user_id}_{order.get('order_id')}_{status['code']}"
            )
        )
    keyboard_buttons.extend(chunk_buttons(status_buttons, 2))
    available_for_order = available_bonus_for_order(order)
    client_balance = ensure_bonus_account(str(user_id)).get('balance', 0)
    if available_for_order and client_balance:
        keyboard_buttons.append([
            InlineKeyboardButton(
                "üí≥ –°–ø–∏—Å–∞—Ç—å –±–æ–Ω—É—Å—ã",
                callback_data=f"admin_order_bonus_{user_id}_{order.get('order_id')}"
            )
        ])
    keyboard_buttons.append([
        InlineKeyboardButton("üéÅ –ë–æ–Ω—É—Å—ã –∫–ª–∏–µ–Ω—Ç–∞", callback_data=f'admin_bonus_user_{user_id}')
    ])
    keyboard_buttons.append([
        InlineKeyboardButton("üóë –£–¥–∞–ª–∏—Ç—å –∑–∞–∫–∞–∑", callback_data=f'admin_delete_{user_id}_{order.get('order_id')}')
    ])
    keyboard_buttons.append([InlineKeyboardButton("‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data='admin_orders')])
    markup = InlineKeyboardMarkup(keyboard_buttons)
    return "\n".join(lines), markup


async def admin_show_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await answer_callback_query(query, context)
    orders = collect_all_orders()
    status_counts = {}
    for item in orders:
        status_label = item['order'].get('status') or get_status_label(item['order'].get('status_code'))
        status_counts[status_label] = status_counts.get(status_label, 0) + 1
    lines = [
        "üì¶ <b>–í—Å–µ –∑–∞–∫–∞–∑—ã</b>",
        f"–í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: {len(orders)}",
    ]
    if status_counts:
        lines.append("–ü–æ —Å—Ç–∞—Ç—É—Å–∞–º:")
        for label, count in sorted(status_counts.items(), key=lambda x: x[0]):
            lines.append(f"‚Ä¢ {html.escape(label)} ‚Äî {count}")
    lines.append("")
    if orders:
        lines.append("–ü–æ—Å–ª–µ–¥–Ω–∏–µ 15 –∑–∞–∫–∞–∑–æ–≤:")
        for item in orders[:15]:
            order = item['order']
            user_id = item['user_id']
            order_name = ORDER_TYPES.get(order.get('type'), {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø')
            link = build_user_contact_link(user_id)
            display = html.escape(format_user_display_name(user_id))
            status = html.escape(order.get('status', '‚Äî'))
            created = item['created'].strftime('%Y-%m-%d %H:%M')
            lines.append(
                f"#{order.get('order_id')} ¬∑ {status} ¬∑ {html.escape(order_name)} ¬∑ {order.get('price', 0)} ‚ÇΩ ¬∑ "
                f"<a href=\"{html.escape(link, quote=True)}\">{display}</a> ¬∑ {created}"
            )
    else:
        lines.append("–ó–∞–∫–∞–∑–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
    keyboard = [
        [
            InlineKeyboardButton(
                f"#{item['order'].get('order_id')} ¬∑ {item['order'].get('status', '')}",
                callback_data=f"admin_view_{item['user_id']}_{item['order'].get('order_id')}"
            )
        ]
        for item in orders[:15]
    ]
    keyboard.append([InlineKeyboardButton("üî• –ü–æ—Å–ª–µ–¥–Ω–∏–µ", callback_data='admin_recent_orders')])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ú–µ–Ω—é", callback_data='admin_menu')])
    await query.edit_message_text(
        "\n".join(lines),
        parse_mode=ParseMode.HTML,
        reply_markup=InlineKeyboardMarkup(keyboard),
        disable_web_page_preview=True,
    )
    return ADMIN_MENU


async def admin_show_recent_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await answer_callback_query(query, context)
    orders = collect_all_orders()[:8]
    lines = ["üî• <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–∫–∞–∑—ã</b>"]
    if not orders:
        lines.append("–ü–æ–∫–∞ –Ω–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–∑–∂–µ.")
    for item in orders:
        order = item['order']
        user_id = item['user_id']
        order_name = ORDER_TYPES.get(order.get('type'), {}).get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø')
        lines.extend([
            f"\n#{order.get('order_id')} ¬∑ {html.escape(order.get('status', '‚Äî'))} ¬∑ {html.escape(order_name)}",
            f"–ö–ª–∏–µ–Ω—Ç: <a href=\"{html.escape(build_user_contact_link(user_id), quote=True)}\">{html.escape(format_user_display_name(user_id))}</a>",
            f"–°–æ–∑–¥–∞–Ω: {html.escape(str(order.get('created_at', '‚Äî')))} ¬∑ –û–±–Ω–æ–≤–ª—ë–Ω: {html.escape(str(order.get('updated_at', '‚Äî')))}",
            f"–¶–µ–Ω–∞: {order.get('price', 0)} ‚ÇΩ ¬∑ –ë–æ–Ω—É—Å–∞–º–∏ –æ–ø–ª–∞—á–µ–Ω–æ {order.get('bonus_used', 0)} ‚ÇΩ",
        ])
        if order.get('deadline_label'):
            lines.append(f"–°—Ä–æ–∫: {html.escape(order.get('deadline_label'))}")
        if order.get('topic'):
            lines.append(f"–¢–µ–º–∞: {html.escape(order.get('topic', ''))}")
        if order.get('requirements'):
            lines.append(f"–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: {html.escape(order.get('requirements', ''))}")
    keyboard = [
        [InlineKeyboardButton(f"–û—Ç–∫—Ä—ã—Ç—å #{order['order'].get('order_id')}", callback_data=f"admin_view_{order['user_id']}_{order['order'].get('order_id')}")]
        for order in orders
    ]
    keyboard.append([InlineKeyboardButton("üì¶ –í—Å–µ –∑–∞–∫–∞–∑—ã", callback_data='admin_orders')])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ú–µ–Ω—é", callback_data='admin_menu')])
    await query.edit_message_text(
        "\n".join(lines),
        parse_mode=ParseMode.HTML,
        reply_markup=InlineKeyboardMarkup(keyboard),
        disable_web_page_preview=True,
    )
    return ADMIN_MENU


async def admin_show_leads(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await answer_callback_query(query, context)
    records = get_recent_user_profiles(25)
    lines = [
        "üë• <b>–ü–µ—Ä–µ—Ö–æ–¥—ã –≤ –±–æ—Ç–∞</b>",
        f"–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(USERS)}",
        "–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥—ã:",
    ]
    for idx, (last_seen, user_id, profile) in enumerate(records, 1):
        display = html.escape(format_user_display_name(int(user_id)))
        link = html.escape(build_user_contact_link(int(user_id)), quote=True)
        first_seen = profile.get('first_seen', '‚Äî')
        last_action = html.escape(str(profile.get('last_action', '‚Äî')))
        lines.append(
            f"{idx}. <a href=\"{link}\">{display}</a> ‚Äî –ø–æ—Å–ª–µ–¥–Ω—è—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å {html.escape(str(profile.get('last_seen', last_seen.strftime('%Y-%m-%d %H:%M'))))}"
        )
        lines.append(f"   –ü–µ—Ä–≤–æ–µ –ø–æ—Å–µ—â–µ–Ω–∏–µ: {html.escape(str(first_seen))}. –î–µ–π—Å—Ç–≤–∏–µ: {last_action}")
    keyboard = [[InlineKeyboardButton("‚¨ÖÔ∏è –ú–µ–Ω—é", callback_data='admin_menu')]]
    await query.edit_message_text(
        "\n".join(lines),
        parse_mode=ParseMode.HTML,
        reply_markup=InlineKeyboardMarkup(keyboard),
        disable_web_page_preview=True,
    )
    return ADMIN_MENU


async def admin_show_bonuses(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await answer_callback_query(query, context)
    entries = []
    for user_id in BONUSES.keys():
        entry = ensure_bonus_account(user_id)
        try:
            uid = int(user_id)
        except (TypeError, ValueError):
            uid = user_id
        entries.append({'user_id': uid, 'entry': entry})
    entries.sort(key=lambda item: item['entry'].get('balance', 0), reverse=True)
    lines = [
        "üéÅ <b>–ë–æ–Ω—É—Å–Ω—ã–µ —Å—á–µ—Ç–∞ –∏ —Ä–µ—Ñ–µ—Ä–∞–ª—ã</b>",
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å—á–µ—Ç–æ–≤: {len(entries)}",
        "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: –±–æ–Ω—É—Å—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–≥–æ—Ä–∞—é—Ç —á–µ—Ä–µ–∑ 30 –¥–Ω–µ–π –±–µ–∑ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏ –º–æ–≥—É—Ç –ø–æ–∫—Ä—ã—Ç—å –¥–æ 50% –∑–∞–∫–∞–∑–∞.",
        "",
    ]
    for idx, item in enumerate(entries[:15], 1):
        entry = item['entry']
        user_id = item['user_id']
        referrals = len(get_referrals_for_referrer(user_id))
        lines.append(
            f"{idx}. {html.escape(format_user_display_name(user_id))} ‚Äî –±–∞–ª–∞–Ω—Å {entry.get('balance', 0)} ‚ÇΩ ("
            f"–Ω–∞—á–∏—Å–ª–µ–Ω–æ {entry.get('credited', 0)} ‚ÇΩ / —Å–ø–∏—Å–∞–Ω–æ {entry.get('redeemed', 0)} ‚ÇΩ), —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {referrals}"
        )
    keyboard = [
        [InlineKeyboardButton(f"{format_user_display_name(item['user_id'])} ¬∑ {item['entry'].get('balance', 0)} ‚ÇΩ", callback_data=f"admin_bonus_user_{item['user_id']}")]
        for item in entries[:15]
    ]
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ú–µ–Ω—é", callback_data='admin_menu')])
    await query.edit_message_text(
        "\n".join(lines),
        parse_mode=ParseMode.HTML,
        reply_markup=InlineKeyboardMarkup(keyboard),
        disable_web_page_preview=True,
    )
    return ADMIN_MENU


async def admin_view_bonus_user(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    target_user_id: str,
    notice: Optional[str] = None,
):
    query = update.callback_query
    await answer_callback_query(query, context)
    entry = ensure_bonus_account(target_user_id)
    try:
        uid = int(target_user_id)
    except (TypeError, ValueError):
        uid = target_user_id
    profile_name = format_user_display_name(uid)
    referrer = get_referrer_for_user(uid)
    referrals = get_referrals_for_referrer(uid)
    lines = [f"üéÅ <b>–ë–æ–Ω—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {html.escape(profile_name)}</b>"]
    if notice:
        lines.append(f"<i>{html.escape(notice)}</i>")
    lines.extend([
        f"–ë–∞–ª–∞–Ω—Å: {entry.get('balance', 0)} ‚ÇΩ",
        f"–ù–∞—á–∏—Å–ª–µ–Ω–æ –≤—Å–µ–≥–æ: {entry.get('credited', 0)} ‚ÇΩ",
        f"–°–ø–∏—Å–∞–Ω–æ –≤—Å–µ–≥–æ: {entry.get('redeemed', 0)} ‚ÇΩ",
    ])
    if referrer:
        try:
            ref_link = build_user_contact_link(int(referrer))
            ref_display = format_user_display_name(int(referrer))
            lines.append(f"–ü—Ä–∏–≥–ª–∞—Å–∏–ª: <a href=\"{html.escape(ref_link, quote=True)}\">{html.escape(ref_display)}</a>")
        except (TypeError, ValueError):
            lines.append(f"–ü—Ä–∏–≥–ª–∞—Å–∏–ª: {html.escape(str(referrer))}")
    if referrals:
        lines.append("\n–†–µ—Ñ–µ—Ä–∞–ª—ã:")
        for ref in referrals[:10]:
            ref_name = ref.get('full_name') or ref.get('username') or ref.get('user_id')
            status = ref.get('status')
            bonus_total = ref.get('bonus_total', 0)
            lines.append(f"‚Ä¢ {html.escape(str(ref_name))} ‚Äî {status or '–±–µ–∑ —Å—Ç–∞—Ç—É—Å–∞'} (–±–æ–Ω—É—Å–æ–≤ –Ω–∞—á–∏—Å–ª–µ–Ω–æ {bonus_total} ‚ÇΩ)")
    history = entry.get('history', [])
    if history:
        lines.append("\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏:")
        for item in history[-5:]:
            if isinstance(item, dict):
                lines.append(
                    f"{html.escape(str(item.get('timestamp', '‚Äî')))} ‚Äî {html.escape(str(item.get('type', '–æ–ø–µ—Ä–∞—Ü–∏—è')))}: {item.get('amount', 0)} ‚ÇΩ ({html.escape(str(item.get('reason', '')))} )"
                )
    keyboard = [
        [InlineKeyboardButton("üìà –ù–∞—á–∏—Å–ª–∏—Ç—å", callback_data=f'admin_bonus_credit_{target_user_id}')],
        [InlineKeyboardButton("üìâ –°–ø–∏—Å–∞—Ç—å", callback_data=f'admin_bonus_debit_{target_user_id}')],
        [InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='admin_bonuses')],
    ]
    await query.edit_message_text(
        "\n".join(lines),
        parse_mode=ParseMode.HTML,
        reply_markup=InlineKeyboardMarkup(keyboard),
        disable_web_page_preview=True,
    )
    return ADMIN_MENU


async def admin_prompt_manual_bonus(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    target_user_id: str,
    mode: str,
):
    context.user_data['admin_state'] = {
        'name': 'bonus_manual',
        'mode': mode,
        'user_id': target_user_id,
    }
    action = '–Ω–∞—á–∏—Å–ª–µ–Ω–∏—è' if mode == 'credit' else '—Å–ø–∏—Å–∞–Ω–∏—è'
    await admin_view_bonus_user(
        update,
        context,
        target_user_id,
        notice=f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è {action} –±–æ–Ω—É—Å–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: ¬´500 –ó–∞ –æ—Ç–∑—ã–≤¬ª. –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞'.",
    )
    return ADMIN_MENU


async def admin_view_order(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: str, order_id: str, notice: Optional[str] = None):
    query = update.callback_query
    await answer_callback_query(query, context)
    order, _ = find_order_for_admin(user_id, order_id)
    if not order:
        await query.edit_message_text(
            "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data='admin_orders')]])
        )
        return ADMIN_MENU
    text, markup = build_admin_order_view(user_id, order, notice)
    await query.edit_message_text(
        text,
        parse_mode=ParseMode.HTML,
        reply_markup=markup,
        disable_web_page_preview=True,
    )
    return ADMIN_MENU


async def admin_change_order_status(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    user_id: str,
    order_id: str,
    status_code: str,
):
    order, _ = find_order_for_admin(user_id, order_id)
    if not order:
        query = update.callback_query
        await answer_callback_query(query, context)
        await query.edit_message_text(
            "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data='admin_orders')]])
        )
        return ADMIN_MENU
    changed = set_order_status(order, status_code, note='–ò–∑–º–µ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')
    save_json(ORDERS_FILE, ORDERS)
    notice = None
    if changed:
        notice = '–°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω.'
        try:
            await safe_send_message(
                context.bot,
                int(user_id),
                f"–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞ #{order.get('order_id')} –æ–±–Ω–æ–≤–ª—ë–Ω: {get_status_label(status_code)}.",
            )
        except (TypeError, ValueError):
            pass
        if status_code == 'paid':
            await process_paid_order(context, int(user_id), order)
    return await admin_view_order(update, context, user_id, order_id, notice=notice)


async def admin_delete_order(update: Update, context: ContextTypes.DEFAULT_TYPE, user_id: str, order_id: str):
    query = update.callback_query
    await answer_callback_query(query, context)
    order, user_orders = find_order_for_admin(user_id, order_id)
    if not order:
        await query.edit_message_text(
            "–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data='admin_orders')]])
        )
        return ADMIN_MENU
    user_orders[:] = [ordr for ordr in user_orders if str(ordr.get('order_id')) != str(order_id)]
    if not user_orders:
        ORDERS.pop(str(user_id), None)
    save_json(ORDERS_FILE, ORDERS)
    await query.edit_message_text(
        "–ó–∞–∫–∞–∑ —É–¥–∞–ª—ë–Ω.",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É", callback_data='admin_orders')]])
    )
    return ADMIN_MENU


async def admin_handle_order_bonus_request(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    user_id: str,
    order_id: str,
):
    context.user_data['admin_state'] = {
        'name': 'order_bonus',
        'user_id': user_id,
        'order_id': order_id,
    }
    await admin_view_order(
        update,
        context,
        user_id,
        order_id,
        notice='–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—É–º–º—É —Å–ø–∏—Å–∞–Ω–∏—è –±–æ–Ω—É—Å–æ–≤ —á–∏—Å–ª–æ–º. –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ ¬´–æ—Ç–º–µ–Ω–∞¬ª.',
    )
    return ADMIN_MENU


def build_admin_prices_view():
    lines = [
        "üí≤ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω–∞–º–∏</b>",
        f"–¢–µ–∫—É—â–∏–π —Ä–µ–∂–∏–º: {current_pricing_mode}",
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø —Ä–∞–±–æ—Ç—ã –¥–ª—è —Ç–æ—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.",
        "",
    ]
    keyboard = []
    for key, info in ORDER_TYPES.items():
        prices = PRICES.get(key, DEFAULT_PRICES.get(key, {'base': 0, 'min': 0}))
        lines.append(
            f"{info['icon']} {info['name']} ‚Äî –±–∞–∑–æ–≤–∞—è {prices.get('base', 0)} ‚ÇΩ / –º–∏–Ω–∏–º—É–º {prices.get('min', prices.get('base', 0))} ‚ÇΩ"
        )
        keyboard.append([InlineKeyboardButton(info['name'], callback_data=f'admin_price_{key}')])
    keyboard.append([InlineKeyboardButton("–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º", callback_data='admin_price_mode')])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ú–µ–Ω—é", callback_data='admin_menu')])
    return "\n".join(lines), InlineKeyboardMarkup(keyboard)


async def admin_show_prices(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await answer_callback_query(query, context)
    text, markup = build_admin_prices_view()
    await query.edit_message_text(
        text,
        parse_mode=ParseMode.HTML,
        reply_markup=markup,
        disable_web_page_preview=True,
    )
    return ADMIN_MENU


async def admin_view_price_type(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    order_type_key: str,
    notice: Optional[str] = None,
):
    query = update.callback_query
    await answer_callback_query(query, context)
    info = ORDER_TYPES.get(order_type_key)
    if not info:
        await query.edit_message_text(
            "–¢–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='admin_prices')]])
        )
        return ADMIN_MENU
    prices = PRICES.get(order_type_key, DEFAULT_PRICES.get(order_type_key, {'base': 0, 'min': 0}))
    lines = [
        f"üí≤ <b>{info['icon']} {html.escape(info['name'])}</b>",
        f"–ë–∞–∑–æ–≤–∞—è —Ü–µ–Ω–∞: {prices.get('base', 0)} ‚ÇΩ",
        f"–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ü–µ–Ω–∞: {prices.get('min', prices.get('base', 0))} ‚ÇΩ",
    ]
    if notice:
        lines.append(f"<i>{html.escape(notice)}</i>")
    lines.append("\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∫–∏ –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ç–æ—á–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
    keyboard = []
    keyboard.extend(chunk_buttons([
        InlineKeyboardButton("‚àí1000 –±–∞–∑–æ–≤–∞—è", callback_data=f'admin_price_adj_{order_type_key}_base_-1000'),
        InlineKeyboardButton("+1000 –±–∞–∑–æ–≤–∞—è", callback_data=f'admin_price_adj_{order_type_key}_base_1000'),
        InlineKeyboardButton("‚àí500 –±–∞–∑–æ–≤–∞—è", callback_data=f'admin_price_adj_{order_type_key}_base_-500'),
        InlineKeyboardButton("+500 –±–∞–∑–æ–≤–∞—è", callback_data=f'admin_price_adj_{order_type_key}_base_500'),
    ], 2))
    keyboard.extend(chunk_buttons([
        InlineKeyboardButton("‚àí1000 –º–∏–Ω–∏–º—É–º", callback_data=f'admin_price_adj_{order_type_key}_min_-1000'),
        InlineKeyboardButton("+1000 –º–∏–Ω–∏–º—É–º", callback_data=f'admin_price_adj_{order_type_key}_min_1000'),
        InlineKeyboardButton("‚àí500 –º–∏–Ω–∏–º—É–º", callback_data=f'admin_price_adj_{order_type_key}_min_-500'),
        InlineKeyboardButton("+500 –º–∏–Ω–∏–º—É–º", callback_data=f'admin_price_adj_{order_type_key}_min_500'),
    ], 2))
    keyboard.append([
        InlineKeyboardButton("‚úèÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–∑–æ–≤—É—é", callback_data=f'admin_price_set_{order_type_key}_base'),
        InlineKeyboardButton("‚úèÔ∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –º–∏–Ω–∏–º—É–º", callback_data=f'admin_price_set_{order_type_key}_min'),
    ])
    keyboard.append([InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data='admin_prices')])
    await query.edit_message_text(
        "\n".join(lines),
        parse_mode=ParseMode.HTML,
        reply_markup=InlineKeyboardMarkup(keyboard),
        disable_web_page_preview=True,
    )
    return ADMIN_MENU


async def admin_toggle_pricing_mode(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await answer_callback_query(query, context)
    global current_pricing_mode
    current_pricing_mode = 'hard' if current_pricing_mode == 'light' else 'light'
    text, markup = build_admin_prices_view()
    await query.edit_message_text(
        text,
        parse_mode=ParseMode.HTML,
        reply_markup=markup,
        disable_web_page_preview=True,
    )
    return ADMIN_MENU


async def admin_adjust_price(update: Update, context: ContextTypes.DEFAULT_TYPE, order_type_key: str, field: str, delta: int):
    adjust_price_value(order_type_key, field, delta)
    return await admin_view_price_type(update, context, order_type_key, notice='–¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.')


async def admin_prompt_price_input(
    update: Update,
    context: ContextTypes.DEFAULT_TYPE,
    order_type_key: str,
    field: str,
):
    context.user_data['admin_state'] = {
        'name': 'price_manual',
        'order_type': order_type_key,
        'field': field,
    }
    field_label = '–±–∞–∑–æ–≤–æ–π' if field == 'base' else '–º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π'
    await admin_view_price_type(
        update,
        context,
        order_type_key,
        notice=f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ {field_label} —Ü–µ–Ω—ã —á–∏—Å–ª–æ–º. –î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–ø–∏—à–∏—Ç–µ '–æ—Ç–º–µ–Ω–∞'.",
    )
    return ADMIN_MENU


def _serialize_export_value(value):
    if value is None:
        return ''
    if isinstance(value, bool):
        return '1' if value else '0'
    if isinstance(value, (int, float)):
        return value
    if isinstance(value, (list, dict)):
        try:
            return json.dumps(value, ensure_ascii=False)
        except (TypeError, ValueError):
            return str(value)
    return str(value)


async def admin_export_orders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await answer_callback_query(query, context)

    export_rows = []
    encountered_fields = []

    def register_field(field_name: str):
        if field_name not in encountered_fields:
            encountered_fields.append(field_name)

    for orders in ORDERS.values():
        if not isinstance(orders, list):
            continue
        for order in orders:
            if not isinstance(order, dict):
                continue
            row = {}
            for key, value in order.items():
                register_field(key)
                row[key] = _serialize_export_value(value)
            export_rows.append(row)

    if not export_rows:
        await query.edit_message_text(
            "üìÇ –ü–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.",
            reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ú–µ–Ω—é", callback_data='admin_menu')]]),
        )
        return ADMIN_MENU

    preferred = [field for field in EXPORT_FIELD_ORDER if field in encountered_fields]
    remaining = [field for field in encountered_fields if field not in preferred]
    fieldnames = preferred + remaining

    export_file = os.path.join(DATA_DIR, 'orders_export.csv')
    with open(export_file, 'w', newline='', encoding='utf-8') as csvfile:
        writer = csv.DictWriter(csvfile, fieldnames=fieldnames, extrasaction='ignore')
        writer.writeheader()
        for row in export_rows:
            writer.writerow({field: row.get(field, '') for field in fieldnames})

    try:
        with open(export_file, 'rb') as export_handle:
            await context.bot.send_document(ADMIN_CHAT_ID, export_handle)
    finally:
        try:
            os.remove(export_file)
        except OSError:
            logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —ç–∫—Å–ø–æ—Ä—Ç–∞ %s", export_file)

    await query.edit_message_text(
        "üì§ –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç.",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ú–µ–Ω—é", callback_data='admin_menu')]]),
    )
    return ADMIN_MENU

# –ê–¥–º–∏–Ω —Å—Ç–∞—Ä—Ç
async def admin_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_CHAT_ID:
        await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω!")
        return
    user = update.effective_user
    log_user_action(user.id, user.username, "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", user.full_name)
    return await show_admin_menu(update, context)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∞–¥–º–∏–Ω-–º–µ–Ω—é
async def admin_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await answer_callback_query(query, context)
    data = query.data
    if data == 'admin_menu':
        return await show_admin_menu(update, context)
    if data == 'admin_orders':
        return await admin_show_orders(update, context)
    if data == 'admin_recent_orders':
        return await admin_show_recent_orders(update, context)
    if data == 'admin_leads':
        return await admin_show_leads(update, context)
    if data == 'admin_bonuses':
        return await admin_show_bonuses(update, context)
    if data.startswith('admin_bonus_user_'):
        target = data.split('_', 3)[-1]
        return await admin_view_bonus_user(update, context, target)
    if data.startswith('admin_bonus_credit_'):
        target = data.split('_', 3)[-1]
        return await admin_prompt_manual_bonus(update, context, target, 'credit')
    if data.startswith('admin_bonus_debit_'):
        target = data.split('_', 3)[-1]
        return await admin_prompt_manual_bonus(update, context, target, 'debit')
    if data.startswith('admin_view_'):
        _, _, payload = data.partition('admin_view_')
        parts = payload.split('_')
        if len(parts) >= 2:
            user_id, order_id = parts[0], parts[1]
            return await admin_view_order(update, context, user_id, order_id)
    if data.startswith('admin_status_'):
        _, _, payload = data.partition('admin_status_')
        parts = payload.split('_')
        if len(parts) >= 3:
            user_id, order_id, status_code = parts[0], parts[1], parts[2]
            return await admin_change_order_status(update, context, user_id, order_id, status_code)
    if data.startswith('admin_order_bonus_'):
        _, _, payload = data.partition('admin_order_bonus_')
        parts = payload.split('_')
        if len(parts) >= 2:
            user_id, order_id = parts[0], parts[1]
            return await admin_handle_order_bonus_request(update, context, user_id, order_id)
    if data.startswith('admin_delete_'):
        _, _, payload = data.partition('admin_delete_')
        parts = payload.split('_')
        if len(parts) >= 2:
            user_id, order_id = parts[0], parts[1]
            return await admin_delete_order(update, context, user_id, order_id)
    if data == 'admin_prices':
        return await admin_show_prices(update, context)
    if data == 'admin_price_mode':
        return await admin_toggle_pricing_mode(update, context)
    if data.startswith('admin_price_adj_'):
        _, _, payload = data.partition('admin_price_adj_')
        parts = payload.split('_')
        if len(parts) >= 3:
            order_type, field, delta = parts[0], parts[1], parts[2]
            try:
                delta_value = int(delta)
            except ValueError:
                delta_value = 0
            return await admin_adjust_price(update, context, order_type, field, delta_value)
    if data.startswith('admin_price_set_'):
        _, _, payload = data.partition('admin_price_set_')
        parts = payload.split('_')
        if len(parts) >= 2:
            order_type, field = parts[0], parts[1]
            return await admin_prompt_price_input(update, context, order_type, field)
    if data.startswith('admin_price_'):
        order_type = data.split('_', 2)[-1]
        if order_type in ORDER_TYPES:
            return await admin_view_price_type(update, context, order_type)
    if data == 'admin_export':
        return await admin_export_orders(update, context)
    if data == 'back_to_main':
        return await main_menu(update, context)
    await query.edit_message_text(
        "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –∞–¥–º–∏–Ω-–º–µ–Ω—é.",
        reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚¨ÖÔ∏è –ú–µ–Ω—é", callback_data='admin_menu')]])
    )
    return ADMIN_MENU

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∞–¥–º–∏–Ω–∞
async def admin_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    state = context.user_data.get('admin_state')
    if not state:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π.")
        return ADMIN_MENU
    text = (update.message.text or '').strip()
    if isinstance(state, dict):
        state_name = state.get('name')
    else:
        state_name = state
    if text.lower() in {'–æ—Ç–º–µ–Ω–∞', '/cancel', 'cancel'}:
        context.user_data.pop('admin_state', None)
        await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        return ADMIN_MENU
    if state_name == 'bonus_manual':
        target_user = state.get('user_id')
        mode = state.get('mode', 'credit')
        parts = text.split(None, 1)
        try:
            amount = int(parts[0])
        except (ValueError, IndexError):
            await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ —Å—É–º–º—É —á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: 500 –∏–ª–∏ '500 –ó–∞ –æ—Ç–∑—ã–≤'.")
            return ADMIN_MENU
        reason = parts[1] if len(parts) > 1 else (
            '–ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º' if mode == 'credit' else '–°–ø–∏—Å–∞–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'
        )
        before = ensure_bonus_account(target_user)
        balance_before = before.get('balance', 0)
        entry_type = 'manual_credit' if mode == 'credit' else 'manual_debit'
        after = add_bonus_operation(str(target_user), amount, entry_type, reason)
        balance_after = after.get('balance', 0)
        try:
            target_chat_id = int(target_user)
        except (TypeError, ValueError):
            target_chat_id = None
        if mode == 'credit':
            actual = balance_after - balance_before
            if actual > 0:
                if target_chat_id is not None:
                    await safe_send_message(
                        context.bot,
                        target_chat_id,
                        f"üéÅ –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ {actual} ‚ÇΩ –±–æ–Ω—É—Å–æ–≤: {reason}.",
                    )
                await update.message.reply_text(f"–ù–∞—á–∏—Å–ª–µ–Ω–æ {actual} ‚ÇΩ. –ë–∞–ª–∞–Ω—Å: {balance_after} ‚ÇΩ.")
            else:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∏—Å–ª–∏—Ç—å –±–æ–Ω—É—Å—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—É–º–º—É.")
        else:
            actual = balance_before - balance_after
            if actual > 0:
                if target_chat_id is not None:
                    await safe_send_message(
                        context.bot,
                        target_chat_id,
                        f"‚ÑπÔ∏è –° –≤–∞—à–µ–≥–æ –±–æ–Ω—É—Å–Ω–æ–≥–æ —Å—á—ë—Ç–∞ —Å–ø–∏—Å–∞–Ω–æ {actual} ‚ÇΩ: {reason}.",
                    )
                await update.message.reply_text(f"–°–ø–∏—Å–∞–Ω–æ {actual} ‚ÇΩ. –ë–∞–ª–∞–Ω—Å: {balance_after} ‚ÇΩ.")
            else:
                await update.message.reply_text("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–Ω—É—Å–æ–≤ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è.")
        context.user_data.pop('admin_state', None)
        return ADMIN_MENU
    if state_name == 'order_bonus':
        user_id = state.get('user_id')
        order_id = state.get('order_id')
        try:
            amount = int(text)
        except ValueError:
            await update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
            return ADMIN_MENU
        order, _ = find_order_for_admin(user_id, order_id)
        if not order:
            await update.message.reply_text("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            applied = await debit_bonuses_for_order(context, int(user_id), order, amount)
            save_json(ORDERS_FILE, ORDERS)
            if applied:
                balance = ensure_bonus_account(user_id).get('balance', 0)
                await update.message.reply_text(f"–°–ø–∏—Å–∞–Ω–æ {applied} ‚ÇΩ –±–æ–Ω—É—Å–æ–≤. –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∫–ª–∏–µ–Ω—Ç–∞: {balance} ‚ÇΩ.")
            else:
                await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–ø–∏—Å–∞—Ç—å –±–æ–Ω—É—Å—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –±–∞–ª–∞–Ω—Å –∏ –ª–∏–º–∏—Ç 50%.")
        context.user_data.pop('admin_state', None)
        return ADMIN_MENU
    if state_name == 'price_manual':
        order_type = state.get('order_type')
        field = state.get('field')
        try:
            value = int(text)
        except ValueError:
            await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ü–µ–Ω—ã.")
            return ADMIN_MENU
        if field == 'base':
            set_price_value(order_type, base=value)
        else:
            set_price_value(order_type, minimum=value)
        await update.message.reply_text("–¶–µ–Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")
        context.user_data.pop('admin_state', None)
        return ADMIN_MENU
    await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –ø–∞–Ω–µ–ª–∏.")
    context.user_data.pop('admin_state', None)
    return ADMIN_MENU

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = ApplicationBuilder().token(TELEGRAM_BOT_TOKEN).build()
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler('start', start), CommandHandler('admin', admin_start)],
        states={
            SELECT_MAIN_MENU: [CallbackQueryHandler(main_menu_handler)],
            SELECT_ORDER_TYPE: [CallbackQueryHandler(select_order_type)],
            VIEW_ORDER_DETAILS: [CallbackQueryHandler(view_order_details)],
            INPUT_TOPIC: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_topic)],
            SELECT_DEADLINE: [CallbackQueryHandler(select_deadline)],
            INPUT_REQUIREMENTS: [
                CallbackQueryHandler(requirements_button_handler, pattern='^requirements_(hint|skip)$'),
                MessageHandler(filters.TEXT & ~filters.COMMAND, input_requirements),
                CommandHandler('skip', skip_requirements),
            ],
            INPUT_CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, input_contact)],
            UPLOAD_FILES: [
                CallbackQueryHandler(file_upload_action, pattern='^files_(done|skip)$'),
                MessageHandler(
                    (
                        filters.Document.ALL
                        | filters.PHOTO
                        | filters.AUDIO
                        | filters.VOICE
                        | filters.VIDEO
                        | filters.VIDEO_NOTE
                        | filters.ANIMATION
                        | filters.Sticker.ALL
                    ),
                    handle_file_upload,
                ),
                CommandHandler('skip', skip_file_upload),
                CommandHandler('done', skip_file_upload),
                MessageHandler(filters.TEXT & ~filters.COMMAND, remind_file_upload),
            ],
            ADD_UPSSELL: [CallbackQueryHandler(upsell_handler)],
            ADD_ANOTHER_ORDER: [CallbackQueryHandler(add_another_handler)],
            CONFIRM_CART: [CallbackQueryHandler(confirm_cart_handler)],
            ADMIN_MENU: [CallbackQueryHandler(admin_menu_handler), MessageHandler(filters.TEXT & ~filters.COMMAND, admin_message)],
            PROFILE_MENU: [CallbackQueryHandler(show_profile)],
            PROFILE_ORDERS: [CallbackQueryHandler(show_profile)],
            PROFILE_ORDER_DETAIL: [CallbackQueryHandler(show_profile)],
            PROFILE_FEEDBACKS: [CallbackQueryHandler(show_profile)],
            PROFILE_REFERRALS: [CallbackQueryHandler(show_profile)],
            PROFILE_BONUSES: [CallbackQueryHandler(show_profile)],
            SHOW_PRICE_LIST: [CallbackQueryHandler(show_price_list)],
            PRICE_CALCULATOR: [CallbackQueryHandler(price_calculator)],
            SELECT_CALC_DEADLINE: [CallbackQueryHandler(calc_select_deadline)],
            SELECT_CALC_COMPLEXITY: [CallbackQueryHandler(calc_select_complexity)],
            SHOW_FAQ: [CallbackQueryHandler(show_faq)],
            FAQ_DETAILS: [CallbackQueryHandler(show_faq)],
            PROFILE_FEEDBACK_INPUT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, input_feedback),
                CallbackQueryHandler(show_profile),
            ],
        },
        fallbacks=[CommandHandler('start', start)],
    )
    application.add_handler(conv_handler)
    application.add_error_handler(error_handler)
    application.run_polling(drop_pending_updates=True)

if __name__ == '__main__':
    main()
